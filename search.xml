<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>跳軌換跑道關於學習寫CODE這件事</title>
    <url>/2021/07/18/%E8%B7%B3%E8%BB%8C%E6%8F%9B%E8%B7%91%E9%81%93%EF%BC%8C%E9%97%9C%E6%96%BC%E5%AD%B8%E7%BF%92%E5%AF%ABCODE%E9%80%99%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<blockquote><p>　　終於在2021年5月底的時候，下定決心要轉換跑道，關於開始走上轉職成為網頁工程師的路上。</p>
</blockquote>
<span id="more"></span>
<p>　　後來開始在網路上查找相關的資訊，思考要如何學習以及入門的時候，搜尋到了AC CAMP，看完了簡介沒兩分鐘馬上決定從這個地方開始出發。</p>
<p>　　其實本身自己也算是完全沒有任何關於寫code的經驗，所以剛開始是加入學期一，發現AC 的課綱內容真的寫得很清楚明瞭，對我來說我覺得真的不困難，所以很快的就把所有學期一的預讀內容和練習完成，然後還迫不及待的馬上進入了學期二的預讀階段，最後在六月底開班前完成了學期二之一的預讀，也接著開啟學期二之二的預讀了!</p>
<p>　　在寫這篇文章時，距離下定決心轉換跑道後大概經過了一個半月左右的時間，從零基礎的我，到完成了學期二之一，學了非常多的新知識，新觀念，以及新技術，這都是一個半月前自己沒有想像過的，而在一步步完成這些階段性的課程後，越來越據信心自己能夠成功轉職。</p>
<p>　　這當中真的非常謝謝AC 的所有教練以及助教，在過去幾周當中，課程內容不僅僅是教你如何認識code寫code，還有很多的關於學習的技巧、心態的調整、學長姐的經驗分享…好多好多，這些真的都讓我受益匪淺，而且AC的學習環境真的設計的很棒，每個單元都有相對的關係，一步步建立起相關的知識、一步步的加深練習難度且不斷地重複操作熟悉，然後又有點像是在玩遊戲一樣，當遇到打不贏的BOSS還有助教可以求救幫助，最後破關斬將所帶來的成就感也讓自己信心大增，當中建立起自信心也不再那麼擔心害怕自己沒辦法成功轉職，保持著良好的心態持續的學習，相信自己能夠達到目標。</p>
<p>　　對於下一個階段的學習，希望自己能夠保持著學習動力繼續完成所有挑戰，而目前也已經在預讀學期二之二了，課程難度真的有感提升超多！期望自己能夠在八月分開課之前完成所有的預讀與練習。</p>
]]></content>
      <categories>
        <category>日記</category>
        <category>轉職</category>
      </categories>
      <tags>
        <tag>轉職</tag>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>預讀學期2-2_S3_A12-電影清單加碼功能-作業心得</title>
    <url>/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p><strong><a href="https://doug0849.github.io/movielist-exercise/">練習完成檔案連結</a></strong></p>
<p>　　之前一直沒有寫相關的作業心得筆記，一方面是覺得難度不高，一方面覺得操作幾次就很熟練了，所以就很懶惰…但進入到學期2-2後，光是S2的製作電影清單，突然感覺難度一下提升超級多，很多內容不是一次兩次就能夠記起來且熟悉，而且函式的拆解跟邏輯複雜度上也提升相當多，演算法也來到了百行之多，這時才發現真的很難一下吸收，所以決定開始來寫學習、作業、技術相關筆記來加深自己的記憶及熟練度。</p>
<span id="more"></span>

<p>任務<br>這次的任務是要把S2製作的My Movie List做進化，且要滿足以下幾個功能</p>
<ol>
<li>要新增一組功能按鈕，可以將畫面呈現為列表模式及卡片模式。</li>
<li>畫面能夠順利在 list 和 card 模式間來回切換。</li>
<li>不能影響到原有功能（尤其是 More、收藏按鈕、分頁功能要正常運作）</li>
</ol>
<h2 id="Step-1：將按鈕樣式置入"><a href="#Step-1：將按鈕樣式置入" class="headerlink" title="Step 1：將按鈕樣式置入"></a>Step 1：將按鈕樣式置入</h2><p>第一步老樣子，先從HTML下手吧！先將Font Awesome按鈕的樣式置入頁面中，並且調整至適當的位置。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step1.jpg" class="" title="step1.jpg">
<center>加入icon</center>

<p>說明：<br>要先將Font Awesome的JS先置入head裏頭。之後在Font Awesome裡尋找相關icon的class碼，安排它在Html的位置，也要適時的調整Row或col（Boostrap開發模式），最後別忘了給他們的父層，以及各自都加上屬於自己的id。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step2.jpg" class="" title="step2.jpg">
<center>將Font Awesome的JS先置入head裏頭</center>

<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step3.jpg" class="" title="step3.jpg">
<center>安排icon在html的位置</center>

<hr>
<h2 id="Step-2：清單模式在畫面上呈現的樣子"><a href="#Step-2：清單模式在畫面上呈現的樣子" class="headerlink" title="Step 2：清單模式在畫面上呈現的樣子"></a>Step 2：清單模式在畫面上呈現的樣子</h2><img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step4.jpg" class="" title="step4.jpg">
<center>清單模式</center>

<p>只要先寫出一列的樣板模式即可，因為之後要用JS把設定好的HTML格式資料至入到畫面上。</p>
<hr>
<h2 id="Step-3：改造function"><a href="#Step-3：改造function" class="headerlink" title="Step 3：改造function"></a>Step 3：改造function</h2><p>首先我們可以複製renderMovieList這個函式，並將它命名為renderMoviesList2之後方便做測試，基本上函式內的邏輯都一樣，只要將新寫的HTML格式資料帶到到rawHTML即可。所以去HTML把你剛剛寫好的格式放進rawHTML吧，記得要把電影名稱或相關要顯示的資料，替換成正確的參數。</p>
<p>之後可以將最下方renderMovieList改成renderMovieList2，來看看是不是正確顯示在螢幕上。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step5.jpg" class="" title="step5.jpg">
<center>rawHTML的template literal置入新的格式</center>>

<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step4.jpg" class="" title="step4.jpg">
<center>成功畫面</center>

<hr>
<h2 id="Step-4：新增監聽器"><a href="#Step-4：新增監聽器" class="headerlink" title="Step 4：新增監聽器"></a>Step 4：新增監聽器</h2><p>在Step 1置入icon的時候，就將自己和父層都設定好了id。<br>所以先回到上頭設定常數，將各自的位置選擇出來。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step6.jpg" class="" title="step6.jpg">
<center>把各自按鈕位置選擇出來</center>

<p>然後在父層掛上監聽器。<br>這邊我設定的父層為btnShowStyle</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step7.jpg" class="" title="step7.jpg">
<center>btnShowStyle新增監聽器</center>

<ol>
<li>因為在按鈕上有設置a標籤，所以要先取消超連結本上的預設動作。</li>
<li>加入判斷式，確定是選擇到哪一個按鈕。</li>
<li>接著變更圖案本身的顏色樣式，因為是使用boostrap系統，所以要將各自的classList做新增或刪除。(使用狀態下為藍色primary，非使用狀態下為灰色secondary)</li>
<li>最後面的renderMovieList記得改成renderMovieList2</li>
</ol>
<p>最後來檢查按鈕是否有成功，此時按下按鈕，按鈕要會變色，且會變換顯示的模式</p>
<hr>
<h2 id="Step-5：優化顯示模式的語法。"><a href="#Step-5：優化顯示模式的語法。" class="headerlink" title="Step 5：優化顯示模式的語法。"></a>Step 5：優化顯示模式的語法。</h2><p>由於現在將兩個不同的顯示方式分成兩個函式來寫，會增加後面管理程式碼的困擾，因為<strong>只要碰到任何跟渲染畫面”renderMovieList”的時候，都要去判斷要用renderMovieList或是renderMovieList2</strong>，包含查找功能，換頁功能都有用到renderMovieList這個函式，為了不去更改原有的程式碼，所以決定把這兩個函式合併。</p>
<p>先將renderMovieList2內的程式碼先搬到renderMovieList後面，<br>接著就是加入判斷式，</p>
<p>這邊思考後，我的想法是先在最上頭新增一個變數 showStyle作為信號開關，</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step8.jpg" class="" title="step8.jpg">
<center>showStyle作為信號開關</center>

<p>接著在renderMovieList加上判斷式，若showStyle等於0時，使用cards的顯示方式，否則就顯示清單模式。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step9.jpg" class="" title="step9.jpg">
<center>加上判斷式</center>

<p>接著回到顯示模式監聽器，加入當選則卡片時showStyle重新賦值為0，選擇清單時，showStyle重新賦值為1。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step10.jpg" class="" title="step10.jpg">
<center>依照選擇不同的按鈕，重新賦值showStyle</center>


<p>最後檢查一遍把確定所有的renderMovieList不要有出現之前寫的renderMovieList2。</p>
<p>現在頁面已經可以順利切換了，而且也優化了程式碼，未來若要新增第三種第四種顯示方式，只要在renderMovieList內新增新的判斷及格式，還有在樣式顯示監聽器內加入新的判斷就可以了。</p>
<p>目前原有的功能也要都能夠正常運作，只要選定一種顯示方式，不管用搜尋、換頁都會保持原有的顯示方式。</p>
<p>但是發現一個小問題，<strong>當我在卡片狀態下然後在第三頁時，當我按下變換樣式顯示頁面內容會回到第一頁，應該要顯示當頁才對。</strong></p>
<p>這時候回頭檢視所有的renderMovieList帶入的引數發現，全部都帶入了<strong>getMoviesByPage(1)<strong>，所以不管搜尋、換頁，</strong>只要碰到getMoviesByPage(1)帶入的是1時，全都會回到第一頁。</strong></p>
<hr>
<h2 id="Step-6：修正所有的getMoviesByPage-1"><a href="#Step-6：修正所有的getMoviesByPage-1" class="headerlink" title="Step 6：修正所有的getMoviesByPage(1)"></a>Step 6：修正所有的getMoviesByPage(1)</h2><p>除了搜尋監聽器內的getMoviesByPage(1)。</p>
<p>回到最上方設定一個新的變數page 且賦予值 1。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step11.jpg" class="" title="step11.jpg">
<center>新變數page 賦予值 1</center>

<p>再來將所有的getMoviesByPage的引數帶入page<br>getMoviesByPage(page)<br>這邊要注意，**除了搜尋監聽器內的getMoviesByPage(1)**，不能修改。</p>
<p>然後在回到之前頁碼生成的函式內，將原本的定義page為變數的let拿掉。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step12.jpg" class="" title="step12.jpg">
<center>原本的 let page = 的let拿掉</center>

<p>現在只要切換頁面就會給page重新賦值，page被確定下來，就算換樣式，也還是會保持在原本該顯示的頁數了。</p>
<p><strong>除了搜尋監聽器內的getMoviesByPage(1)不能改原因</strong><br>因為現在<strong>page在globle的狀態</strong>，假設一開始先切換到第三頁，page值此時會被賦予3，搜尋監聽器內的getMoviesByPage()引數如果是page的情況下’’renderMovieList(getMoviesByPage(page))’’，這時候搜尋任何關鍵字，搜尋結果是少於三頁的情況下，會發現此刻畫面會變一片空白沒有資料，那是因為我們變成渲染頁數變成第三頁，但是結果少於三頁，所以當然就沒有任何電影顯示出來。<br>所以再次強調</p>
<p><strong>除了搜尋監聽器內的getMoviesByPage(1)，不能修改。</strong><br><strong>除了搜尋監聽器內的getMoviesByPage(1)，不能修改。</strong><br><strong>除了搜尋監聽器內的getMoviesByPage(1)，不能修改。</strong></p>
<hr>
<ol>
<li><del>已完成任務 (已完成的畫刪除線)</del></li>
<li><del>要新增一組功能按鈕，可以將畫面呈現為列表模式及卡片模式。</del></li>
<li><del>畫面能夠順利在 list 和 card 模式間來回切換。</del></li>
<li><del>不能影響到原有功能（尤其是 More、收藏按鈕、分頁功能要正常運作）<br>由於程式碼篇幅頗長，請運用 description 欄位說明新增的功能，幫助助教能有效注意到重點。在程式碼中也請運用註解來提示助教！</del></li>
</ol>
<h2 id="已完成的視覺與使用者動線驗收重點-已完成的畫刪除線"><a href="#已完成的視覺與使用者動線驗收重點-已完成的畫刪除線" class="headerlink" title="已完成的視覺與使用者動線驗收重點 (已完成的畫刪除線)"></a>已完成的視覺與使用者動線驗收重點 (已完成的畫刪除線)</h2><ol>
<li><del>切換顯示模式時，內容能停留在原本的頁面，不會跳回第一頁</del></li>
<li><del>若使用搜尋後，再切換顯示模式，仍然能正常顯示搜尋結果</del></li>
<li>視覺上能讓使用者知道現在選的是第幾頁、<del>哪個顯示模式</del>、哪些項目有加入收藏</li>
</ol>
<p>看來只剩下最後兩項了，加把勁!</p>
<hr>
<h2 id="Step-7：讓使用者知道現在位在第幾頁。"><a href="#Step-7：讓使用者知道現在位在第幾頁。" class="headerlink" title="Step 7：讓使用者知道現在位在第幾頁。"></a>Step 7：讓使用者知道現在位在第幾頁。</h2><p>隨著改變頁數要改變頁碼的顯示樣式，這代表每當我選了一次頁碼，我勢必要重新渲染一次頁碼，所以表示一定會是從這兩個部分下手</p>
<ol>
<li>renderPaginator(在正確的頁數上改變樣式)</li>
<li>Paginator的監聽器(換頁數就重新render)</li>
</ol>
<p>我們先到Paginator監聽器來，這邊比較容易修改，我們只要在最後加上</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step13.jpg" class="" title="step13.jpg">
<center>新增運算子，及重新渲染頁碼</center>

<p>新增data運算子，因為每次點選換頁按鈕都得重新渲染頁面按鈕，更新顯示正在哪一頁上，所以要看是依filteredMovies來重新渲染頁碼或是movies來重新渲染頁碼，如果搜尋情況下filteredMovies會有資料，將會依搜尋結果的情況下去產生頁碼，若否則會依照原本movies的資料長度去產生頁碼。</p>
<p>再來我們接著修改函式renderPaginator(在正確的頁數上改變樣式)<br>函式當中，<strong>一旦我們置入所有頁碼的HTML格式資料後，我們就可以立刻選取到各li子元素</strong>，而因為globle的page會被更新，此時便可以依照global的page去指出是哪一個li子元素裡的a元素標籤應該要被修改樣式。</p>
<p>paginator.children[0]為第一頁的li標籤<br>paginator.children[0].firstElementChild為li裡面的a標籤<br>paginator.children[0].firstElementChild.classList.add(‘bg-primary’, ‘text-white’)<br>a標籤新增名稱至class內(boostrap改變樣式)</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step14.jpg" class="" title="step14.jpg">
<center>指出正確的元素位置，修改樣式</center>

<p>最後再回到搜尋監聽器上，當搜尋為空白的時候，我們要顯示全部的電影，但別忘了要記得清空filteredMovies,因為filteredMovies現在已經移出到globle當中，也有很多函式都有使用到他，連續操作搜尋下，萬一filteredMovies保留之前的搜尋結果，將會出現顯示錯誤電影資料。<br>最後再補上一個執行產生頁碼函式。</p>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step15.jpg" class="" title="step15.jpg">
<center>記得要清空filteredMovies</center>>

<p>這樣<strong>讓使用者知道現在選的是第幾頁</strong>就大功告成啦!</p>
<hr>
<h2 id="Step-8：顯示哪些項目有加入收藏。"><a href="#Step-8：顯示哪些項目有加入收藏。" class="headerlink" title="Step 8：顯示哪些項目有加入收藏。"></a>Step 8：顯示哪些項目有加入收藏。</h2><p>這大概是所有題目內，我覺得最困擾的一個題目了，邏輯性比較複雜。<br>我思考的邏輯是，先製作一個新的function：</p>
<p>一開始先設定幾個常數：</p>
<ol>
<li>選出所有class為card-title的元素(應該有12個，因為每頁顯示12筆)，並放入panelMovies，之後就可以使用panelMovies[i].innerText來取得畫面上的電影名稱。</li>
<li>將我最愛的電影從locoalStorage取出並從JSON轉成Object，並放入favoriteMoviesList</li>
<li>將favoriteMoviesList使用map製造出一個新的陣列，條件是每一筆電影資料的電影名稱，並放入favoriteMoviesTitle</li>
<li>重複畫面上總共有幾部電影，就重複檢查多少次，for迴圈<br>加入判斷式，若favoriteMoviesTitle裡面含有畫面上第i部的電影名稱，修改”新增至我的最愛按鈕”的顯示樣式。</li>
</ol>
<img src="/2021/07/29/%E9%A0%90%E8%AE%80%E5%AD%B8%E6%9C%9F2-2-S3-A12-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E5%8A%A0%E7%A2%BC%E5%8A%9F%E8%83%BD-%E4%BD%9C%E6%A5%AD%E5%BF%83%E5%BE%97/step16.jpg" class="" title="step16.jpg">
<center>新增一個函式來做已收藏確認</center>

<p>補充說明：</p>
<ol>
<li>第140行，當選擇到元素標籤時，可以使用setAttribute(’string’,’value’)來設定新的標籤屬性，兩個引述都是字串，無屬性值的時候要輸入空字串。</li>
<li>對陣列使用map()，會將陣列中每一個項目，依照條件，產生一組新的陣列</li>
</ol>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN範例說明</a></strong></p>
<p>Array.prototype.map() - JavaScript | MDN<br>The method creates a new array populated with the results of calling a provided function on every element in the calling array. callbackFn Function that is called for every element of arr. Each time callbackFn executes, the returned value is added to newArray.<br>Mozilla</p>
<p>大功告成，完成了所有作業要求了!<br>最後再檢查一遍作業的批改標準吧!<br>詳細的檢查一遍，操作看看，有沒有發現其他的小錯誤，若沒有大致上應該沒有問題啦!</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>setAttribute()</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo操作</title>
    <url>/2021/09/09/Hexo%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="關於draft"><a href="#關於draft" class="headerlink" title="關於draft"></a>關於draft</h3><p>放在/source/_drafts下<br>可執行命令hexo new draft <code>&lt;title&gt;</code> 創建草稿<br>通過執行命令hexo publish <code>&lt;title&gt;</code> 可以把_drafts下的草稿文章推到_posts下</p>
<span id="more"></span>
<p>會按照new_post_name的配置來命名文章<br>如果有開啟_config裡的post_asset_folder: true，對應的asset資料夾也會一起移動<br>手動操作也是可以的，草稿最後會被解析到model(‘Post’)中，參數published變為0 （預設情况下不會傳給布局頁面進行渲染）<br>_config.yml中如果設定render_drafts: true<br>就會傳給布局頁面進行渲染<br>在generate或deploy時會自動把_drafts/下的文件解析生成到目標文件夾下（但不會移動到/source/_posts下）</p>
<h3 id="關於New-Post"><a href="#關於New-Post" class="headerlink" title="關於New Post"></a>關於New Post</h3><p>執行命令hexo new title 就可以創建新文章<br>新文章會丟到/source/_posts底下<br>可以在站點_config裡面設定新文章預設命名<br>就可以在_posts底下自動用資料夾分類</p>
<p>new_post_name: :year/:month/:title.md</p>
<p>文章將會在_posts/2021/09/底下</p>
<h3 id="關於產生靜態文件"><a href="#關於產生靜態文件" class="headerlink" title="關於產生靜態文件"></a>關於產生靜態文件</h3><p>執行命令hexo generate<br>這時候Hexo會將你用Markdown寫好的文章、圖片，會全部依照主體layout設定去生成HTML文件，這些檔案位於public底下，每一次執行就會依照source檔案底下有變動的的文章重新生成一次html文檔</p>
<p>簡易命令寫法 hexo g<br>可以附帶參數 -w 將會隨時監控原始檔案的變動，只要一變動便會重新生成新的html，在本地測試時很好用，開一個終端機執行hexo serve啟動本地伺服器觀察，一個終端機執行 hexo g -w 將會持續幫你更新檔案。</p>
<h3 id="關於部屬"><a href="#關於部屬" class="headerlink" title="關於部屬"></a>關於部屬</h3><p>執行命令hexo deploy<br>在執行hexo deploy之前要先執行 hexo generate來產生靜態文件，然後在執行hexo deploy就會將靜態文件上傳到指定位置。<br>Hexo預設支援github，只要在github開好repo並設定成github_page，可以在站點_config裡加入設定值</p>
<p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/%E5%80%8B%E4%BA%BA%E5%B8%B3%E8%99%9F/repo%E5%90%8D%E7%A8%B1">https://github.com/個人帳號/repo名稱</a><br>  branch: master(推送到master分支，若不使用master分支要設定到你repo設定的預設分支上)</p>
<p>執行hexo deploy -m “commit message”<br>大概等於git commit -m “message”，但是這邊不使用git push檔案，因為會將所有原始資料上傳至Github造成檔案混亂，最好另外開一個branch來做檔案備份，或自己手動在本地電腦備份。</p>
<h3 id="關於本地伺服器"><a href="#關於本地伺服器" class="headerlink" title="關於本地伺服器"></a>關於本地伺服器</h3><p>執行完hexo generate後若不想直接上傳到個人網路空間，<br>可以執行 hexo serve 來啟動本地伺服器，觀察檢查是否有其他問題。<br>本地伺服器位置位於 <a href="https://localhost:4000/">https://localhost:4000</a></p>
<h3 id="關於站點配置-config-yml"><a href="#關於站點配置-config-yml" class="headerlink" title="關於站點配置_config.yml"></a>關於站點配置_config.yml</h3><p>有很多的基本配置都在這個文件裡，相關的配置變數可以詳官方網站的文件說明。<br><strong><a href="https://hexo.io/zh-cn/docs/configuration">Hexo配置</a></strong></p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主題添加留言板</title>
    <url>/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="本篇使用的是utterances留言板"><a href="#本篇使用的是utterances留言板" class="headerlink" title="本篇使用的是utterances留言板"></a>本篇使用的是utterances留言板</h2><p>utterances是由TypeScript所構成的留言區套件，透過串接GitHub issue的方式來完成留言區功能(但需要GitHub帳號)，簡而言之就是它可以在文章底下留言，並且同步到GitHub專案留下一個issue留言。</p>
<span id="more"></span>
<h2 id="為什麼選擇用-utterances-留言板"><a href="#為什麼選擇用-utterances-留言板" class="headerlink" title="為什麼選擇用 utterances 留言板?"></a>為什麼選擇用 utterances 留言板?</h2><p>因為Blog全部架在GitHub上，感覺統一管理比較方便。</p>
<h2 id="套件引用"><a href="#套件引用" class="headerlink" title="套件引用"></a>套件引用</h2><ul>
<li>utterances: <a href="https://utteranc.es/">https://utteranc.es/</a></li>
</ul>
<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>進入 utterances 後找到 <strong>configuration</strong></p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/1.jpg" class="" title="1.jpg">

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>先點擊 utterances app 進到下個頁面</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/2.jpg" class="" title="2.jpg">

<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>點擊安裝，然後再到個人GitHub的Setting裡的Applications設定utterances<br>看是要所有的Repo都可以引用這個套件，或是只有選擇的Repo可以使用，這邊我是選擇指有特定的選擇Repo可用</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/3.jpg" class="" title="3.jpg">

<h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>回到 utterances頁，輸入你的repo資料<br>我自己的範例是 doug0849/doug0849.github.io</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/1.jpg" class="" title="1.jpg">

<h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>再來 Blog Post ↔️ Issue Mapping 大概就是當有人留言後會出現的樣式，選第一個即可。</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/4.jpg" class="" title="4.jpg">

<h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>選一個你喜歡的樣式風格</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/5.jpg" class="" title="5.jpg">

<h2 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h2><p>複製JavaScript 到你模板裡要放Comment的位置</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/6.jpg" class="" title="6.jpg">

<p>每個模板的位置不太一樣，必須要找到正確的地方引入此段JS<br>以Hexo Next 模板來說，請丟到 Next 主題資料夾下 &gt; layout &gt; _partials &gt; comments.swig<br>開啟 comments.swig 找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if page.comments %&#125;</span><br></pre></td></tr></table></figure>
<p>把它丟在它下面</p>
<img src="/2021/09/10/Hexo%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E6%9D%BF/7.jpg" class="" title="7.jpg">

<p>最後到主題_config.yml最後補上</p>
<p>utterances:<br>  enable: true</p>
<p>這樣就完成啦!</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code - Markdown &amp; Hexo 自動補齊語法標籤設定</title>
    <url>/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/</url>
    <content><![CDATA[<p>在VS Code中寫Markdown，每次撰寫時遇到一些插入圖片或是其他語法覺得很麻煩，因為都不會自動補齊，因此上網找了些資訊看VS Code要怎麼調整才能達到這個功能。</p>
<span id="more"></span>
<p>首先點選文件&gt;首選項&gt;用戶片段</p>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step1.png" class="" title="Step1">
<p>接著會在上方有一個視窗，要輸入Markdown，點選Markdown.json</p>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step2.png" class="" title="Step2">
<p>在markdown.json 上面有一些範例</p>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step3.png" class="" title="Step3">

<p>Print to console 是標題<br>prefix 是要觸發的關鍵字<br>body 是觸發後的樣子，可以在後面補上(‘$1’)(‘$2’)，$代表執行快捷後光標自動跳到的位置</p>
<p>再來要編寫適合自己的Markdonw<br>我希望要得到的完整語句是```javascript<br>可以添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Print to ```javascript&quot;: &#123;</span><br><span class="line">	&quot;prefix&quot;: &quot;```js&quot;,</span><br><span class="line">	&quot;body&quot;: [</span><br><span class="line">		&quot;```Javascript&quot;,</span><br><span class="line">		&quot;$1&quot;,</span><br><span class="line">		&quot;$2&quot;,</span><br><span class="line">		&quot;```&quot;,</span><br><span class="line">	],</span><br><span class="line">	&quot;description&quot;: &quot;js代碼塊&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>另外我是使用Hexo的框架，所以也可以自己加上Hexo相關的標籤語法</p>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step4.png" class="" title="step4">

<p>最後要在VS code的setting.json裡設定開啟Markdown的快捷功能</p>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step5.png" class="" title="step5">
</br>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step6.png" class="" title="step6">
</br>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step7.png" class="" title="step7">
</br>
大功告成
</br>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step8.png" class="" title="step8">
</br>
<img src="/2021/09/09/Markdown%E8%87%AA%E5%8B%95%E8%A3%9C%E9%BD%8A%E8%AA%9E%E6%B3%95%E8%A8%AD%E5%AE%9A/step9.png" class="" title="step9">]]></content>
      <categories>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>ejs樣板語法技術筆記</title>
    <url>/2021/09/08/ejs%E6%A8%A3%E6%9D%BF%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>在ejs樣版檔案下的標籤語意</p>
<p>&lt;%   ‘脚本’ 标签，用于流程控制，无输出。<br>&lt;%_  删除其前面的空格符<br>&lt;%__ 在模板中，透过 __ 或 _p 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。<br>     可詳<a href="https://hexo.io/zh-cn/docs/internationalization">Hexo官方文檔</a><br>&lt;%=  输出数据到模板（输出是转义 HTML 标签），像是等於innerHTML<br>&lt;%-  输出非转义的数据到模板，像是等於innerText<br>&lt;%#  注释标签，不执行、不输出内容<br>&lt;%%  输出字符串 ‘&lt;%’<br>%&gt;   一般结束标签<br>-%&gt;  删除紧随其后的换行符<br>_%&gt;  将结束标签后面的空格符删除</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>EJS</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>EJS</tag>
      </tags>
  </entry>
  <entry>
    <title>今天是學寫Code的第107天</title>
    <url>/2021/09/09/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%AD%B8%E5%AF%ABCode%E7%9A%84%E7%AC%AC107%E5%A4%A9/</url>
    <content><![CDATA[<h5 id="今天是我學寫code的第107天"><a href="#今天是我學寫code的第107天" class="headerlink" title="今天是我學寫code的第107天"></a><center>今天是我學寫code的第107天</center></h5><p><strong><em><center>(歡呼加鼓掌!)</center></em></strong></p>
<p>　　在2021年5月25日晚上這一天，對自己下了一個人生的新決定，決定要轉換跑道啦!<br>　　學到至今3個月多一些，加上第一次自己成功在Github上用Hexo架出靜態網頁，就在這邊稍微紀錄一下自己的轉職日記啦! XD</p>
<img src="/2021/09/09/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%AD%B8%E5%AF%ABCode%E7%9A%84%E7%AC%AC107%E5%A4%A9/1.jpg" class="" title="1.jpg">
<span id="more"></span>
<p>　　再一次說說為什麼在這老大不小的年紀，就在今年年底即將正式年滿32歲的微大叔年紀，竟然毅然決然地決定換跑道吧!</p>
<p>　　本身原本是從事建築設計產業的，但從大學開始半工半讀一直做到了現，到海外越南工作，到了前幾個月還是下了個決心轉換跑道了。</p>
<p>　　原因的話，其實一方面是疫情影響的關係導致無法回親愛的臺灣，一方面是建築設計這產業在臺灣的處境真的越來越差，薪資待遇真的讓我覺得糟糕到很離譜，本身就須具備很多專業的知識及技術能力，還得花很多時間學習新的軟件操作及使用，但學這麼多卻完全不見薪水有多大的成長，反而變成理所應當的感覺，而且這產業所背負的責任壓力，時間壓力以及工作量卻又時常相當的大，所以就在想著若是回臺灣後到底要不要繼續這產業，最後最後自己內心的想法是”<strong>NO</strong>“，所以就就開始思考了，那我想做什麼?</p>
<img src="/2021/09/09/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%AD%B8%E5%AF%ABCode%E7%9A%84%E7%AC%AC107%E5%A4%A9/2.jpg" class="" title="2.jpg">

<p>　　這要回到小時候，其實自己的父親是一位很熱愛電腦的人，他在我小學一二年級的時候，就買了第一台window 95的電腦，後來甚至自己維修電腦做小生意賺錢，於是我從小就熱愛打電腦遊戲，後來父母覺得我們似乎有興趣，也把我們送到電腦補習班學習，但對於那個年紀連除法都不會的我來說，學程式語言真的太難了。後來父母就把我轉送到學習PhotoShop、DreamWeaver、Flash…但老實說現在大概只有PhotoShop功力還行吧，後來長大自己對這方面也比較有興趣又自己買書學了Illustrator，我想也是因為從小培養出對電腦相關的興趣，加上國中畢業時原本想要去念大安高中的資訊科，但那時候母親聽信親戚的話，那時候很多人覺得念技職學校沒未來，大家都要念普通高中然後進好名校，所以堅持不讓我念技職學校，也可能是這原因，又再心理埋下了另一個小小的遺憾，直至今日人生自己做主，所以就下定決心不如開始學習寫程式吧!</p>
<img src="/2021/09/09/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%AD%B8%E5%AF%ABCode%E7%9A%84%E7%AC%AC107%E5%A4%A9/3.jpg" class="" title="3.jpg">

<p>　　剛好越南疫情也相當嚴重，所有工作幾乎都停擺，工作也非常不忙碌，所以有比較多的時間可以專心學習，就這樣<strong>邊打電動邊工作邊學怎麼Programming</strong>到今天<strong>107</strong>天的日子裡，已經會如何使用Express.js以及MongoDB來架設基本的網站，雖說還不是很熟悉，但也算是一個歷程了，再來又自己學習了如何在Github架出靜態網頁，如何用Hexo框架系統在Github架設個人blog，也算是滿滿的成就感啦!(再次為自己歡呼加鼓掌)</p>
<img src="/2021/09/09/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%AD%B8%E5%AF%ABCode%E7%9A%84%E7%AC%AC107%E5%A4%A9/4.jpg" class="" title="4.jpg">

<p>　　再來下個階段目標，因為目前這個Blog還是套用超具人氣的樣板(可是它真的很好用，害我有點懶惰)，接著開始會自己學習把所有Blog頁面重新架設過，並建立出自己風格的Hexo主題，然後陸陸續續把相關練習作品整理起來，在這邊當成最好的履歷表呈現出來，也繼續學習更多複雜精進的技術，另一方面看看是否會幫助到一些跟我一樣半路出家的人，接著希望明年差不多這個時間，看看是否能順利達成轉職目標，就讓我們繼續看下去吧!</p>
<img src="/2021/09/09/%E4%BB%8A%E5%A4%A9%E6%98%AF%E5%AD%B8%E5%AF%ABCode%E7%9A%84%E7%AC%AC107%E5%A4%A9/5.jpg" class="" title="5.jpg">]]></content>
      <categories>
        <category>日記</category>
        <category>轉職</category>
      </categories>
      <tags>
        <tag>轉職</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Hexo在Github上架設blog</title>
    <url>/2021/09/08/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%9E%B6%E8%A8%ADblog/</url>
    <content><![CDATA[<h1 id="廢話前言"><a href="#廢話前言" class="headerlink" title="廢話前言"></a>廢話前言</h1><h2 id="想要架設部落格作為記錄自己生活或相關筆記嗎"><a href="#想要架設部落格作為記錄自己生活或相關筆記嗎" class="headerlink" title="想要架設部落格作為記錄自己生活或相關筆記嗎?"></a>想要架設部落格作為記錄自己生活或相關筆記嗎?</h2><p>會想架設部落格的主要原因是自己正在上Javascript課程，課程有提到要開個部落格來作為自己的技術筆記、心得、或一些自己想記錄的東西作為備忘，畢竟學海無涯，有很多東西學會後久久不使用真的會忘記。</p>
<p>後來使用了一些大眾市面上的blog，但終究覺得不合用，一方面更想要有自己的風格，一方面對於自己來說希望更加方便撰寫紀錄及發布。而我這個初心者才知道，原來可以在Github撰寫靜態網頁(蠢)，所以就開始研究到底該如何在Github上架設一個簡易的靜態blog之旅。</p>
<span id="more"></span>
<p>起初還真的不知道要怎麼做，只知道如何在Github上呈現index.html，然後再自己手動寫連結…甚至最後想說是不是全部手刻HTML(蠢x2)，後來想想這不對啊!! 這也太麻煩且浪費時間了，不如用市面上的blog就好，不然完全本末倒置(笑，所以就開始試著搜尋網路上有沒有更適合的作法。<br>後來發現網路上有很多已經完成的樣板，只要下在別人寫好的主體下來加以修改撰寫，在推上Github，就可以完成自己的個人BLOG了。一開始搜尋到的是jekyll但它是ruby撰寫的，所以我也沒有環境系統，所以搞了老半天，但經過一翻嘗試還是有很多問題，覺得搞得一個頭兩個大的時候，讓我搜尋到了Hexo!!</p>
<blockquote><p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他標記語言）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。</p>
<footer><strong>@Hexo</strong><cite><a href="https://hexo.io/zh-cn/docs/">hexo.io/zh-cn/docs</a></cite></footer></blockquote>



<p>他主要又是以Javascript, Node.js 來操作，完全符合我現在在上課的內容，所以環境架設也都已經完成了，做了點嘗試沒想到一下就成功架上Github，中間也沒有遇到太多問題，所以最後決定使用Hexo作為主要的撰寫框架工具啦!順便在這邊紀錄使用的情況，及寫下相關技術筆記。</p>
<hr>
<h1 id="第一步：安裝必備程式"><a href="#第一步：安裝必備程式" class="headerlink" title="第一步：安裝必備程式"></a>第一步：安裝必備程式</h1><h2 id="程式清單："><a href="#程式清單：" class="headerlink" title="程式清單："></a>程式清單：</h2><ul>
<li><a href="https://git-scm.com/downloads">Git</a> 終端機 (Windows推薦)</li>
<li><a href="https://nodejs.org/en/">Node.js</a> 讓你可以在終端機上以Javascript指令來操作電腦</li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a>方便你在個人電腦上編程<br>詳細可以參閱 <a href="https://hexo.io/zh-tw/docs/index.html">Hexo官方文件</a></li>
</ul>
<p>如果完全沒有使用過Git Bash終端機及使用GitHub的同學<br>就是要先有自己的Github帳號啦! 之後要在Git Bash裡設定你的識別資料</p>
<p>範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>

<p>user.name 為你的Github帳戶<br>user.email 為你的Github帳戶設定的email</p>
<h1 id="第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案"><a href="#第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案" class="headerlink" title="第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案"></a>第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案</h1><ol>
<li>安裝完後請打開 Git Bash 終端機 </li>
<li>在終端機上輸入 npm install -g hexo-cli ，來安裝hexo</li>
<li>一旦 Hexo 安裝完成後，執行下列指令，Hexo 就會在指定資料夾中建立所有需要的檔案。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; // folder輸入你要建立的資料夾名稱</span><br><span class="line">                     // 若想要在別的硬碟裡面建立，記得先使用終端機輸入cd 移動到你要建立blog資料夾的位置</span><br><span class="line">$ cd &lt;folder&gt; // folder輸入你剛剛建立好的資料夾名稱</span><br><span class="line">$ npm install // 安裝初始化npm</span><br><span class="line">$ git init // 若想要在電腦上使用git版本控制，記得要順便安裝git，不理解或不想用可忽略</span><br></pre></td></tr></table></figure>

<p>建立完成後，專案資料夾會有下列檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>此檔案為網站配置檔案(站點配置)，可以在這個檔案配置大部分的設定。</p>
<h2 id="source-資料夾"><a href="#source-資料夾" class="headerlink" title="source 資料夾"></a>source 資料夾</h2><p>原始檔案資料夾是放置內容的地方。檔案或資料夾名稱開頭為 _ (底線) 的資料還有設定隱藏檔案會被忽略。<br>因為在你把網頁推到伺服器端的時候，Hexo或先把所有原始檔案渲染成Html檔案，在推上伺服器，所以不重要或想要忽略的檔案，可以設定隱藏或是在檔案名稱開頭加上_ (底線)。<br>但除了 _posts 資料夾，因為_posts資料夾內會存放所有你的文章Markdonw檔案。<br>而渲染完成的 檔案會被放到 public 資料夾，而其他檔案會被拷貝過去。</p>
<h2 id="themes-資料夾"><a href="#themes-資料夾" class="headerlink" title="themes 資料夾"></a>themes 資料夾</h2><p>主題資料夾，裡面可以放各式各樣的主題，可以放自己的或網路上別人製作好提供的，然後 Hexo 會根據你_config.yml裡面主題設定要使用哪一個主題來渲染最後完成的HTML檔案。</p>
<h1 id="第三步：在GitHub上建立一個新的Repository"><a href="#第三步：在GitHub上建立一個新的Repository" class="headerlink" title="第三步：在GitHub上建立一個新的Repository"></a>第三步：在GitHub上建立一個新的Repository</h1><ol>
<li><p>先到Github開一個新的Repository</p>
<img src="/2021/09/08/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%9E%B6%E8%A8%ADblog/1.jpg" class="" title="1.jpg"></li>
<li><p>輸入Repo名稱 &gt; 選擇公開 &gt;建立</p>
<img src="/2021/09/08/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%9E%B6%E8%A8%ADblog/2.jpg" class="" title="2.jpg"></li>
</ol>
<h1 id="第四步：安裝hexo-deployer-git，並部屬至Github"><a href="#第四步：安裝hexo-deployer-git，並部屬至Github" class="headerlink" title="第四步：安裝hexo-deployer-git，並部屬至Github"></a>第四步：安裝hexo-deployer-git，並部屬至Github</h1><p>回到終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h1 id="設定-config-yml"><a href="#設定-config-yml" class="headerlink" title="設定_config.yml"></a>設定_config.yml</h1><p>使用 VS CODE 打開剛剛建立好的HEXO資料夾</p>
<img src="/2021/09/08/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%9E%B6%E8%A8%ADblog/3.jpg" class="" title="3.jpg">

<p>開啟_config.yml</p>
<img src="/2021/09/08/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%9E%B6%E8%A8%ADblog/4.jpg" class="" title="4.jpg">

<p>裡面有很多相關設定，不一一介紹，主要只以可以成功部屬到Github需要設定的參數為主，其他沒提到的，可以到 <a href="https://hexo.io/zh-tw/docs/configuration">Hexo 官方文檔</a> 查詢。</p>
<p><strong>以下設定以我自己為範例</strong></p>
<p>url: doug0849.github.io<br>設定GitHub的repo設定網址</p>
<p>設定主題<br>theme: landscape </p>
<p>預設應該是landscape，若網路上下載了別人的主題，可以放到themes底下，設定好資料夾名稱，將這個參數改為資料夾名稱即可。</p>
<p>最後設定部屬參數<br>在最後加上以下參數<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/Doug0849/doug0849.github.io.git">https://github.com/Doug0849/doug0849.github.io.git</a><br>  branch: main</p>
<p>type輸入git<br>repo請輸入你完整的repo位置<br>branch: 改為main</p>
<p>回到終端機執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="第五步：別忘了要把repo設定成Github-Page"><a href="#第五步：別忘了要把repo設定成Github-Page" class="headerlink" title="第五步：別忘了要把repo設定成Github Page"></a>第五步：別忘了要把repo設定成Github Page</h1><img src="/2021/09/08/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E6%9E%B6%E8%A8%ADblog/5.jpg" class="" title="5.jpg">

<h1 id="第六步：訪問-https-你的帳戶名稱-github-io"><a href="#第六步：訪問-https-你的帳戶名稱-github-io" class="headerlink" title="第六步：訪問 https://你的帳戶名稱.github.io/"></a>第六步：訪問 https://你的帳戶名稱.github.io/</h1><p>基本上這樣就能在github上看到你的個人blog啦!<br>如果剛上傳應該不會馬上看到，可能過個五分鐘內就會顯示，<br>剩下就是設定其他相關參數，及寫下你的第一篇文章。</p>
<h1 id="第七步：發文"><a href="#第七步：發文" class="headerlink" title="第七步：發文"></a>第七步：發文</h1><p>這邊只做簡易說明<br>使用終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [title]</span><br></pre></td></tr></table></figure>

<p>到_posts底下會看到一個你命名為 [title] 的 Markdown 檔案<br>就可以使用 Markdown 語法來撰寫你的文章<br>寫完後在終端機執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>等個5分鐘，再次訪問 https://你的帳戶名稱.github.io/<br>看看文章有沒有PO上去啦!</p>
<p>其他簡單的操作說明可以看<br><a href="https://doug0849.github.io/2021/09/09/Hexo%E6%93%8D%E4%BD%9C/">其他Hexo 操作</a></p>
<p>詳細的其他說明一樣看<br><a href="https://hexo.io/zh-tw/docs/configuration">Hexo 官方文檔</a> 查詢。</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>AC數位職涯相談室#4-開箱數位軟體團隊-模擬專案體驗帶你找出適合的職能-流水帳心得</title>
    <url>/2021/07/24/%E9%96%8B%E7%AE%B1%E6%95%B8%E4%BD%8D%E8%BB%9F%E9%AB%94%E5%9C%98%E9%9A%8A-%E6%A8%A1%E6%93%AC%E5%B0%88%E6%A1%88%E9%AB%94%E9%A9%97%E5%B8%B6%E4%BD%A0%E6%89%BE%E5%87%BA%E9%81%A9%E5%90%88%E7%9A%84%E8%81%B7%E8%83%BD-%E6%B5%81%E6%B0%B4%E5%B8%B3%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<blockquote><p>2021年7月22日，非常感謝AC又舉辦了每月一次的數位職涯相談室啦! 本次邀請到的就是BLOG新翹楚 <strong>方格子</strong> 的前端及全端工程師：<u><strong>Jiang &amp; Kuan</strong></u>來分享現實職場當中前後端各別負責的工作內容。 </p>
</blockquote>
<span id="more"></span>

<p>　　本次座談由兩位主持人 職崖教練 <u><strong>Yenting</strong></u> 及 學習教練 <u><strong>Ken</strong></u> 來開啟這次的相談室啦，一開始不外乎一定要用kahoot來做一些現場調查啦，本次的調查內容大概都會與講座的題目所說的找出適合的職能有所相關，一共有四個題目做調查。</p>
<hr>
<h2 id="第一題：你期待在數位相談室獲得什麼價值？"><a href="#第一題：你期待在數位相談室獲得什麼價值？" class="headerlink" title="第一題：你期待在數位相談室獲得什麼價值？"></a>第一題：你期待在數位相談室獲得什麼價值？</h2><ol>
<li>了解數位軟體產業的慣例與現況</li>
<li>與有經驗的學長姐、助教討論職崖相關問題</li>
<li>釐清自己的職崖目標</li>
<li>了解現在學習的技術在不同的產業與職能中會如何被應用</li>
</ol>
<p>此題我的答案是 - <strong>了解現在學習的技術在不同的產業與職能中會如何被應用。</strong>因為本身在上AC課程的時候大概就有感覺，自己對於網頁的切版排版這件事抗拒很大，相對於撰寫JS的演算法會覺得很麻煩且較無趣，所以其實大概很清楚自己想走的是網頁後端，所以比較想了解現在學習的技術在不同的產業與職能中會如何被應用。</p>
<hr>
<h2 id="第二題：你報名-想報名全端Web-App-課程的動機是？"><a href="#第二題：你報名-想報名全端Web-App-課程的動機是？" class="headerlink" title="第二題：你報名/想報名全端Web App 課程的動機是？"></a>第二題：你報名/想報名全端Web App 課程的動機是？</h2><ol>
<li>初步認識寫程式、探索興趣</li>
<li>成為科技職涯人才(更好的PM、設計師、管理者或創業家)</li>
<li>轉職成為專業網路工程師</li>
<li>到海外工作和發展</li>
</ol>
<p>此題我的答案是 - <strong>成為科技職涯人才(更好的PM、設計師、管理者或創業家)<strong>，雖然前面有講到希望可以轉職成為後端網路工程師，但其實最最最終目標是希望有一天，我能夠靠著這項技能，成為一位創業家。因為本身其實很懶惰，常常遇到很多問題，</strong>希望能找到這些麻煩問題的快速解決路徑，或是不用一直重複的操作同樣的事情。</strong>所以未來或許當自己有一定工程師能力後，期望自己能在市場上尋找一個熱門問題，由自己先行開發相關程式透過提供解決這個問題的方式來創造價值。</p>
<hr>
<h2 id="第三題：下列何者最接近你理想中的職能"><a href="#第三題：下列何者最接近你理想中的職能" class="headerlink" title="第三題：下列何者最接近你理想中的職能?"></a>第三題：下列何者最接近你理想中的職能?</h2><ol>
<li>前端工程師</li>
<li>後端工程師</li>
<li>專案經理</li>
<li>網頁設計師</li>
</ol>
<p>此題我的答案是 - <strong>後端工程師。</strong>雖然題目只能選一個，但當前目標是後端工程師，未來希望自己能夠成為全端工程師，能夠自己獨力開發一個完整的產品，這也是未來作為獨立創業家的第一步。</p>
<hr>
<h2 id="第四題：承上題，你覺得你目前對這個職能有多了解"><a href="#第四題：承上題，你覺得你目前對這個職能有多了解" class="headerlink" title="第四題：承上題，你覺得你目前對這個職能有多了解?"></a>第四題：承上題，你覺得你目前對這個職能有多了解?</h2><ol>
<li>完全不清楚</li>
<li>大概知道需要具備那些技能，但也不是非常清楚</li>
<li>很清楚這個職能需要那些技能，目前正在精進中</li>
<li>知道這個職能需要的技能，在團隊中扮演的角色</li>
</ol>
<p>此題我的答案是 - <strong>大概知道需要具備那些技能，但也不是非常清楚。</strong>其實自己沒有太大的把握能夠清楚說出每一個職位實質上所需具備的技能，及工作內容，因為完全沒有經驗，尚在學習當中，所以覺得透過這次的相談室，一定也能夠有所收穫。</p>
<hr>
<h2 id="模擬專案"><a href="#模擬專案" class="headerlink" title="模擬專案"></a>模擬專案</h2><p>此次相談室以「模擬專案」流程方式來進行，模擬專案的目的主要是希望透過一個實境場景來帶入實際感，不是單純由分享者分享自己的工作在幹嘛，而是可以知道<strong>在一個產品團隊裡面要怎麼去解決問題</strong>，在不同的角色分工中會遇到的問題跟衝突，所以會分三個步驟：</p>
<img src="/2021/07/24/%E9%96%8B%E7%AE%B1%E6%95%B8%E4%BD%8D%E8%BB%9F%E9%AB%94%E5%9C%98%E9%9A%8A-%E6%A8%A1%E6%93%AC%E5%B0%88%E6%A1%88%E9%AB%94%E9%A9%97%E5%B8%B6%E4%BD%A0%E6%89%BE%E5%87%BA%E9%81%A9%E5%90%88%E7%9A%84%E8%81%B7%E8%83%BD-%E6%B5%81%E6%B0%B4%E5%B8%B3%E5%BF%83%E5%BE%97/1.jpg" class="" title="1.jpg">
<center>模擬專案流程 by ALPHA Camp</center>

<ul>
<li>Step 1 : 了解&amp;拆解任務 拆解任務、了解要解決的問題、還有產品特性、要解決的對象有哪些，一一分析出來後分工，整個團隊的配置該有哪些部分。</li>
<li>Step 2 : 選擇你的任務&amp;角色 任務分析後，依自己的專長來完成自己的任務</li>
<li>Step 3 : 團隊任務衝突 執行任務的時候，一定會有摩擦，在團隊中該如何解決衝突，讓任務順利完成。</li>
</ul>
<hr>
<p>模擬專案任務背景說明： 本次主要負責產品為方格子官網，為何設定在方格子？因為今天請到的分享者就是方格子的前端及全端工程師啦! <strong><u>Jiang</u> &amp; <u>Kuan</u></strong></p>
<h2 id="專案目標："><a href="#專案目標：" class="headerlink" title="專案目標："></a>專案目標：</h2><img src="/2021/07/24/%E9%96%8B%E7%AE%B1%E6%95%B8%E4%BD%8D%E8%BB%9F%E9%AB%94%E5%9C%98%E9%9A%8A-%E6%A8%A1%E6%93%AC%E5%B0%88%E6%A1%88%E9%AB%94%E9%A9%97%E5%B8%B6%E4%BD%A0%E6%89%BE%E5%87%BA%E9%81%A9%E5%90%88%E7%9A%84%E8%81%B7%E8%83%BD-%E6%B5%81%E6%B0%B4%E5%B8%B3%E5%BF%83%E5%BE%97/2.jpg" class="" title="2.jpg">
<center>專案目標 by ALPHA Camp</center>

<p>任務拆解分析：</p>
<ol>
<li>打造吸引人，且操作&amp;體驗順暢的介面呈現。 團隊配置所需－前端工程師</li>
<li>確保每次給使用者的資料，能夠正確且即時地呈現出來。 團隊配置所需－後端工程師</li>
<li>釐清專案需求，並清楚掌握與定義不同功能要達成的目的，確保成品符合需求。 團隊配置所需－專案經理(PM)</li>
</ol>
<hr>
<h2 id="前端工程師所需負責的工作："><a href="#前端工程師所需負責的工作：" class="headerlink" title="前端工程師所需負責的工作："></a>前端工程師所需負責的工作：</h2><p>1.確認資料呈現的形式<br>2.網頁切版<br>3.評估開發作業所需的時間與複雜度</p>
<h2 id="Jiang分享筆記重點："><a href="#Jiang分享筆記重點：" class="headerlink" title="Jiang分享筆記重點："></a>Jiang分享筆記重點：</h2><ul>
<li>實作設計師設計出來的分類業面(切版、動態評估)：  切版實作頁面上是滿主要的一個重點，透過實作把頁面做出設計時想要呈現的樣子。  實作頁面時有時候會忽略掉一個點，<strong>當要做一個頁面的時候，UI其實是交雜著需要被注入各種資料，可能名字很長數字很大，當中是有一些動態評估在裡面，這都是前端需要考量到的點。</strong></li>
<li>評估前端實作上的可行性：確認特定需求在畫面上能不能做出來：  有時候要去意識到的<strong>不是當前的需求一定要完成，而是要考量時間的磨合，以及當前公司的系統架構以及資料架構上是不是能夠符合需求，這也就會需要跟後端去做溝通跟評估。</strong>  當PM將一個產品設計畫面出來時，<strong>要去評估是不是合理的，能不能做到，資料要哪來，再往後無限擴展。</strong></li>
<li>評估開發規模的困難度以及時間： 可以思考哪些功能可以事先確認與動工（案例：那些頁面初步的頁面資訊可以先實作）  在實作這些功能時，去<strong>思考要用什麼樣最快的方式去製作出基本版本，之後再慢慢推進。</strong>而一些需求功能在還沒有真正被確定前，能夠以經驗來評估有哪些東西是可以先接出來的，有哪些資料是要再做處理的。  且公司在營運這個平台中工程師一定會去建立一些組件（意指網頁常用元件，如導覽列、下拉選單、警告訊息、按鈕…等等），用組件去簡化實作邏輯，然後很快地把該有的元件套進頁面，元件套進頁面的同時會去思考哪些後端資料是需要被帶入使用的，去加快頁面的完整性，而這些已完成或是能夠完成的事情可能就比較不需要再討論，所以可以減少一些在溝通過程中產生的摩擦力<strong>只要在前期準備的越完整，討論的問題就可以越進階，溝通上的摩擦就能夠減少。</strong></li>
<li>跟後端確認資料的串接格式，可行性 如果資料尚有疑慮，如何先出個相對可行的實作版本。  有時候這問題不是那麼重要，重要的問題是當拿到設計畫面時，能夠去思考到後端有沒有帶出這些資料功能，前端並不是只在乎說把頁面做出來就好，而是要去思考實作時，能夠去接觸的資料有哪些? 目前的資料結構長什麼樣子? 是不是適合帶入到現有的元件去載入? 如果不行的時候是不是有什麼建議可以提供給後端?<strong>工程師非常重要的一個環節是會不會去溝通，以及能不能看到設計稿時去思考後面的所有相關問題，這些會去影響到能不能夠把這些任務做出來很重要的環節。</strong></li>
</ul>
<h2 id="其他Q＆A"><a href="#其他Q＆A" class="headerlink" title="其他Ｑ＆Ａ"></a>其他Ｑ＆Ａ</h2><p><strong>1. 前端工程師需要做動畫呈現嗎？</strong></p>
<ul>
<li>動畫有很多種，有些是簡潔動畫，有些是互動上動畫，但這些其實都不是一定要擁有的技能，但有的話很好。動畫其實是by case 不是by project，這是當有需要才會去面臨到的問題，但我認為比較重要的是<strong>要怎麼把基本的畫面切出來，標後版，然後資料可以很乾淨的呈現在畫面上，這是最重要的。</strong>有些技能樹，像是要Opea GL、3D動畫那是其次，如果能掌握前面的技能，我相信這些進階的技能在學習上是滿快可以掌握的。動畫在工作上肯定會遇到，但以優先級來說沒有到那麼重點。</li>
</ul>
<p><strong>2. 前端工程師常常會需要跟設計師溝通，如果會這些設計軟體對前端工程師有沒有加分?</strong></p>
<ul>
<li>應該算有加分，以業界來說有很多接案公司都會希望前端工程師他們也有相對應的技能，去把UI上的原件實現到切版上面去，這是有可能的。 不過我認為這只能算是一個延伸功能，你會了很好，你可能可以去跟設計師討論某些事。  不過其實在我們前端的角度上，通常設計師他設計出來的會是figma, sketch, ????(44分32秒不清楚), 然後會讓我們去看，這個畫面上的這個組件他的規格是什麼? 長寬高, upshadow, position 這些東西反而是我們怎麼跟設計師溝通的方式。PS算是一個次級的一個附加價值，你在你自己技能樹上你有這個功能，未來你可能可以協助設計師。<strong>真正在前端來講，其實很專注在畫面上的資料呈現及動態掌握，你的畫面能不能完整乾淨然後順暢地呈現在使用者面前這是很重要的點。</strong></li>
</ul>
<p><strong>Ken補充:</strong><br>雖然在分享過程中有設定一個正確答案的概念，不過其實這個在更多時候，在不同家公司，不同的團隊會有不一樣的合作模式，這也是肯定的事情，不過比較常聽到的合作模式，前端工程師本身並不需要做太多複雜的視覺介面設計，更多時候是像Jiang強調的去了解資訊的呈現乾淨程度。</p>
<hr>
<h2 id="後端工程師所需負責的工作："><a href="#後端工程師所需負責的工作：" class="headerlink" title="後端工程師所需負責的工作："></a>後端工程師所需負責的工作：</h2><ol>
<li>定義資料串接的格式</li>
<li>確認資料庫是否能滿足本次需求</li>
<li>設計能滿足需求的演算法</li>
</ol>
<h2 id="Kuan分享筆記重點："><a href="#Kuan分享筆記重點：" class="headerlink" title="Kuan分享筆記重點："></a>Kuan分享筆記重點：</h2><p>這個list是今天從PM那接下一個任務後，可能會進行的一個工作流程，在團隊中做為一個後端工程師，在真正敲下鍵盤之前：</p>
<ul>
<li>評估開發複雜度 。<ul>
<li>API的改動幅度  一開始評估任務的複雜度有多高，是否需要修改API？</li>
<li>用比喻的方式來講，我需要修改的匯款單上的欄位就好，還是需要設計一個新的匯款單來符合任務的需。這是越工作越有經驗之後越能做出正確的評估。</li>
</ul>
</li>
</ul>
<ul>
<li>評估當前的資料(資料庫)是否能滿足新功能 。<ul>
<li>資料可能不太夠，或資料庫可能要做變動(增加欄位)  比較實際面的就是，<strong>資料庫需要增加幾個欄位</strong>，這是後端工程師考量的事情。</li>
</ul>
</li>
</ul>
<ul>
<li>評估效能變動的幅度 。<ul>
<li>新功能上線後，活應時間會不會變太久？若會，如何做架構調整</li>
<li>因為PM對後端不是那麼了解，有一些功能<strong>後端工程師必須要去思考，這個功能會不會影響到API回應的時間</strong>，可能進到頁面之後前端呈現都是正確的，但後端回應太慢沒有辦法即時回應資料，所以讀取的圈圈就是一直跑，是否會導致這種情況發生?如果會的話就要去做溝通，讓這功能可能只有80%的效果，可是他不會對我們的效能造成影響，或是去<strong>溝通功能要做修正，還是架構要做修正。</strong>新功能是否需要做機器調整，長期流量會不會變大，促銷活動可能有瞬間流量  像是搶演唱會的門票時會有一個高峰流量，提前知道瞬間流量會出來，<strong>是不是需要做一些事前的調整</strong>，這也是後端工程師工作時的眉角。</li>
</ul>
</li>
</ul>
<ul>
<li>設計能滿足需求的演算法 。<ul>
<li>需求是最新的十筆資料，就要正確呈現  假設一個新功能，PM說他想要”近10天”，”最新的十筆資料”，”不能有重複的作者”，後端就要想辦法把這一句話變成一個正確的資料，不能錯、不能重複、也不能超過時間，而且效能要好，這就帶到後端工程師最有價值的三個地方：<strong>資料的正確性，系統的穩定性(不能壞不能慢)，以及程式的彈性</strong>，寫程式時要注意程式不能寫得太死、寫的太隨便，若今天程式有比較大的彈性，未來PM要新增什麼樣的新功能，就需要害怕，只要簡單的修改後就可以滿足新的需求。<strong>正確、穩定、彈性的工程師就是一個優秀的工程師。</strong></li>
</ul>
</li>
</ul>
<ul>
<li>與前端共同定義資料的串接格式 。銀行的匯款單(誰?多少錢?那些欄位要大寫?)  此部分滿看公司文化，Kuan的經驗大多數是先由後端先做出一個初步的API，<strong>未來在實作過程再討論更進一步的修正。  未來網頁在實作的時候，不管前後工程師，都要盡量當個體貼的工程師，彼此討論修正出對雙方都更方便更彈性的資料，這是很重要的。</strong></li>
</ul>
<ul>
<li>評估是否需要更動/串接第三方服務 。例如：要串哪一間金流，是否有每月定時扣款功能可以符合訂閱功能  調查某一種功能，要串接哪一家的服務，而此間公司提供的功能的系統是否符合，且服務是比較好，價格是能夠接受的。</li>
</ul>
<ul>
<li>撰寫測試 指自動化測試，每一次系統部屬上去的時候，他都會跑一次自動化測試，有什麼好處?他真正的價值不是在，確定你剛剛寫的程式是正確的，而是在未來每一次的更動，你都可以確定你前面的寫的程式都是正確的，最害怕的就是寫a壞b，改b壞c，異種瀑布式的修改，這樣一整天工作的心情就會非常糟糕。</li>
</ul>
<p>以上是後端工程式要去評估及實作的一些流程。</p>
<p>而在上面提到的一些API資料庫，第三方服務，資料格式測試，這些在比較大的公司會有專業的分工，而較小的公司有可能會統一歸納交給後端工程師，所以可能會跟未來的職掌不太一樣，但也不需要太害怕為什麼需要學這麼多東西，<strong>真正重要的是學習這些東西的過程中順便排養出一種解決問題的能力，未來遇到一個新的stack下來，可能沒有處理過，但卻可以用過去的經驗來評估要如何學習這個新東西以及攻克它。</strong></p>
<hr>
<h2 id="PM所需負責的工作："><a href="#PM所需負責的工作：" class="headerlink" title="PM所需負責的工作："></a>PM所需負責的工作：</h2><ol>
<li>需求確認、盤點</li>
<li>規劃開發時程</li>
<li>確認資源(人力、時間、$$)</li>
</ol>
<p>Yenting補充分享： 其實很多人會認為PM有技術能的時候可以加分，但這個<strong>加分不是在人力不足的時候，自己跳下去開發，而是加分在你知道整件事情的一些原理跟脈絡，所以可以做出一些比較好的人力資源分配或式時間管理。</strong>其實這個道理在其他地方也是一樣的，例如前面提到的前端工程師是否要做畫面設計，也許許多前端工程師他是有這個能力，但當你的團隊裡面其實有一個人很明確的分工，他就是網頁設計師，這就是他的工作的時候，那你就不應該跟他去搶工作，那不然你這樣子就會造成重工其實也很難管理，所以同理得證，有時候及時你是個 full stack ，你今天這個任務分配到後端那你也會前端的時候你要不要跳下去做? 如果沒有被分到的話你就不應該做這件事情，所以這個道理其實是apply在很多不同的角色上面，所以希望大家可以知道，因為<strong>當你是一個團隊作戰的時候，你要專注在deliver你自己應該要做什麼事情的時候，這其實才是最應該要先完成的事情，而不是你今天會很多技能，所以你就要做很多事情，團隊運作不應該是這樣子。</strong></p>
<h2 id="PM執掌清單："><a href="#PM執掌清單：" class="headerlink" title="PM執掌清單："></a>PM執掌清單：</h2><ul>
<li>確認並清楚定義專案需求</li>
<li>預估中案所需的資源，包含人力、時間、預算</li>
<li>規劃開發時程</li>
<li>提供初步對專案成果的發想(User Story、Wireframe)</li>
<li>測試：檢查工程部開發出來的功能是否有滿足需求(使用者的角度測試，非後端工程測試)</li>
<li>擔任產品的內部代言人-&gt;用比較宏觀的角度去看產品，評估哪些功能最有價值優先開發 。知道產品現有的問題 。產品在使用者端的問題 。產品的內部邏輯</li>
</ul>
<h2 id="如何跟工程師配合做一個好的PM："><a href="#如何跟工程師配合做一個好的PM：" class="headerlink" title="如何跟工程師配合做一個好的PM："></a>如何跟工程師配合做一個好的PM：</h2><h3 id="筆記Jiang分享"><a href="#筆記Jiang分享" class="headerlink" title="筆記Jiang分享 :"></a>筆記Jiang分享 :</h3><p><strong>PM要能夠掌握整個開發的節奏，要讓工程師明確的知道當前的任務要做什麼，目標在哪，什麼時候要完成，有問題的時候可以討論</strong>，PM的彈性跟能不能掌握這個專案的進度是很重要的</p>
<h3 id="筆記Kuan分享"><a href="#筆記Kuan分享" class="headerlink" title="筆記Kuan分享:"></a>筆記Kuan分享:</h3><p><strong>讓工程師專心做該做的事</strong>，工程師會做一個時間的評估，好的PM不應該一直去壓時程，當然PM有他的壓力，但<strong>一個好的PM可以把所有的需求梳理成一個很順暢的時間線，分配各個工程師至擅長的位置</strong>，工程師最討厭覺得最煩躁的是，我做A做到一半被叫去做B，前面的東西做一半就卡到，或是這個需求沒有先確認完，然後做到一半就做修改。 </p>
<hr>
<h2 id="團隊衝突情境1：設計師想要放Fixed-title，前端工程師評估實作會太複雜。你會怎麼做"><a href="#團隊衝突情境1：設計師想要放Fixed-title，前端工程師評估實作會太複雜。你會怎麼做" class="headerlink" title="團隊衝突情境1：設計師想要放Fixed title，前端工程師評估實作會太複雜。你會怎麼做?"></a>團隊衝突情境1：設計師想要放Fixed title，前端工程師評估實作會太複雜。你會怎麼做?</h2><ol>
<li>先這樣先這樣，總之需求開了，先做再說，先交付任務在討論。</li>
<li>這什麼??覺得需求不合理，先跳過不做，完成其他需求。</li>
<li>Hmm 我想想，覺得需求不合理，先找設計師討論</li>
</ol>
<h3 id="Jiang分享重點筆記："><a href="#Jiang分享重點筆記：" class="headerlink" title="Jiang分享重點筆記："></a>Jiang分享重點筆記：</h3><p>工程師在業界建立起自己能力所及到哪邊，要非常清楚的技術展示在哪個環節，要有辦法去掌握這個東西。</p>
<p>當需求進來時，要先思考這個需求會觸及到哪些專案當中程式碼的組件，切版，程式邏輯，可以用畫圓的方式表現，當畫出來後大概就知道這個需求觸及的範圍有多廣，若和原定的距離想差甚遠，就必須去思考怎麼跟設計師溝通，讓設計師了解到當前的問題(例如：實作畫面時有時是使用已經既有的組件，若要去加相關新功能，可能會有排斥現象、邏輯不符、或是有很多副作用跑出來)，與設計師溝通取一個中間值需求，但同時要記得設計師最終想要的目標是什麼，未來有餘裕的時候思考這功能有沒有辦法做到，那需要花多久時間去實踐。<strong>除了自己知道要做什麼之外，也要知道別人最終想要什麼，記錄下來未來有機會在慢慢發掘，最後在反饋給自己的團隊，這會是一個正向循環。</strong></p>
<h2 id="團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。"><a href="#團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。" class="headerlink" title="團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。"></a>團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。</h2><ol>
<li>最新&amp;近期熱門都是很常見的分類，即使有重複，還是把需求做出來比較好，畢竟交付的時間也很緊急。</li>
<li>評估後覺得做出來的觀看體驗可能不好，想先找PM討論替代方案。</li>
<li>先做其他功能/想辦法找資源做出來</li>
</ol>
<h3 id="Kuan分享重點筆記："><a href="#Kuan分享重點筆記：" class="headerlink" title="Kuan分享重點筆記："></a>Kuan分享重點筆記：</h3><p>在<strong>評估後覺得做出來的觀看體驗可能不好，想先找PM討論替代方案前會有一個前提</strong>，你必須是能夠”觀察出”做出來後的觀看體驗不佳，如果今天是一個按圖施工的後端工程師，可能就不會考慮到這件事，但我相信一個好的工程師，不應該只是按圖施工，而是在實作功能的時候去，去考慮到當初為什麼要做這個功能，要時時刻刻放在心裡，實作這個功能之後有沒有達到使用者，幫助他們找到他們想要看的文章，如果兩個TAB都是一樣的文章，那就是沒有任何意義。</p>
<p>PM是否一定要了解完全實作的細節，其實是工程師對PM的溝通，<strong>工程師要具備一個將技術白話文的能力</strong>，必須讓PM知道現階段做不到，為什麼? 因為需要新的東西或是新的服務，或是現階段資料沒辦法達成，讓PM去理解，那PM就可以把你這個擔憂回報給其他的部門，然後去做不同的處置，那這段期間就可以先做這樣等等。</p>
<p>若是選擇<strong>最新&amp;近期熱門都是很常見的分類，即使有重複，還是把需求做出來比較好，畢竟交付的時間也很緊急</strong>。通常代表現在時程很趕，並且影響不是那麼大，可以將優化的過程放在心裡，在未來時間餘裕的時候將他拿出來做。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本次相談室讓我對前後端工程師以及PM有了更深入的了解，這次的相談室不僅僅只是對某一個職業的敘述跟經驗分享，更是具體的將職場上的情況帶入到你的面前，讓自己可以從更宏觀的角度去理解自己是否適合這個職能/產業/公司。<br>職場上的情況從解析需求問題開始，到團隊分工合作，最後到團隊的衝突如何解決，這當中帶給聽者各種不同角度去思考到的問題，很重要的一點是，<strong>團隊分工合作當中，溝通非常的重要，除了自己的職掌外也同時要去了解隊友的狀況，並互相溝通取得平衡，讓彼此能夠互相理解問題的重點，並找到共同解決問題的方式。</strong></p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>工作相談室</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
        <tag>工作相談室</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Node.js及安裝</title>
    <url>/2021/09/10/%E9%97%9C%E6%96%BCNode-js/</url>
    <content><![CDATA[<center><img src="/2021/09/10/%E9%97%9C%E6%96%BCNode-js/1.jpg" class="" title="1.jpg"></center>

<h1 id="Node-js簡介"><a href="#Node-js簡介" class="headerlink" title="Node.js簡介"></a>Node.js簡介</h1><p>　　Node.js是一個JavaScript的執行環境(run-time environment)，以往 JavaScript 只可以在瀏覽器上被執行，但在2009年Node.js被<u><strong>Ryan Dahl</strong></u>開發出來後，當我們在電腦上安裝了 Node.js 就可以在電腦上直接執行副檔名為 .js 的 JavaScript 的檔案。</p>
<span id="more"></span>
<p>　　有了 Node.js，JavaScript 就成為其他的程式語言一樣 (例如：PHP、Python、Ruby、Java) ，擁有能夠開發網路應用程式的能力。有了 Node.js，JavaScript 就可以直接建立、讀取、修改和刪除電腦內的檔案，還可以執行和資料庫連線。 Node.js 也添加了網路應用程式需要的功能，例如作為伺服器處理客戶端發出請求 (request) 並給予回應 (response) 等。</p>
<p>　　<strong>Ryan Dahl</strong>的設計靈感源自Flickr的一款上傳進度欄，在上傳過程中，瀏覽器並不清楚有多少檔案已經傳送到伺服器，除非向伺服器進行查詢，導致瀏覽器不止是要上傳照片，還要詢問伺服器上傳到多少，導致整個變得很慢，所以<strong>Ryan Dahl</strong>想出了一個更簡便的方法，他開始嘗試利用 JavaScript 的特性，使用了當時性能卓越的 Google Chrome JavaScript 引擎 V8 ，打造了 Node.js。</p>
<p>　　Node.js非常擅長<strong>DIRT</strong>(data-intensive real-time) 直接翻譯是「數據密集以及實時」的應用，像是影音串流平台、聊天交友軟體、叫車平台都是需要實時處理大量數據的應用程式。很多知名的網站或是網路應用程式，後台都有使用到Javascript，例如：Paypal,Netflix,Uber。</p>
<h1 id="Node-js安裝"><a href="#Node-js安裝" class="headerlink" title="Node.js安裝"></a>Node.js安裝</h1><p>　　安裝 Node.js 可以直接從 Node.js 的官方網站 <a href="https://nodejs.org/">https://nodejs.org</a> 下載安裝，可是因為實務開發上常常碰到不同專案會使用到不同版本 Node.js ，所以實務上比較常使用的是 Node Version Manager (nvm)，因為他可以簡易的切換Node.js的版本，就省得自己手動刪除再重新安裝，然後無窮無盡的做這件事情。</p>
<p>　　搜尋Nvm(Node Version Manager)，會在Github上出現兩種版本，一種是給MacOS使用，一種是給Windows使用。</p>
<ol>
<li>安裝nvm-windows</li>
</ol>
<p>　　因為我是Windows系統，所以到 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a> 的github下載</p>
<img src="/2021/09/10/%E9%97%9C%E6%96%BCNode-js/2.jpg" class="">

<p>　　下載完成後執行安裝程序，一直下一步到安裝完成就好了，但如果要更改安裝路徑，路徑的資料夾名稱不能有空白，不然會有問題。</p>
<p>　　安裝完後打開終端機 (Git Bash)。如果原本終端機已經打開，記得要重開。打開後輸入指令來確定安裝成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nvm version</span><br></pre></td></tr></table></figure>

<img src="/2021/09/10/%E9%97%9C%E6%96%BCNode-js/3.jpg" class="">

<ol start="2">
<li>用nvm安裝Node.js</li>
</ol>
<p>可以先在指令欄內輸入 nvm list available 來查看可以安裝的 Node.js的版本</p>
<img src="/2021/09/10/%E9%97%9C%E6%96%BCNode-js/4.jpg" class="">

<p>建議安裝有寫 <b>LTS (Long Term Support)</b> 的版本，意思是官方會持續維護這個版本比較長一段時間，會比較穩定。</p>
<p>接著輸入 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 14.17.6</span><br></pre></td></tr></table></figure>
<p>就會安裝如圖最新的LTS版本了，安裝完基本上他會自動執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 17.17.6</span><br></pre></td></tr></table></figure>
<p>來使用這個版本的Node.js，若未來要切換版本，同樣也可以輸入這個指令</p>
<p>若要查看當前使用的版本可以輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<img src="/2021/09/10/%E9%97%9C%E6%96%BCNode-js/5.jpg" class="">

<ol start="3">
<li>在終端機上執行操作JavaScript</li>
</ol>
<p>安裝完Node.js後，就可以輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node</span><br></pre></td></tr></table></figure>
<p>進入node模式<br>接著就能輸入JavaScript的指令了</p>
<img src="/2021/09/10/%E9%97%9C%E6%96%BCNode-js/6.jpg" class="">

<p>按ctrl+c，兩次即可退出node模式<br>另外在終端機複製的指令是 ctrl + insert 貼上是 shift + insert<br>(insert就是方向鍵上面，最左上那一顆)</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Bash基本指令操作</title>
    <url>/2021/09/10/GitBash%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Git-Bash基本操作"><a href="#Git-Bash基本操作" class="headerlink" title="Git Bash基本操作"></a>Git Bash基本操作</h1><h2 id="當前資料夾新建一個資料夾"><a href="#當前資料夾新建一個資料夾" class="headerlink" title="當前資料夾新建一個資料夾"></a>當前資料夾新建一個資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir [資料夾名稱]</span><br></pre></td></tr></table></figure>

<h2 id="當前資料夾建立一個檔案"><a href="#當前資料夾建立一個檔案" class="headerlink" title="當前資料夾建立一個檔案"></a>當前資料夾建立一個檔案</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch [檔案名稱.副檔名]</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="顯示當前資料夾檔案-list"><a href="#顯示當前資料夾檔案-list" class="headerlink" title="顯示當前資料夾檔案 (list)"></a>顯示當前資料夾檔案 (list)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure>

<h2 id="顯示目前資料夾路徑-print-working-directory"><a href="#顯示目前資料夾路徑-print-working-directory" class="headerlink" title="顯示目前資料夾路徑 (print working directory)"></a>顯示目前資料夾路徑 (print working directory)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pwd </span><br></pre></td></tr></table></figure>

<h2 id="移動到資料夾-change-directory"><a href="#移動到資料夾-change-directory" class="headerlink" title="移動到資料夾 (change directory)"></a>移動到資料夾 (change directory)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd [資料夾名稱]</span><br></pre></td></tr></table></figure>

<h2 id="回到上一層資料夾"><a href="#回到上一層資料夾" class="headerlink" title="回到上一層資料夾"></a>回到上一層資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ..</span><br></pre></td></tr></table></figure>

<h2 id="用檔案總管開啟當前資料夾"><a href="#用檔案總管開啟當前資料夾" class="headerlink" title="用檔案總管開啟當前資料夾"></a>用檔案總管開啟當前資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ start .</span><br></pre></td></tr></table></figure>

<h2 id="用檔案總管開啟父層資料夾"><a href="#用檔案總管開啟父層資料夾" class="headerlink" title="用檔案總管開啟父層資料夾"></a>用檔案總管開啟父層資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ start ..</span><br></pre></td></tr></table></figure>

<h2 id="刪除檔案"><a href="#刪除檔案" class="headerlink" title="刪除檔案"></a>刪除檔案</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm [檔案名稱.副檔名]</span><br></pre></td></tr></table></figure>

<h2 id="刪除資料夾-r-recusive-是递归的意思"><a href="#刪除資料夾-r-recusive-是递归的意思" class="headerlink" title="刪除資料夾 (-r recusive 是递归的意思)"></a>刪除資料夾 (-r recusive 是递归的意思)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -r [資料夾名稱]</span><br></pre></td></tr></table></figure>

<h2 id="删除一个文件夹，-r-recursive-是遞迴的意思-，-先刪除資料夾裡內容再刪除資料夾"><a href="#删除一个文件夹，-r-recursive-是遞迴的意思-，-先刪除資料夾裡內容再刪除資料夾" class="headerlink" title="删除一个文件夹， r (recursive 是遞迴的意思)， 先刪除資料夾裡內容再刪除資料夾"></a>删除一个文件夹， r (recursive 是遞迴的意思)， 先刪除資料夾裡內容再刪除資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -r</span><br></pre></td></tr></table></figure>

<h2 id="用編輯器開啟當前資料夾"><a href="#用編輯器開啟當前資料夾" class="headerlink" title="用編輯器開啟當前資料夾"></a>用編輯器開啟當前資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ code .</span><br></pre></td></tr></table></figure>

<h2 id="用編輯器開啟父層資料夾"><a href="#用編輯器開啟父層資料夾" class="headerlink" title="用編輯器開啟父層資料夾"></a>用編輯器開啟父層資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ code ..</span><br></pre></td></tr></table></figure>

<h2 id="清空畫面所有訊息-快捷鍵ctrl-l"><a href="#清空畫面所有訊息-快捷鍵ctrl-l" class="headerlink" title="清空畫面所有訊息 (快捷鍵ctrl + l)"></a>清空畫面所有訊息 (快捷鍵ctrl + l)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ reset</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Git Bash</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Git Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>建立一個Node.js本機伺服器</title>
    <url>/2021/09/10/%E5%BB%BA%E7%AB%8BNode-js%E6%9C%AC%E6%A9%9F%E4%BC%BA%E6%9C%8D%E5%99%A8/</url>
    <content><![CDATA[<p>開一個測試資料夾先，在裡面建立一個app.js的檔案，並用編輯器開啟</p>
<img src="/2021/09/10/%E5%BB%BA%E7%AB%8BNode-js%E6%9C%AC%E6%A9%9F%E4%BC%BA%E6%9C%8D%E5%99%A8/1.jpg" class="">
<span id="more"></span>
<h1 id="定義基本設定"><a href="#定義基本設定" class="headerlink" title="定義基本設定"></a>定義基本設定</h1><p>接著在app.js裡寫入以下程式碼</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> hostName = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br></pre></td></tr></table></figure>
<p>轉譯為：<br>先載入Node.js的 http 模組塊<br>並定義主機名稱，因為是在自己的電腦上所以通常慣例我們都叫localhost<br>再來定義連接埠號 port = 3000</p>
<p>接著要使用http模塊的createServer方式來建立伺服器，然後透過參數server來表達，<br>createServer需要有一個函數，他有兩個參數request(請求)跟response(回應)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="定義伺服器回應-HTTP-response"><a href="#定義伺服器回應-HTTP-response" class="headerlink" title="定義伺服器回應 HTTP response"></a>定義伺服器回應 HTTP response</h1><h2 id="觀念說明"><a href="#觀念說明" class="headerlink" title="觀念說明"></a>觀念說明</h2><p>大部分跟http伺服器有關的都會有兩個參數，request(請求)跟response(回應)，<br>因為伺服器總得接收到request,然後才會給出response，不然無法進行，<br><strong>req是由瀏覽器</strong><br><strong>req是由瀏覽器</strong><br><strong>req是由瀏覽器</strong>向<strong>伺服器</strong>發出的<strong>請求</strong></p>
<p><strong>res則是經由我們設定回覆</strong>給<strong>瀏覽器</strong>的東西<br><strong>res則是經由我們設定回覆</strong>給<strong>瀏覽器</strong>的東西<br><strong>res則是經由我們設定回覆</strong>給<strong>瀏覽器</strong>的東西</p>
<p>伺服器在回應時，通常會定義以下幾個資訊</p>
<ol>
<li>回應的 HTTP 狀態碼 (status code)</li>
<li>設定回應的內容類型 Response Headers &gt; Content-Type</li>
<li>把回應的內容傳送回去給瀏覽器 Response body &gt; <code>&lt;html&gt;...&lt;/html&gt;</code></li>
</ol>
<hr>
<p><strong>插播</strong><br>HTTP 是 (HyperText Transfer Protocol 的縮寫)<br>HTTP 傳輸通訊協定就是<strong>電腦之間互相索取文件的溝通語言</strong><br>當瀏覽器發出請求通常會定義幾個資訊，Method、URL、Header、Message Body</p>
<hr>
<p>回正題，伺服器端回應HTTP response，通常會定義以下幾個資訊</p>
<ol>
<li>Status code(狀態碼)<br>可以想像成客戶端與伺服器端之間的招呼語，重要的是開頭第一個數字：</li>
</ol>
<ul>
<li>2XX：成功回應，例如 200</li>
<li>3XX：重新轉向，例如 301 (永久轉向)、302 (暫時轉向)</li>
<li>4XX：客户端錯誤回應，例如 404 Not Found (找不到資源)</li>
<li>5XX：伺服器的問題，例如 500 Internal Server Error</li>
</ul>
<p>我們先設定成功代碼</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>設定回應的內容<strong>類型</strong>，Response Headers &gt; Content-Type<br>一般都是用用瀏覽器看網頁，所以大部分內容類型是 HTML 文件 (text/html) 。<br>但有些時候伺服器回傳的可能是純文字 (text/plain) 、PDF 檔 (application/pdf) 、影片檔 (video/mpeg4) 、或者是經常用來傳送資料的 JSON 檔 (application/json) …。</li>
</ol>
<p>在來設定回應的內容類型，先以純文字來作回應</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>設定要回應給瀏覽器的<strong>內容</strong><br>因為已經定義為純文字內容，所以先以純文字做回應，可以用**res.end()**來做回應</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;Hi! This is my first Node.js server!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="啟動伺服器"><a href="#啟動伺服器" class="headerlink" title="啟動伺服器"></a>啟動伺服器</h1><p>最後我們要啟動伺服器，要求他<strong>監聽</strong>瀏覽器傳來的<strong>request(請求)</strong><br>在node.js中我們可以使用在伺服器上使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server.lisetn(port,serverName,<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>這個方法啟動伺服器需要port參數，serverName,和一個匿名函式</p>
<p>最後把一開始定義好的參數帶進去，並在匿名函式內可以console.log一段顯示訊息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;Hi! This is my first Node.js server!&#x27;</span>) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, hostName, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running on http://<span class="subst">$&#123;hostName&#125;</span>:3000!`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接著回到在終端機上執行這個app.js<br>並且會得到伺服器啟動的訊息</p>
<img src="/2021/09/10/%E5%BB%BA%E7%AB%8BNode-js%E6%9C%AC%E6%A9%9F%E4%BC%BA%E6%9C%8D%E5%99%A8/2.jpg" class="">

<p>然後用瀏覽器開啟拜訪 <a href="http://localhost:3000/">http://localhost:3000</a> 就可以成功拜訪剛剛建立的伺服器。</p>


<p>也就是你透過<strong>瀏覽器</strong> &gt; <strong>向你的電腦架設出來的伺服器發出請求</strong> &gt; <strong>你的電腦回覆給瀏覽器</strong> 這樣一連串的動作。</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-CSS相關</title>
    <url>/2021/06/09/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-CSS%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="利用toggle來新增或移除元素標籤的class名稱"><a href="#利用toggle來新增或移除元素標籤的class名稱" class="headerlink" title="利用toggle來新增或移除元素標籤的class名稱"></a>利用toggle來新增或移除元素標籤的class名稱</h1><h2 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h2><p>範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">element.classList.toggle(&#x27;sample&#x27;) </span><br></pre></td></tr></table></figure>

<p>element ：某元素，使用document.querySelecrot選出<br>.classList ：某元素的class屬性<br>.toggle(‘.sample’) ：</p>
<p>如果class屬性裡面沒有sample則加上sample，<br>如果class屬性裡面有sample則刪除sample，</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>toggle</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript語法使用-DOM相關</title>
    <url>/2021/06/06/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-DOM%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="JS選擇元素節點方法"><a href="#JS選擇元素節點方法" class="headerlink" title="JS選擇元素節點方法"></a>JS選擇元素節點方法</h1><h2 id="使用基本指令選擇document-querySelector來選擇"><a href="#使用基本指令選擇document-querySelector來選擇" class="headerlink" title="使用基本指令選擇document.querySelector來選擇"></a>使用基本指令選擇document.querySelector來選擇</h2><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span> father </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-sister&quot;</span>&gt;</span> my-sister<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;me&quot;</span>&gt;</span> me </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span>son1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span>son2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son3&quot;</span>&gt;</span>son3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-brother&quot;</span>&gt;</span> my-brother<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>選出class標籤為me的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.me&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="parentElement"><a href="#parentElement" class="headerlink" title="parentElement"></a>parentElement</h2><p>選擇me的父元素和選擇me的父元素的父元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.parentElement   <span class="comment">// 會選擇到&lt;div class=&quot;&quot;father&gt;...&lt;/div&gt;</span></span><br><span class="line">me.parentElement.parentElement   <span class="comment">// 會選擇到&lt;body&gt;...&lt;/body&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="children-i"><a href="#children-i" class="headerlink" title="children[i]"></a>children[i]</h2><p>選擇me的第一個子元素和選擇me的第二個子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.children[<span class="number">0</span>]   <span class="comment">// 會選擇到&lt;div class=&quot;son1&quot;&gt;son1&lt;/div&gt;</span></span><br><span class="line">me.children[<span class="number">1</span>]   <span class="comment">// 會選擇到&lt;div class=&quot;son2&quot;&gt;son2&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="nextElementSibling"><a href="#nextElementSibling" class="headerlink" title="nextElementSibling"></a>nextElementSibling</h2><p>選擇me的下一個同層級元素，和選擇me的上一個同層級元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.nextElementSibling   <span class="comment">//  會選擇到&lt;div class=&quot;my-brother&quot;&gt; my-brother&lt;/div&gt; </span></span><br><span class="line">me.nextElementSibling   <span class="comment">//  會選擇到&lt;div class=&quot;my-sister&quot;&gt; my-sister  &lt;/div&gt; </span></span><br></pre></td></tr></table></figure>

<h2 id="firstElementChild-lastElementChild"><a href="#firstElementChild-lastElementChild" class="headerlink" title="firstElementChild, lastElementChild"></a>firstElementChild, lastElementChild</h2><p>選擇me的第一個子元素，選擇me的最後一個子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.firstElementChild   <span class="comment">// 會選擇到&lt;div class=&quot;son1&quot;&gt;son1&lt;/div&gt;</span></span><br><span class="line">me.lastElementChild   <span class="comment">// 會選擇到&lt;div class=&quot;son3&quot;&gt;son3&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h1><p>Node.appendChild(sample)<br>是將一個節點加到指定的父節點下面所有子節點的最後面。<br>如果sample這個節點已經存在document樹當中，那 appendChild(sample) 會將原本sample這個節點位置移動到node這個新的位置（不需要事先移除要移動的節點）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TodoList Delete and check</span></span><br><span class="line">list.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.target;</span><br><span class="line">  <span class="keyword">const</span> parentElement = target.parentElement</span><br><span class="line">  <span class="comment">//按下垃圾桶，將項目刪除</span></span><br><span class="line">  <span class="keyword">if</span> (target.classList.contains(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">    parentElement.remove();</span><br><span class="line">    <span class="comment">//Todo中項目按下名字，將項目移置done中</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.tagName === <span class="string">&quot;LABEL&quot;</span>) &#123;</span><br><span class="line">    doneList.appendChild(parentElement) <span class="comment">//會移到doneList中，並且刪除原本自己位置的標籤</span></span><br><span class="line">    target.classList.toggle(<span class="string">&quot;checked&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// DoneList Delete and back</span></span><br><span class="line">doneList.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.target;</span><br><span class="line">  <span class="keyword">const</span> parentElement = target.parentElement</span><br><span class="line">  <span class="comment">//按下垃圾桶，將項目刪除</span></span><br><span class="line">  <span class="keyword">if</span> (target.classList.contains(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">    parentElement.remove();</span><br><span class="line">    <span class="comment">//Done中項目按下名字，將項目移置Todo中</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.tagName === <span class="string">&quot;LABEL&quot;</span>) &#123;</span><br><span class="line">    list.appendChild(parentElement) <span class="comment">//會返回移到List中，並且刪除原本自己位置的標籤</span></span><br><span class="line">    target.classList.toggle(<span class="string">&quot;checked&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="利用matches或classList-contains來比對目標對象"><a href="#利用matches或classList-contains來比對目標對象" class="headerlink" title="利用matches或classList.contains來比對目標對象"></a>利用matches或classList.contains來比對目標對象</h1><h2 id="matches"><a href="#matches" class="headerlink" title=".matches"></a>.matches</h2><p>target.matches(‘.class’或’#id’) 轉譯：目標對象元素是否含有.class或#id，回傳true或fals</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除函式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeTodo</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (target.matches(<span class="string">&quot;.delete&quot;</span>)) &#123;</span><br><span class="line">    target.parentElement.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="classList-contains"><a href="#classList-contains" class="headerlink" title=".classList.contains"></a>.classList.contains</h2><p>或是也可以用<br>target.classList.contains(‘string’) 轉譯：目標對象元素class屬性裡是否含有’string’值，回傳true或fals</p>
<hr>
<h2 id="關於dataset"><a href="#關於dataset" class="headerlink" title="關於dataset"></a>關於dataset</h2><p>可以在元素標籤上設定data資料，在使用JS去取得點擊目標元素上的dataset資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1234567890&quot;</span> <span class="attr">data-user</span>=<span class="string">&quot;ac-genie&quot;</span> <span class="attr">data-date-of-birth</span>&gt;</span>AC Genie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後我們可以呼叫 dataset. 來取得這些屬性的值，你會發現這些值的型態都是字串*：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#user&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.user)</span><br><span class="line"><span class="comment">//ac-genie</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.id)</span><br><span class="line"><span class="comment">//1234567890</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.dateOfBirth)</span><br><span class="line"><span class="comment">//(空字串)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>matches</tag>
        <tag>querySelector</tag>
        <tag>parentElement</tag>
        <tag>DOM</tag>
        <tag>children</tag>
        <tag>nextElementSibling</tag>
        <tag>firstElementChild</tag>
        <tag>lastElementChild</tag>
        <tag>appendChild</tag>
        <tag>contains</tag>
        <tag>dataset</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript語法使用-Function相關</title>
    <url>/2021/06/09/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-Function%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<h2 id="關於-function"><a href="#關於-function" class="headerlink" title="關於 function"></a>關於 function</h2><p>這篇由W3HEXSCHOOL發布的有關function的特性的講解可以參考<br><a href="https://w3c.hexschool.com/blog/cb6e361">連結在這</a></p>
<span id="more"></span>
<p>MDN 的簡短說明</p>
<blockquote class="pullquote"><p>Function 建構函式可建立一個新的 Function 物件。在 JavaScript 中，所有的函式實際上都是 Function 物件。</p>
</blockquote>

<p>Kuro 大大在先前 IT 鐵人賽 - <a href="https://ithelp.ithome.com.tw/articles/10191549">Day 10 函式 Functions 的基本概念 中也有提到</a></p>
<blockquote class="pullquote"><p>在前面介紹變數型別的時候曾經說過，除了基本型別以外的都是物件。<br>當我們透過 typeof 去檢查一個「函式 (function) 」的時候，雖然你會得到 “function” 的結果，<br>讓你以為 function 也是 JavaScript 定義的一種型別，但實際上它仍屬於 Object 的一種。<br>你可以把它想像成是一種可以被呼叫 (be invoked) 的特殊物件 (值)。</p>
</blockquote>

<h2 id="IIFE-立即執行函式"><a href="#IIFE-立即執行函式" class="headerlink" title="IIFE (立即執行函式)"></a>IIFE (立即執行函式)</h2><p>接下來談談 IIFE 全名為 Immediately Invoked Function Expression，意思就是定義完這個函式後馬上就執行的意思，此外它又可以稱之為 Self-Executing Anonymous Function，中文意思是自我執行匿名函式，而 IIFE 的好處是可以避免汙染到全域(global)。</p>
<p>IIFE 的話則是可以改用箭頭函式撰寫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>箭頭函式的使用注意</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filteredMovies = []</span><br><span class="line">filteredMovies = movies.filter( <span class="function"><span class="params">movie</span> =&gt;</span> movie.title.toLowerCase().includes(keyword)) <span class="comment">// OK，前面參數沒帶小括號可以，後面沒帶花括號也可以</span></span><br><span class="line">filteredMovies = movies.filter( <span class="function">(<span class="params">movie</span>) =&gt;</span> movie.title.toLowerCase().includes(keyword)) <span class="comment">// OK，前面參數沒帶小括號可以，後面沒帶花括號也可以</span></span><br><span class="line">filteredMovies = movies.filter( <span class="function"><span class="params">movie</span> =&gt;</span> &#123; <span class="keyword">return</span> movie.title.toLowerCase().includes(keyword)&#125;) <span class="comment">// OK，前面參數帶小括號可以，後面沒帶花括號要加上return</span></span><br><span class="line">filteredMovies = movies.filter( <span class="function">(<span class="params">movie</span>) =&gt;</span> &#123; <span class="keyword">return</span> movie.title.toLowerCase().includes(keyword)&#125;) <span class="comment">// OK，前面參數沒帶小括號可以，後面沒帶花括號要加上return</span></span><br><span class="line"><span class="comment">// 結論，有花括要帶上return</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>function</tag>
        <tag>IIFE</tag>
        <tag>函式</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-Array相關</title>
    <url>/2021/06/09/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-Array%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="陣列操作方式"><a href="#陣列操作方式" class="headerlink" title="陣列操作方式"></a>陣列操作方式</h1><h2 id="map"><a href="#map" class="headerlink" title=".map"></a>.map</h2><p>.map 會把原本的物件，會依造函式內容將每一個物件做操作後重新創造出一個新物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass a function to map</span></span><br><span class="line"><span class="keyword">const</span> map1 = array1.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map1);</span><br><span class="line"><span class="comment">// expected output: Array [2, 8, 18, 32]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title=".filter"></a>.filter</h2><p>.filter(設定條件函示) 是把一個陣列物件裡面符合條件的選出來，不符合的剃除，然後產生一個新的陣列物件，不影響原本陣列物件</p>
<h2 id="find"><a href="#find" class="headerlink" title=".find"></a>.find</h2><p>.find(設定條件函示) 是把一個陣列物件裡面，第一個符合條件的物件選出來，就停止了</p>
<h2 id="some"><a href="#some" class="headerlink" title=".some"></a>.some</h2><p>.some(設定條件函示) 是把一個陣列物件裡面，查找是否有相符的，並不回傳整筆符合資料，只回傳true或false，布林值</p>
<h2 id="findIndex"><a href="#findIndex" class="headerlink" title=".findIndex"></a>.findIndex</h2><p>.findIndex(設定條件函示) 回傳項目Index，找不到則回傳-1)</p>
<h2 id="every"><a href="#every" class="headerlink" title=".every"></a>.every</h2><p>.every(設定條件含是) 是對所有的物件做條件比對，最後統一回傳一個true or false，簡而言之不是零分，就是一百分。</p>
<hr>
<h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><p>當用<strong>常數</strong>宣告了一個陣列容器的時候，若要加入物件或其他東西要使用Array.prototype.push()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(INDEX_URL)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    movies.push(...response.data.results)</span><br><span class="line">    renderMovieList(movies)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h2><p>join() 方法會將陣列（或一個類陣列（array-like）物件）中所有的元素連接、合併成一個字串，並回傳此字串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elements.join());</span><br><span class="line"><span class="comment">// expected output: &quot;Fire,Air,Water&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;FireAirWater&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;Fire-Air-Water&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="…展開運算子"><a href="#…展開運算子" class="headerlink" title="…展開運算子"></a>…展開運算子</h2><p>…response.data.results 前面的… 是展開運算子，會將陣列內容展開</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []; <span class="comment">//空陣列，空容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目標：用 push 方法把 movies 從空陣列變成 [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">movies.push(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//傳入 3 個參數：1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">movies.push(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//把陣列用展開運算子打開，打開後就和方法一一模一樣</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//做一個陣列</span></span><br><span class="line">movies.push(...numbers); <span class="comment">//和方法二同樣意思</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>Array.prototype.push()</tag>
        <tag>...展開運算子</tag>
        <tag>filter</tag>
        <tag>find</tag>
        <tag>some</tag>
        <tag>findIndex</tag>
        <tag>map</tag>
        <tag>every</tag>
        <tag>陣列</tag>
        <tag>Array</tag>
        <tag>Array.prototype.join()</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo提交部落格的sitemap到Google Search Console</title>
    <url>/2021/09/11/%E7%94%A8hexo%E6%8F%90%E4%BA%A4%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84sitemap%E5%88%B0google-Search-Console/</url>
    <content><![CDATA[<p>Google Search Console工具可以用來查看使用者搜尋什麼關鍵字而觸及到你</p>
<p>想提升搜尋引擎最佳化 <strong>SEO</strong> (Search Engine Optimization，SEO) ，<br>可以把網站的sitemap提交到Google Search Console ，就可以在後台了解：</p>
<span id="more"></span>

<ol>
<li>網頁搜尋總點擊次數</li>
<li>使用者點擊錯誤的網址數量</li>
<li>使用者會搜尋什麼關鍵字而到你的網站</li>
<li>使用者是從哪些國家搜尋的</li>
<li>行動裝置可用性</li>
</ol>
<p>…等等相關。</p>
<p>其中，還可以查看「連結」：查看外部連結，哪些最熱門，來你的部落格的人又是點擊了哪些外部連結。</p>
<h2 id="產生-Sitemap-xml"><a href="#產生-Sitemap-xml" class="headerlink" title="產生 Sitemap.xml"></a>產生 Sitemap.xml</h2><p>在 Hexo 有一個 Plugin 叫做 hexo-generator-sitemap，可以幫助生產網站的 Sitemap.xml，就可以拿這份檔案去提交了唷！來看以下簡單三個步驟。</p>
<h3 id="安裝-Install"><a href="#安裝-Install" class="headerlink" title="安裝 Install"></a>安裝 Install</h3><ol>
<li><p>在部落格資料夾使用終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li>
<li><p>設定 Config</p>
</li>
</ol>
<p>打開你的部落格資料夾，打開根目錄的 _config.yml，在最後面貼上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">./sitemap_template.xml</span> <span class="comment"># 這行非必填，除非你想設定自訂的樣板</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新編譯一次，發布新內容：</li>
</ol>
<p>hexo g -d<br>檢查看看有沒有順利產生 Sitemap.xml？</p>
<p><a href="https://doug0849.github.io/sitemap.xml">https://doug0849.github.io/sitemap.xml</a> =&gt; 我的<br>提交至 Google Search Console<br>打開 Google Search Console</p>
<p>進入「索引 &gt; Sitemap」</p>
<p>「新增 Sitemap」：sitemap.xml</p>
<p>測試sitemap.xml可不可以讀取</p>
<ol>
<li>可以點選sitemap.xml進去後右上角有個開啟sitemap測試</li>
<li>使用左邊的網址審查 輸入完整位置 <a href="https://doug0849.github.io/sitemap.xml">https://doug0849.github.io/sitemap.xml</a> ，之後點選右上方測試線上網址</li>
</ol>
<p>若都沒問題，就是Google問題，通常只能等了，也許需要等待好幾天甚至是一週的時間sitemap狀態才會轉為正常。</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>sitemap</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS語法使用</title>
    <url>/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="以下圖源均來自："><a href="#以下圖源均來自：" class="headerlink" title="以下圖源均來自："></a>以下圖源均來自：<a href="https://tw.alphacamp.co/" title="" target="">Alpha Camp課程</a></h1><h1 id="觀念隨記"><a href="#觀念隨記" class="headerlink" title="觀念隨記"></a>觀念隨記</h1><p>階層式樣式表（英語：Cascading Style Sheets，縮寫：CSS；又稱串樣式列表、級聯樣式表、串接樣式表、階層式樣式表）</p>
<span id="more"></span>
<p>用戶體驗 (UX) 研究表示，在<strong>桌機</strong>的閱讀體驗中，理想上<strong>每行的字元應該在 50 到 75 之間</strong>才能維持良好的易讀性。更有其他研究表示，其實這個範圍<strong>可以擴大到 85 個字元。</strong></p>
<p>認識 display 屬性<br>所有的 HTML 元素都會有一個預設的 display 值，預設值通常是 block 或 inline 其中一個。</p>
<p>塊元素(block element)</p>
<ul>
<li>address - 地址</li>
<li>blockquote - 块引用</li>
<li>center - 举中对齐块</li>
<li>dir - 目录列表</li>
<li>div - 常用块级容易，也是css layout的主要标签</li>
<li>dl - 定义列表</li>
<li>fieldset - form控制组</li>
<li>form - 交互表单</li>
<li>h1 - 大标题</li>
<li>h2 - 副标题</li>
<li>h3 - 3级标题</li>
<li>h4 - 4级标题</li>
<li>h5 - 5级标题</li>
<li>h6 - 6级标题</li>
<li>hr - 水平分隔线</li>
<li>isindex - input prompt</li>
<li>menu - 菜单列表</li>
<li>noframes - frames可选内容，（对于不支持frame的浏览器显示此区块内容</li>
<li>noscript - ）可选脚本内容（对于不支持script的浏览器显示此内容）</li>
<li>ol - 排序表单</li>
<li>p - 段落</li>
<li>pre - 格式化文本</li>
<li>table - 表格</li>
<li>ul - 非排序列表</li>
</ul>
<p>內聯元素(inline element)</p>
<ul>
<li>a - 锚点</li>
<li>abbr - 缩写</li>
<li>acronym - 首字</li>
<li>b - 粗体(不推荐)</li>
<li>bdo - bidi override</li>
<li>big - 大字体</li>
<li>br - 换行</li>
<li>cite - 引用</li>
<li>code - 计算机代码(在引用源码的时候需要)</li>
<li>dfn - 定义字段</li>
<li>em - 强调</li>
<li>font - 字体设定(不推荐)</li>
<li>i - 斜体</li>
<li>img - 图片</li>
<li>input - 输入框</li>
<li>kbd - 定义键盘文本</li>
<li>label - 表格标签</li>
<li>q - 短引用</li>
<li>s - 中划线(不推荐)</li>
<li>samp - 定义范例计算机代码</li>
<li>select - 项目选择</li>
<li>small - 小字体文本</li>
<li>span - 常用内联容器，定义文本内区块</li>
<li>strike - 中划线</li>
<li>strong - 粗体强调</li>
<li>sub - 下标</li>
<li>sup - 上标</li>
<li>textarea - 多行文本输入框</li>
<li>tt - 电传文本</li>
<li>u - 下划线</li>
<li>var - 定义变量</li>
</ul>
<hr>
<h2 id="Rest-default-CSS"><a href="#Rest-default-CSS" class="headerlink" title="Rest default CSS"></a>Rest default CSS</h2><p>每家瀏覽器都有預設不同的 CSS 樣式，造成前端工程師網頁開發上一個頭痛的問題：<br>開發時用 CSS 設計好整齊美麗的排版，在 Google Chrome 上看起沒問題，用 IE 打開卻全變了樣，且市面上還有 Firefox、Safari、Opera 等其他家瀏覽器，</p>
<p>所以實務開發中，CSS起手式通常會是 Reset CSS，先將各大瀏覽器的預設樣式還原，有個乾淨的開始，再來制訂專案的樣式。</p>
<p>可以直接使用開源的 CSS Reset 工具如：</p>
<ol>
<li><a href="https://meyerweb.com/eric/tools/css/reset/" title="" target="">Reset CSS</a> ，這是 CSS 大師 Eric Meyer 整理出的版本</li>
<li><a href="https://necolas.github.io/normalize.css/" title="" target="">Normalize.css</a> 這是 Bootstrap 目前已經內建使用的版本</li>
<li>或是自行制訂</li>
</ol>
<hr>
<h2 id="網頁-單位-px-em-rem"><a href="#網頁-單位-px-em-rem" class="headerlink" title="網頁 ( 單位 ) px, em, rem, %"></a>網頁 ( 單位 ) px, em, rem, %</h2><h3 id="px："><a href="#px：" class="headerlink" title="px："></a>px：</h3><p>絕對單位代表螢幕中每個「點」( pixel )。</p>
<h3 id="em："><a href="#em：" class="headerlink" title="em："></a>em：</h3><p>相對單位，每個子元素透過「倍數」乘以父元素的 px 值。</p>
<h3 id="rem："><a href="#rem：" class="headerlink" title="rem："></a>rem：</h3><p>相對單位，每個元素透過「倍數」乘以根元素(瀏覽器預設)也就是html元素標籤的 px 值，通常瀏覽器預設為 16 px。<br>使用 rem 的好處是，專案一複雜，很容易忘記父元素是多少大小，用 rem 不用特別去記。或當父元素字體大小突然被改動時，用 rem 不會受到連帶影響。</p>
<h3 id="："><a href="#：" class="headerlink" title="%："></a>%：</h3><p>相對單位，每個子元素透過「百分比」乘以父元素的 px 值</p>
<hr>
<h1 id="RWD重點筆記"><a href="#RWD重點筆記" class="headerlink" title="RWD重點筆記"></a>RWD重點筆記</h1><ol>
<li>由小螢幕到大螢幕，mobile first。</li>
<li>使用media query以不同Breakpoint來設定不同階層的樣式</li>
<li>Breakpoint會設在各種螢幕尺寸變化的中間，例如常見的有：320px、480px、720px、768px、960px、1024px。</li>
</ol>
<p>每設一個 breakpoint 意味需要準備多一份 CSS 樣式，要抓得多細是看設計的需求。</p>
<p>除了幾個在設備間切換的主要分界點，也會設定次要分界點來調整比較細微的 CSS 變化，像是元素的邊距、避免文字超過頁面寬度，或是調整圖片尺寸。</p>
<h2 id="media-queries使用"><a href="#media-queries使用" class="headerlink" title="media queries使用"></a>media queries使用</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;...//styles&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;...//styles&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>) &#123;...//styles&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用 and、or 或 not 等運算子。</p>
<h2 id="import-其他文件"><a href="#import-其他文件" class="headerlink" title="@import 其他文件"></a>@import 其他文件</h2><p>如果樣式太多想要把文件拆開，可以使用 @import 來導入其他文件，仍然可以在同一份 CSS 裡統一管理網站樣式。</p>
<p>運用 url() 來載入文件，仍然可以串接 media type and feature：<br>@import url(‘styles.css’) screen and (max-width: 670px);</p>
<hr>
<h1 id="關於CSS整體優先級"><a href="#關於CSS整體優先級" class="headerlink" title="關於CSS整體優先級"></a>關於CSS整體優先級</h1><h2 id="瀏覽器開發商的優先級"><a href="#瀏覽器開發商的優先級" class="headerlink" title="瀏覽器開發商的優先級"></a>瀏覽器開發商的優先級</h2><p>style sheets 的來源可以分為三種：(由上而下)</p>
<ol>
<li>User agent origin：由「瀏覽器廠商」制定。</li>
</ol>
<ul>
<li>所以後來產生了重置樣式的工具 <a href="https://meyerweb.com/eric/tools/css/reset/">Reset CSS</a>、<a href="https://necolas.github.io/normalize.css/">Normalize CSS</a> 等，就是用來解決不同廠牌瀏覽器下造成的預設樣式偏差的問題，讓開發者得以在一致的基礎上，建構網頁 CSS 樣式設計。</li>
</ul>
<ol start="2">
<li>User origin：由「瀏覽器使用者」制定。</li>
</ol>
<ul>
<li>可以覆蓋掉 user agent origin 的樣式。通常能在你的瀏覽器右上角找到設定的地方，以 Firefox 為例，使用者可「偏好設定 &gt; 語言與外觀」中，自訂字型、字體大小等樣式</li>
</ul>
<ol start="3">
<li>Author origin：由「網頁開發者」制定。</li>
</ol>
<ul>
<li>優先級最高，可以覆蓋掉上述兩個來源的定義。而載入 CSS 樣式到 HTML 的方法有很多種。</li>
</ul>
<hr>
<h2 id="style-sheets-優先級"><a href="#style-sheets-優先級" class="headerlink" title="style sheets 優先級"></a>style sheets 優先級</h2><ol>
<li>HTML文檔內直接設定元素標籤的</li>
<li>HTML文檔內由上而下，越下面大於越上面</li>
<li>載入的CSS樣式表，越優先載入的大於後面載入的，例如</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange; <span class="comment">/* 第二優先 */</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 最優先 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(style-<span class="number">2</span>.css)</span><br><span class="line">  div &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;  <span class="comment">/*第三，優先於style-2*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>style-2.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(style-<span class="number">2</span>.css)</span><br><span class="line">  div &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red; <span class="comment">/*最後*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="CSS-選擇器的優先級"><a href="#CSS-選擇器的優先級" class="headerlink" title="CSS 選擇器的優先級"></a>CSS 選擇器的優先級</h2><p>網頁開發者制定樣式是透過多種 CSS 選擇器，選取到特定的元素來指定樣式。<br>在談論 CSS 優先級問題時，我們會把選擇器分成以下三個等級：</p>
<p>等級一：以 ID 選擇器為代表，例如#article。<br>等級二：以 Class 選擇器為代表，另外包括屬性選擇器、偽類選擇器，例如 .container 、[type=”radio”]、:hover。<br>等級三：以 Element 選擇器為代表，另外包括偽元素選擇器，例如 div、::before。<br>優先級是，等級一 &gt; 二 &gt; 三，CSS選擇器有一個分數機制，可以看成一個數學比大小的問題。<br>一個類別都有一個分數<br>等級一:ID類別:0分(百位) - 等級二:class類別:0分(十位) - 等級三:Element類別: 0分(個位)</p>
<p>每當選擇器列出多一個class名稱時，例如 .container<br>這時候class就會+1分<br>等級一:ID類別:0分(百位) - 等級二:class類別:1分(十位) - 等級三:Element類別: 0分(個位)<br>總分10分</p>
<p>再來選擇器多一個element元素名稱時，例如 div<br>這時候Element就會+1分<br>等級一:ID類別:0分(百位) - 等級二:class類別:1分(十位) - 等級三:Element類別: 1分(個位)<br>總分11分</p>
<p>這時候這兩個選擇器有不一樣樣式內容，這時候div.container會優先於.container</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CSS優先級總結"><a href="#CSS優先級總結" class="headerlink" title="CSS優先級總結"></a>CSS優先級總結</h2><p>總而言之，言而總之</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/CSS_level.png" class="">
<center>圖源：<a href="https://tw.alphacamp.co/" title="" target="">Alpha Camp課程</a> </center>

<h2 id="CSS撰寫注意三件事"><a href="#CSS撰寫注意三件事" class="headerlink" title="CSS撰寫注意三件事"></a>CSS撰寫注意三件事</h2><p>避免掉入 CSS 樣式優先集泥潭中的原則就是<strong>千萬不要因為「某個選擇器看起來很厲害」、「某個選擇器可以一擊必殺」隨意使用</strong>，請把以下三點放在心上：</p>
<ol>
<li>不使用 !important：除非你有很好的理由，否則千萬別輕易放大絕招，導致日後難維護。</li>
<li>遵守內容和樣式分離：盡量不要在 HTML 中另外撰寫 style 區塊及使用 inline style ，除非你有個很好的理由，例如用 JavaScript 動態控制樣式變化的時候。</li>
<li>讓選擇器的優先級放低：撰寫樣式時，盡量選用 Class 或 Element 的級別的選擇器，<strong>非必要不用 id</strong> 或<strong>複雜的選擇器組合</strong>，保留多一點彈性的空間給後續的樣式來覆蓋。</li>
</ol>
<h2 id="複習選擇器的好幫手："><a href="#複習選擇器的好幫手：" class="headerlink" title="複習選擇器的好幫手："></a>複習選擇器的好幫手：</h2><p>Envato Tuts+ - <strong><a href="https://code.tutsplus.com/zh-hant/tutorials/the-30-css-selectors-you-must-memorize--net-16048">30個你必須記住的CSS選擇器</a></strong><br><strong><a href="https://flukeout.github.io/">CSS Diner</a></strong> (一款小遊戲，你需要輸入正確的選擇器來選到指定器皿或食物)</p>
<hr>
<h1 id="語法使用隨記"><a href="#語法使用隨記" class="headerlink" title="語法使用隨記"></a>語法使用隨記</h1><hr>
<h2 id="行高-line-height"><a href="#行高-line-height" class="headerlink" title="行高 line-height"></a>行高 line-height</h2><h3 id="用line-height設定文字的垂直置中"><a href="#用line-height設定文字的垂直置中" class="headerlink" title="用line-height設定文字的垂直置中"></a>用line-height設定文字的垂直置中</h3><p>只要將元素的line-height設定跟容器的高度一樣即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Reverts to the default value of the browser. */</span></span><br><span class="line"><span class="attribute">line-height</span>: normal;</span><br><span class="line"><span class="comment">/* 可以使用無單位: 航高會是以倍數乘字體大小 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line"><span class="comment">/* 可以使用px單位 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="comment">/* 可以使用em單位 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">0.8em</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="固定元素位置於網頁最上層，position-fixed"><a href="#固定元素位置於網頁最上層，position-fixed" class="headerlink" title="固定元素位置於網頁最上層，position: fixed"></a>固定元素位置於網頁最上層，position: fixed</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="comment">/*固定置頂*/</span></span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以透過position的fixed來控制元素固定於原本位置，接著使用z-index以數字大小來控制此元素的圖層優先順序。0最後面，數字越大越上面。</p>
<hr>
<h2 id="絕對定位-position-absolute"><a href="#絕對定位-position-absolute" class="headerlink" title="絕對定位 position:absolute"></a>絕對定位 position:absolute</h2><p>絕對定位 position: absolute 指的是子元素根據父元素做定位。<br>接著可以使用Top來設定元素位於父元素的垂直位置，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span> ; <span class="comment">/*會貼齊父元素的最上緣*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>; <span class="comment">/*會貼齊父元素的最下緣*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>absolute是<strong>相對於自己最近的父元素來定位的</strong>，<br>如果<strong>不給.father相對定位</strong>，那麼.father:before 和 .father::after的<strong>絕對定位absolute就是相對於body來定位的</strong>。<br><strong>relative是相對於自己來定位的</strong>，例如：.father{position:relative;top:-50px;},這時.hamburger會以他原本的位置上移50px。</p>
<hr>
<h2 id="Grid-system"><a href="#Grid-system" class="headerlink" title="Grid system"></a>Grid system</h2><h3 id="進階：grid-template-columns-和-grid-template-rows-的值"><a href="#進階：grid-template-columns-和-grid-template-rows-的值" class="headerlink" title="進階：grid-template-columns 和 grid-template-rows 的值"></a>進階：grid-template-columns 和 grid-template-rows 的值</h3><p>grid-template-columns 和 grid-template-rows 的值除了使用基本的網頁單位 px, em, rem, %, 來設定之外，<br>還可以使用以下幾種較為彈性的設定單位</p>
<h3 id="對齊系統"><a href="#對齊系統" class="headerlink" title="對齊系統"></a>對齊系統</h3><p>和 flexbox 佈局系統一樣，grid 系統有 align-items, justify-items, align-content, justify-content 屬性可以對子元素操作。</p>
<h3 id="fr："><a href="#fr：" class="headerlink" title="fr："></a>fr：</h3><p>fraction 這個單位和分幾份有關。1fr 意味著能分到容器剩餘空間的一個等分、2fr 的分到兩等份，以此類推，因此 fr 相較於 px 是一個比較具有彈性的單位。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/fr.png" class="">

<h3 id="minmax-："><a href="#minmax-：" class="headerlink" title="minmax()："></a>minmax()：</h3><p>minmax(min, max) 能夠給定尺寸最小和最大值，讓尺寸的決定變得相對彈性。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/minmax.png" class="">

<h3 id="repeat-："><a href="#repeat-：" class="headerlink" title="repeat()："></a>repeat()：</h3><p>透過 repeat() 的使用可以大量快速的設定重複區塊：</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/repeat.png" class="">

<h3 id="auto"><a href="#auto" class="headerlink" title="auto()"></a>auto()</h3><p>auto 有兩種行為，會受到左右的單位影響。</p>
<ol>
<li>auto 元素的尺寸簡單來說是：內容多大就有多大，但留意它會依照同一列 / 同一行最大尺寸的格子進行調整，例如未來如果有第二行、第二列，而它的寬度是 100px，那目前這個很窄的2號格子也會被撐寬為 100px。<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/auto1.png" class=""></li>
<li>搭配其他固定尺寸的單位使用，2號格子的尺寸會自動延伸，填滿容器內的剩餘空間。<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/auto2.png" class=""></li>
</ol>
<h3 id="grid-auto-flow-與-grid-auto-rows"><a href="#grid-auto-flow-與-grid-auto-rows" class="headerlink" title="grid-auto-flow 與 grid-auto-rows"></a>grid-auto-flow 與 grid-auto-rows</h3><p>grid-auto-flow 是控制當沒有宣告子元素要被擺在網格的特定位置時，子元素將根據特定的流向被自動擺放到網格當中。<br>grid-auto-flow 的預設值為 row ，意思是子元素將<strong>逐列</strong>被擺放到網格中。<br>假設第一行有兩列，放滿後會被推向下一行，若是有設定grid-auto-rows高，那麼會自動生成下一行高，並把元素推下一行的第一列。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/grid-auto-rows.png" class="">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: row;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>換個方向可以手動更改grid-auto-flow 為 column，子元素將逐行被放到網格中。<br>假設第一行只有一列，第二行也只有一列，<br>子元素會由上而下，放滿後會被推向下一列第一行，若是有設定grid-auto-columns寬，那麼自動生成的下一列寬，並把元素推下一列的第一行。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/grid-auto-columns.png" class="">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: column;</span><br><span class="line">  grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<hr>
<h2 id="偽類-pseudo"><a href="#偽類-pseudo" class="headerlink" title="偽類 pseudo"></a>偽類 pseudo</h2><h3 id="pseudo-elements使用方法及簡易範例"><a href="#pseudo-elements使用方法及簡易範例" class="headerlink" title="pseudo-elements使用方法及簡易範例"></a>pseudo-elements使用方法及簡易範例</h3><p>偽元素寫法是在選擇器後面加上兩個冒號和一個關鍵字<br>關鍵字，如：</p>
<p>p::first-line - 選取第一行。<br>p::first-letter - 選取第一個字。<br>p::before - 在選取的元素前面插入東西。<br>p::after - 在選取的元素後面插入東西。<br>p::selection - 選取反白後的文字。</p>
<p>例如 p::first-line 選擇器是 p 標籤，關鍵字是 first-line，通過p::first-line就可以選到段落中的第一行文字來控制它的樣式。</p>
<h3 id="before-和-after"><a href="#before-和-after" class="headerlink" title="::before 和 ::after"></a>::before 和 ::after</h3><p>這兩個是最常用的，兩者預設值都是 display:inline-block，然後會繼承原本元素屬性，通常會搭配 content 屬性來添加內容。<br>範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大家好，我是AC Genie<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-before-after1.png" class="">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;♥&quot;</span>;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;^_^&quot;</span>;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-before-after2.png" class="">

<h3 id="pseudo-class使用介紹及簡易範例"><a href="#pseudo-class使用介紹及簡易範例" class="headerlink" title="pseudo-class使用介紹及簡易範例"></a>pseudo-class使用介紹及簡易範例</h3><p>一開始學最常用的就是 :hover，是用來控制滑鼠滑過時元素的樣式，但 hover 前面只有一個冒號，和兩個冒號::的偽元素不同，<br>偽類 (pseudo-class) 這種類別與<strong>元素</strong>的<strong>某個「狀態」</strong>有關，例如：</p>
<p>:visited - 點擊過的超連結。<br>:checked - 被勾選的元素。<br>:hover - 滑鼠滑過的地方。<br>:focus - 滑鼠所在的表單輸入框。<br>:first-child - 第一個子元素。<br>:last-child - 最後一個子元素。<br>:nth-child() - 特定子元素。<br>單個冒號 (:) 是這種類別的特殊標記。</p>
<p>範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用偽類 :nth-child()，搭配關鍵字 odd 指定單數的子元素給橘紅色背景、 even 指定雙數的子元素給綠色背景，p:nth-child(odd) 也可以寫作 p:nth-child(2n+1)，p:nth-child(even) 也可以寫作 p:nth-child(2n) 。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: OrangeRed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: LightSeaGreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-element.png" class="">


<p>使用:not(:last-child)可以取消選擇最後一個元素<br>範例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: OrangeRed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>意思則是 所有的p元素橘紅色背景，除了最後一個p元素</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-element2.png" class="">

<hr>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>transition 屬性是一個縮寫，冒號後面可以放四個屬性值：<br>transition: property duration timing-function delay;</p>
<p>依序代表：<br>transition-property：載明哪個屬性要使用這個效果，例如我們的目標是和顯示有關的 display 屬性。<br>transition-duration：這個效果持續發生的時間，單位是秒，如果是 0 點幾，0 可以不寫。例如我們希望持續 0.2 秒的話可寫 .2s 。<br>transition-timing-function：效果的變化速度，可以寫屬性名稱，例如 ease-in 是緩慢的開始，也可以自由定義 cubic-bezier 函數，<a href="https://easings.net/">easing.net</a> 提供一張好用的速查表，可前往試用後複製想要的函數。<br>transition-delay：先延遲多久之後再開始這個效果，單位和寫法同transition-duration。</p>
<p>使用方法可參考：<br><a href="https://www.w3schools.com/css/css3_transitions.asp">W3C</a><br><a href="https://codepen.io/doug0849/pen/MWovwyr?editors=1100">作業-毛小孩星球</a></p>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform">transform</a> 的 MDN 文件，裡面有屬性變化效果的範例。<br>transform 這個屬性可以平移、旋轉、縮放和傾斜元素。<br>使用方法可參考：<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform">MDN</a><br><a href="https://codepen.io/doug0849/pen/MWovwyr?editors=1100">作業-毛小孩星球</a></p>
<h2 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h2><p>使用transform-origin來設定變化的原點<br>使用方法可參考：<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin">MDN</a><br><a href="https://codepen.io/doug0849/pen/MWovwyr?editors=1100">作業-毛小孩星球</a></p>
<hr>
<h2 id="隱藏元素方法-visibility-hidden-及-display-none"><a href="#隱藏元素方法-visibility-hidden-及-display-none" class="headerlink" title="隱藏元素方法 visibility: hidden 及 display: none"></a>隱藏元素方法 visibility: hidden 及 display: none</h2><p>display: none 與 visibility: hidden 都是隱藏元素的方法，差別在於 display: none 會一口氣使操作對象從文字流中拔除，而 visibility: hidden 則像是用一塊白布蓋起來的感覺，畫面上不顯示，但還是會佔一個空間：</p>
<p>將 visibility: hidden 搭配上 position: absolute; ，故元素會從文字流中移除，完全和 display: none 是一樣的效果。<br>在我們的情境中這兩種做法都可以，一併介紹給大家知道。<br>未來你可以根據需求判斷要用哪一個方法比較合適。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/hidden.png" class="">]]></content>
      <categories>
        <category>技術筆記</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>CSS</tag>
        <tag>優先級</tag>
      </tags>
  </entry>
  <entry>
    <title>隨記-越南疫情近況</title>
    <url>/2021/09/12/%E9%9A%A8%E8%A8%98-%E8%B6%8A%E5%8D%97%E7%96%AB%E6%83%85%E8%BF%91%E6%B3%81/</url>
    <content><![CDATA[<p>今天是自從2019年2月20我來越南工作開始算起的第935天，最近越南疫情稍微有好轉一些了，自從宣布封城開始經過兩星期左右，而確診病數也確實看到明顯下降了，值得開心。</p>
<span id="more"></span>

<p>昨天的新聞報導胡志明的確診病例為5629例，跟高峰期每天的8000多相比少了很多，總算看得到點點希望了，政府也宣布，部分地區會在16號開始解除封閉，胡志明可能還要再等等，也許是10月吧，到那時候我大概就會立刻提離職，然後準備收拾行曩回臺灣去了，身在臺灣的各位朋友們!!真的很幸福啊!! 回臺灣後大概會計畫邊休息邊玩邊走走看看，然後持續進行著轉職的計畫囉。</p>
<p>關於健身，今年4月份工作很忙，然後就沒體力去，到了5月份準備要去運動，結果那個周末就直接宣布健身房停止營業，所以也是從那時候就開始就不敢出門了，越南爆發時間大概是跟臺灣第一次疫情爆發差不多時間，然後就從那個時候一直關到今天沒出門，頂多上下樓去辦公室，後來正式宣布Work From Home的時候就幾乎沒踏出家門了，除非下樓拿快遞的食材之類的，日子大概不外乎就是工作、打電動、看漫畫、睡覺、上課、學技術，每天無限循環。</p>
<p>最近每天也沒什麼新鮮事，就是每天在寫寫技術筆記，繼續上課補強，或是自己看些技術文章，還有日夜顛倒，對，嚴重的日夜顛倒，搞得身體不太舒服，看看我這篇發文時間就知道了，所以準備來去睡覺了，稅前隨手寫個日記醬，搭晚安。</p>
<img src="/2021/09/12/%E9%9A%A8%E8%A8%98-%E8%B6%8A%E5%8D%97%E7%96%AB%E6%83%85%E8%BF%91%E6%B3%81/1.jpg" class="">]]></content>
      <categories>
        <category>日記</category>
        <category>越南</category>
      </categories>
      <tags>
        <tag>日記</tag>
        <tag>越南</tag>
      </tags>
  </entry>
  <entry>
    <title>S2：切版練習：毛小孩星球</title>
    <url>/2021/09/14/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-%E6%AF%9B%E5%B0%8F%E5%AD%A9%E6%98%9F%E7%90%83/</url>
    <content><![CDATA[<h1 id="完成作品CodePen連結"><a href="#完成作品CodePen連結" class="headerlink" title="完成作品CodePen連結"></a><a href="https://codepen.io/doug0849/pen/MWovwyr">完成作品CodePen連結</a></h1><p><strong>此文章所做的筆記，僅為提醒自己要多加注意的地方。</strong></p>
<h1 id="本文引用之圖片均來自Alpha-Camp"><a href="#本文引用之圖片均來自Alpha-Camp" class="headerlink" title="本文引用之圖片均來自Alpha Camp"></a>本文引用之圖片均來自<a href="https://tw.alphacamp.co/">Alpha Camp</a></h1><span id="more"></span>
<h1 id="作業筆記"><a href="#作業筆記" class="headerlink" title="作業筆記"></a>作業筆記</h1><h2 id="起手式-Rest-default-CSS-還原瀏覽器預設設定"><a href="#起手式-Rest-default-CSS-還原瀏覽器預設設定" class="headerlink" title="起手式 Rest default CSS 還原瀏覽器預設設定"></a>起手式 Rest default CSS 還原瀏覽器預設設定</h2><p>每家瀏覽器都有預設不同的 CSS 樣式，造成前端工程師網頁開發上一個頭痛的問題：<br>開發時用 CSS 設計好整齊美麗的排版，在 Google Chrome 上看起沒問題，用 IE 打開卻全變了樣，且市面上還有 Firefox、Safari、Opera 等其他家瀏覽器，</p>
<p>所以實務開發中，CSS起手式通常會是 Reset CSS，先將各大瀏覽器的預設樣式還原，有個乾淨的開始，再來制訂專案的樣式。</p>
<p>可以直接使用開源的 CSS Reset 工具如：</p>
<ol>
<li><a href="https://meyerweb.com/eric/tools/css/reset/" title="" target="">Reset CSS</a> ，這是 CSS 大師 Eric Meyer 整理出的版本</li>
<li><a href="https://necolas.github.io/normalize.css/" title="" target="">Normalize.css</a> 這是 Bootstrap 目前已經內建使用的版本</li>
<li>或是自行制訂</li>
</ol>
<h2 id="header-固定置頂"><a href="#header-固定置頂" class="headerlink" title="header 固定置頂"></a>header 固定置頂</h2><p>常常看到很多網頁，可以將header固定在最上方，不會因為頁面下滑消失。<br>我們可以使用 <strong>position: fixed</strong> 來固定元素位置。</p>
<p>再通過 z-index 可以定義元素的層級，<strong>愈大的數字會放在愈上層，愈小的數字會放在愈下層</strong>，而視窗位於 0 的位置。<br>將數值設定為 999 ，基本 header 元素就很難被其他元素覆蓋掉，導覽列就會固定在最上層。</p>
<h2 id="em-vs-rem"><a href="#em-vs-rem" class="headerlink" title="em vs. rem"></a>em vs. rem</h2><p>rem 和 em 同樣是相對單位，只是參照的對象不同。 em 參照的對象是父元素， rem 是 root em 的意思， 參照的是根元素，就是 html 層級的字體大小，一般瀏覽器的預設值是 16 px。<br>使用 rem 的好處是，專案一複雜，很容易忘記父元素是多少大小，用 rem 不用特別去記。或當父元素字體大小突然被改動時，用 rem 也不會受到連帶影響。</p>
<h2 id="絕對定位-position-absolute"><a href="#絕對定位-position-absolute" class="headerlink" title="絕對定位 position:absolute"></a>絕對定位 position:absolute</h2><img src="/2021/09/14/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-%E6%AF%9B%E5%B0%8F%E5%AD%A9%E6%98%9F%E7%90%83/navbar.png" class="">

<p>絕對定位 position: absolute 指的是子元素根據父元素做定位，但父元素CSS要設定position: relative，否則會根據html body標籤來設定位置。<br>在這個案例中，父元素是 header(跟body位置一樣寬且置頂)，子元素是 nav。<br>假設 top 是 0，子元素會貼齊父元素的最頂端。<br>看手機設計稿，此案導覽列是貼齊在 header 的下面，所以要設定 top:100%。子元素移動到父元素正下方。</p>
<p>本案<strong>導覽列</strong>原本是<strong>沒有特別設定寬度</strong>的，<strong>瀏覽器預設為 auto</strong>。<br>一般情況下，導覽列因為是 block element，因此會想辦法佔滿父元素的寬度和高度空間。<br>然而，在<strong>設定為絕對定位後，元素已經完全脫離文字流了</strong>，本身<strong>寬度和高度大小會透過內容決定</strong>，<br>所以目前 .nav 的寬度只有 4 個字元寬。手動將寬度設為 100% 和父元素同寬，文字就會置中。</p>
<h2 id="使用line-height-來設定文字的垂直置中"><a href="#使用line-height-來設定文字的垂直置中" class="headerlink" title="使用line-height 來設定文字的垂直置中"></a>使用line-height 來設定文字的垂直置中</h2><p>要做文字的垂直置中的效果，可能會直覺想到 position 或是 flexbox，<br>這邊因為只有文字，所以可以使用 line-height 這方法來讓 logo 文字垂直置中。</p>
<p><strong>將文字的 line-height 設定和父元素同高即可。</strong></p>
<h2 id="使用input-checkbox來製作漢堡排使導覽列收合"><a href="#使用input-checkbox來製作漢堡排使導覽列收合" class="headerlink" title="使用input-checkbox來製作漢堡排使導覽列收合"></a>使用input-checkbox來製作漢堡排使導覽列收合</h2><h3 id="1-先加入html標籤"><a href="#1-先加入html標籤" class="headerlink" title="1.先加入html標籤"></a>1.先加入html標籤</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>毛小孩星球<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   加入input-checkbox --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nav-toggle&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  加上導覽列  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#activity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>近期活動<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#album&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>狗兒相片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#adoption&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>領養資訊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-原先的nav先設定不顯示"><a href="#2-原先的nav先設定不顯示" class="headerlink" title="2.原先的nav先設定不顯示"></a>2.原先的nav先設定不顯示</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="comment">/*依據 Header 定位*/</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/*原本先不顯示*/</span></span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-pseudo-class-控制「被勾選」時樣式，及使用-選定同一層後方元素"><a href="#3-使用-pseudo-class-控制「被勾選」時樣式，及使用-選定同一層後方元素" class="headerlink" title="3.使用 pseudo-class 控制「被勾選」時樣式，及使用 ~ 選定同一層後方元素"></a>3.使用 pseudo-class 控制「被勾選」時樣式，及使用 ~ 選定同一層後方元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nva</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣就可以製作出一個陽春版的漢堡排。</p>
<h3 id="4-使用-transition-和-transform-優化收合的轉場效果"><a href="#4-使用-transition-和-transform-優化收合的轉場效果" class="headerlink" title="4.使用 transition 和 transform 優化收合的轉場效果"></a>4.使用 transition 和 transform 優化收合的轉場效果</h3><ul>
<li>transition 屬性是一個縮寫，冒號後面可以放四個屬性值：<br>transition: property duration timing-function delay;依序代表：<ul>
<li>transition-property：載明哪個屬性要使用這個效果，例如我們的目標是和顯示有關的 display 屬性。</li>
<li>transition-duration：這個效果持續發生的時間，單位是秒，如果是 0 點幾，0 可以不寫。例如我們希望持續 0.2 秒的話可寫 .2s 。</li>
<li>transition-timing-function：效果的變化速度，可以寫屬性名稱，例如 ease-in 是緩慢的開始，也可以自由定義 cubic-bezier 函數，<a href="https://easings.net/">easing.net</a> 提供一張好用的速查表，可前往試用後複製想要的函數。</li>
<li>transition-delay：先延遲多久之後再開始這個效果，單位和寫法同transition-duration。</li>
</ul>
</li>
</ul>
<ol>
<li>再nav加入 transition<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"><span class="comment">/*依據 Header 定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*原本先不顯示*/</span></span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="comment">/*設定display的過渡動畫變化效果*/</span></span><br><span class="line"><span class="attribute">transition</span>: display .<span class="number">2s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>最後發現沒有變化<br>畫面沒有變化是因為 display 只有 100% 完全顯示和 0% 完全不顯示兩個狀態，無法做到漸變的效果。</p>
<ol start="2">
<li>transform<br>為了解決這個問題，我們再來多認識一個 CSS 屬性：transform。<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform">transform</a> 的 MDN 文件，裡面有屬性變化效果的範例。</li>
</ol>
<p>  使用 transform: scale(1,0); 來取代 display: none;<br>  及 transform: scale(1,1); 來取代 display: block;</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"><span class="comment">/*依據 Header 定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*改設定transform的過渡動畫變化效果*/</span></span><br><span class="line"><span class="attribute">transition</span>: transform .<span class="number">2s</span> ease-out;</span><br><span class="line"><span class="comment">/*由display改為transform，一開始設定(x,y)比例為(1,0)為不顯示*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nav</span> &#123;</span><br><span class="line"><span class="comment">/*由display改為transform，設定(x,y)比例為(1,1)*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  此時能夠發現有轉場效果了，但是卻從中間開闔。</p>
<ol start="3">
<li>使用 transform-origin 設定 transform 變化起點在上方<br>讓導覽列從上方開始做上下收放，可使用 transform-origin 這個屬性來達成。<br>預設的屬性值是 center，代表 transform 效果的起始點是在元素的中心。<br>可以看 MDN還有哪些屬性 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin">transform-origin</a></li>
</ol>
<p>  增加transform-origin屬性</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"><span class="comment">/*依據 Header 定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*設定transform的過渡動畫變化效果*/</span></span><br><span class="line"><span class="attribute">transition</span>: transform .<span class="number">2s</span> ease-out;</span><br><span class="line"><span class="comment">/*由display改為transform，一開始設定(x,y)比例為(1,0)為不顯示*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*設定變化原點在上方*/</span></span><br><span class="line"><span class="attribute">transform-origin</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nav</span> &#123;</span><br><span class="line"><span class="comment">/*由display改為transform，設定(x,y)比例為(1,1)*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>最後使用 opacity 讓使用者不會看到開關時文字壓縮<br>在.nav-item上加上opacity: 0 以及 .nav-toggle:checked時.nav-item的樣式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-item</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1.4rem</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>; <span class="comment">/*完全透明*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nav</span> <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: opacity <span class="number">0.2s</span> ease-out <span class="number">0.15s</span>; <span class="comment">/*透明過場設定，最後一個參數為當checked被執行時，緩150毫秒進行過場動畫*/</span></span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>; <span class="comment">/*不透明*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="製作-hamburger-樣式及位置"><a href="#製作-hamburger-樣式及位置" class="headerlink" title="製作 hamburger 樣式及位置"></a>製作 hamburger 樣式及位置</h2><p>利用label 的for 屬性會和input 的 id綁定，就可以點label的時候去觸及input<br>先在html上加入 label，再加上span打上三，暫時製作一個陽春的漢堡排</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>毛小孩星球<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   hamberger --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nav-toggle&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  加上導覽列  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#activity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>近期活動<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#album&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>狗兒相片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#adoption&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>領養資訊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   增加label標籤 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle-label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hamburger&quot;</span>&gt;</span>三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>設定漢堡排位置<br>先選定 navbar-toggle-label ，使用絕對定位，讓漢堡排從文字流離開<br>然後設定top和bottom都為0，代表這個元素高度跟父元素 header 相等是 60px<br>最後使用display: flex 和 align-items 來設定垂直置中。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar-toggle-label</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">7.5%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>進階版漢堡排：使用span畫線<br>先把國字三刪除，接著改寫 .hamburger的樣式，畫出第一條具備美感的漢堡排中央橫線。<br>選定漢堡.hamburger，寬度設定 30px，高度是 3px，背景顏色則是 #267b98。</p>
<p>.hamburger {<br>  width: 30px;<br>  height: 3px;<br>  background: #267b98;<br>}</p>
<h3 id="使用偽元素增加漢堡另外兩條線"><a href="#使用偽元素增加漢堡另外兩條線" class="headerlink" title="使用偽元素增加漢堡另外兩條線"></a>使用偽元素增加漢堡另外兩條線</h3><p>其他兩條都跟中間這一條外觀相同，所以我們在選擇器 .hamburger後加兩個偽元素選擇 hamburger::before 和 .hamburger::after。<br>但我們還沒有給它任何的 content，還沒有任何的內容，所以基本上是看不到它。<br>我們需要給hamburger::before 和 .hamburger::after一個 content，屬性值設定為一個空值，因為我們只需要利用這個元素的空間來做樣式，不需要內容。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#267b98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="comment">/*給一個空的內容*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="設定偽元素的位置"><a href="#設定偽元素的位置" class="headerlink" title="設定偽元素的位置"></a>設定偽元素的位置</h3><p>如果想給 .hamburger:before 和 .hamburger::after 設定在 .hamburger 的上下方，<br>應該給 .hamburger設定 position: relative<br>.hamburger:before 和 .hamburger::after 設定position: absolute</p>
<p>absolute是<strong>相對於自己最近的父元素來定位的</strong>，<br>如果<strong>不給.hamburger相對定位</strong>，那麼.hamburger:before 和 .hamburger::after的<strong>絕對定位absolute就是相對於body來定位的</strong>。</p>
<p><strong>relative是相對於自己來定位的</strong>，例如：.hamburger{position:relative;top:-50px;},這時.hamburger會以他原本的位置上移50px。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#267b98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hamburger</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/*給一個空的內容*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著移動before和after兩個元素的上下位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>會看到兩個元素已經各上下移動8px，但是偏了一邊，只要在設定absolute的時候給兩個元素left 0即可<br>完整css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#267b98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hamburger</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*給一個空的內容*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="隱藏input-checkbox"><a href="#隱藏input-checkbox" class="headerlink" title="隱藏input-checkbox"></a>隱藏input-checkbox</h2><p>給input-checkbox設定上CSS樣式屬性 visibility: hidden;<br>就會隱藏，但是會看到brand歪一邊，這時候再給input-checkbox設定position: absolute，讓他抽離文字流即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar-toggle</span> &#123;</span><br><span class="line">  <span class="comment">/*不佔空間*/</span></span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>display: none 與 visibility: hidden 的差異 display: none 與 visibility: hidden 都是隱藏元素的方法，差別在於 display: none 會一口氣使操作對象從文字流中拔除，而 visibility: hidden 則像是用一塊白布蓋起來的感覺，畫面上不顯示，但還是會佔一個空間：</p>
<p>在我們剛剛實作的案例中，將 visibility: hidden 搭配上 position: absolute; ，故元素會從文字流中移除，完全和 display: none 是一樣的效果。<br>在我們的情境中這兩種做法都可以，一併介紹給大家知道。<br>未來你可以根據需求判斷要用哪一個方法比較合適。</p>
<h2 id="grid-auto-flow-與-grid-auto-rows"><a href="#grid-auto-flow-與-grid-auto-rows" class="headerlink" title="grid-auto-flow 與 grid-auto-rows"></a>grid-auto-flow 與 grid-auto-rows</h2><p>grid-auto-flow 是控制當沒有宣告子元素要被擺在網格的特定位置時，子元素將根據特定的流向被自動擺放到網格當中。<br><strong>grid-auto-flow 的預設值為 row</strong>，意思是子元素將<strong>逐列</strong>被擺放到網格中。<br>假設第一行有兩列，放滿後會被推向下一行，若是有設定grid-auto-rows高，那麼會自動生成下一行高，並把元素推下一行的第一列。</p>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: row;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>換個方向可以手動更改<strong>grid-auto-flow 為 column</strong>，意思是子元素將<strong>逐行</strong>被放到網格中。<br>假設第一行只有一列，第二行也只有一列，子元素會由上而下，放滿後會被推向下一列第一行，若是有設定grid-auto-columns寬，那麼自動生成的下一列寬，並把元素推下一列的第一行。</p>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: column;</span><br><span class="line">  grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h2><p>可以透過父層先劃分好格子，然後再選擇各個子元素，將各個子元素使用grid-area各自命名，最後回到父層使用grid-template-areas來安排子元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr); </span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">250px</span>);</span><br><span class="line">  grid-template-areas:</span><br><span class="line">    <span class="string">&quot;main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;left left right right&quot;</span>;</span><br><span class="line">  grid-gap: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-banner</span> &#123;</span><br><span class="line">  grid-area: main;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-banner-left</span> &#123;</span><br><span class="line">  grid-area: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-banner-right</span> &#123;</span><br><span class="line">  grid-area: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>CSS</tag>
        <tag>切版</tag>
      </tags>
  </entry>
  <entry>
    <title>學期2-2_S2-電影清單練習實作</title>
    <url>/2021/09/11/S2-2-%E9%9B%BB%E5%BD%B1%E6%B8%85%E5%96%AE%E7%B7%B4%E7%BF%92%E5%AF%A6%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="此文章僅記錄作業時提醒自己遇到的問題及需要注意處"><a href="#此文章僅記錄作業時提醒自己遇到的問題及需要注意處" class="headerlink" title="此文章僅記錄作業時提醒自己遇到的問題及需要注意處"></a>此文章僅記錄作業時提醒自己遇到的問題及需要注意處</h1><span id="more"></span>
<h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><p>當用<strong>常數</strong>宣告了一個陣列容器的時候，若要加入物件或其他東西要使用Array.prototype.push()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(INDEX_URL)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    movies.push(...response.data.results)</span><br><span class="line">    renderMovieList(movies)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<h2 id="展開運算子"><a href="#展開運算子" class="headerlink" title="展開運算子"></a>展開運算子</h2><p>…response.data.results 前面的… 是展開運算子，會將陣列內容展開</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []; <span class="comment">//空陣列，空容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目標：用 push 方法把 movies 從空陣列變成 [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">movies.push(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//傳入 3 個參數：1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">movies.push(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//把陣列用展開運算子打開，打開後就和方法一一模一樣</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//做一個陣列</span></span><br><span class="line">movies.push(...numbers); <span class="comment">//和方法二同樣意思</span></span><br></pre></td></tr></table></figure>

<h2 id="關於dataset"><a href="#關於dataset" class="headerlink" title="關於dataset"></a>關於dataset</h2><p>可以在元素標籤上設定data資料，在使用JS去取得點擊目標元素上的dataset資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1234567890&quot;</span> <span class="attr">data-user</span>=<span class="string">&quot;ac-genie&quot;</span> <span class="attr">data-date-of-birth</span>&gt;</span>AC Genie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後我們可以呼叫 dataset. 來取得這些屬性的值，你會發現這些值的型態都是字串*：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#user&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.user)</span><br><span class="line"><span class="comment">//ac-genie</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.id)</span><br><span class="line"><span class="comment">//1234567890</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.dateOfBirth)</span><br><span class="line"><span class="comment">//(空字串)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>Array.prototype.push()</tag>
        <tag>...展開運算子</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-切版練習-T恤商店</title>
    <url>/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/</url>
    <content><![CDATA[<p><a href="">完成作品</a></p>
<p><strong>此編記錄自己從零到全部的實作切版畫面時所碰到的步驟處理及狀況處裡筆記。</strong></p>
<span id="more"></span>
<h1 id="Step1：先將得到的設計稿框出HTML的結構"><a href="#Step1：先將得到的設計稿框出HTML的結構" class="headerlink" title="Step1：先將得到的設計稿框出HTML的結構"></a>Step1：先將得到的設計稿框出HTML的結構</h1><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/html-wireframe.png" class="">

<h1 id="Step2-將HTML結構寫出來"><a href="#Step2-將HTML結構寫出來" class="headerlink" title="Step2: 將HTML結構寫出來"></a>Step2: 將HTML結構寫出來</h1><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/build-html.png" class="">

<h1 id="step3-reset-CSS-並設定-common-CSS"><a href="#step3-reset-CSS-並設定-common-CSS" class="headerlink" title="step3: reset CSS 並設定 common CSS"></a>step3: reset CSS 並設定 common CSS</h1><h1 id="step4-開始切版"><a href="#step4-開始切版" class="headerlink" title="step4: 開始切版"></a>step4: 開始切版</h1><h2 id="第一小時紀錄進度-4-30"><a href="#第一小時紀錄進度-4-30" class="headerlink" title="第一小時紀錄進度(4:30)"></a>第一小時紀錄進度(4:30)</h2><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/01hr.png" class="">

<h2 id="第二小時紀錄進度-6-30"><a href="#第二小時紀錄進度-6-30" class="headerlink" title="第二小時紀錄進度(6:30)"></a>第二小時紀錄進度(6:30)</h2><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/02hr.png" class="">

<h2 id="第三小時紀錄進度-7-30"><a href="#第三小時紀錄進度-7-30" class="headerlink" title="第三小時紀錄進度(7:30)"></a>第三小時紀錄進度(7:30)</h2><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/03hr.png" class="">

<p>沒什麼進度，遇到了search icon換位置的問題，<br>因為上方的按鈕都用絕對定位，但原本將search icon放在一個div.function裏頭，這個div也是絕對定位，導致search icon無法參考頁面最左上角問題(會去參考到div.function)，所以將他移出div.function，才可以參考navbar位置定位，之後畫面縮放，用grid將各個元素位置放進去即可</p>
<p>休息半小時</p>
<h2 id="第四小時紀錄進度-9-00"><a href="#第四小時紀錄進度-9-00" class="headerlink" title="第四小時紀錄進度(9:00)"></a>第四小時紀錄進度(9:00)</h2><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/04hr.png" class="">
<p>還是沒什麼進度，碰到漢堡排點空白處會無法展開menu，後來發現是因為使用了flex box,父層的label變成緊貼LOGO前面，後來研究半天，要先把它換成display: block，然後設定絕對位置到左上角，子層的span線條就會跟著移動，再設定子層為position: relative，偽元素::before ::after就可以調整成absolute後移動位置。</p>
<h2 id="第五小時紀錄進度-10-00"><a href="#第五小時紀錄進度-10-00" class="headerlink" title="第五小時紀錄進度(10:00)"></a>第五小時紀錄進度(10:00)</h2><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/04hr.png" class="">
<p>比較有進度了，目前做到排列T畜產品中，過程中碰到照片超出block，但使用overflow:hidden無法隱藏，後來發現是要設定在block不是設定在圖片上。</p>
<h2 id="第六小時紀錄進度-11-00"><a href="#第六小時紀錄進度-11-00" class="headerlink" title="第六小時紀錄進度(11:00)"></a>第六小時紀錄進度(11:00)</h2><img src="/2021/09/15/S2-%E5%88%87%E7%89%88%E7%B7%B4%E7%BF%92-T%E6%81%A4%E5%95%86%E5%BA%97/05hr.png" class="">
<p>遇到的問題是在衣服照片hover時，要用一個block把兩張圖包起來，然後要疊兩層圖，一張圖不需要設定position，，一張是position:absolute，這時候不需要設定position的這張圖要比設定絕對定位這張來得小，這樣父層才可以設定高度是auto，隨著子元素圖片放大縮小，但是如果放大張的，那小張的那張會蓋不過大張的底圖。父層會根據大張的那張放大縮小。</p>
<h2 id="第七八小時記錄進度-1-00"><a href="#第七八小時記錄進度-1-00" class="headerlink" title="第七八小時記錄進度(1:00)"></a>第七八小時記錄進度(1:00)</h2><p>完成!<br>最後footer的元素流動一直搞不定，搞半天後來才發現是自己不小心設定到flex box，但有一個重點要在一次提醒自己並且記清楚，block屬性下的子元素，每多一個元素一定都會自動換行，不需要設定其他CSS屬性，若元素不希望他換行，可以設定display: inline-block; 下個元素就不會換行了，若突然他沒換行，表示父元素絕對有設定到其他display屬性。</p>
<p>另外在最下方的input欄，學到一個新的函式value，calc( value - value)：<br>此 calc()函數用一個表達式作為它的參數，用這個表達式的結果作為值。這個表達式可以是任何如下操作符的組合，採用標準操作符處理法則的簡單表達式。</p>
<p>+<br>加法。<br>-<br>減法。<br>*<br>乘法，乘數中至少有一個是 <number>。<br>/<br>除法，除數（/ 右面的數）必須是 <number>。<br>表達式中的運算對象可以使用任意 <length> 值。如果你願意，你可以在一個表達式中混用這類值的不同單位。在需要時，你還可以使用小括號來建立計算順序。</p>
<p>input欄位的長度，依整體最大寬度的50% - 固定長度，來控制input欄位隨視窗縮放時調整大小。</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>CSS</tag>
        <tag>切版</tag>
      </tags>
  </entry>
</search>
