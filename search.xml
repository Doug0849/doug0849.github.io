<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git Bash基本指令操作</title>
    <url>/2021/06/11/GitBash%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Git-Bash基本操作"><a href="#Git-Bash基本操作" class="headerlink" title="Git Bash基本操作"></a>Git Bash基本操作</h1><span id="more"></span>

<h2 id="當前資料夾新建一個資料夾"><a href="#當前資料夾新建一個資料夾" class="headerlink" title="當前資料夾新建一個資料夾"></a>當前資料夾新建一個資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir [資料夾名稱]</span><br></pre></td></tr></table></figure>

<h2 id="當前資料夾建立一個檔案"><a href="#當前資料夾建立一個檔案" class="headerlink" title="當前資料夾建立一個檔案"></a>當前資料夾建立一個檔案</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch [檔案名稱.副檔名]</span><br></pre></td></tr></table></figure>

<h2 id="顯示當前資料夾檔案-list"><a href="#顯示當前資料夾檔案-list" class="headerlink" title="顯示當前資料夾檔案 (list)"></a>顯示當前資料夾檔案 (list)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure>

<h2 id="顯示目前資料夾路徑-print-working-directory"><a href="#顯示目前資料夾路徑-print-working-directory" class="headerlink" title="顯示目前資料夾路徑 (print working directory)"></a>顯示目前資料夾路徑 (print working directory)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pwd </span><br></pre></td></tr></table></figure>

<h2 id="移動到資料夾-change-directory"><a href="#移動到資料夾-change-directory" class="headerlink" title="移動到資料夾 (change directory)"></a>移動到資料夾 (change directory)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd [資料夾名稱]</span><br></pre></td></tr></table></figure>

<h2 id="回到上一層資料夾"><a href="#回到上一層資料夾" class="headerlink" title="回到上一層資料夾"></a>回到上一層資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ..</span><br></pre></td></tr></table></figure>

<h2 id="用檔案總管開啟當前資料夾"><a href="#用檔案總管開啟當前資料夾" class="headerlink" title="用檔案總管開啟當前資料夾"></a>用檔案總管開啟當前資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ start .</span><br></pre></td></tr></table></figure>

<h2 id="用檔案總管開啟父層資料夾"><a href="#用檔案總管開啟父層資料夾" class="headerlink" title="用檔案總管開啟父層資料夾"></a>用檔案總管開啟父層資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ start ..</span><br></pre></td></tr></table></figure>

<h2 id="刪除檔案"><a href="#刪除檔案" class="headerlink" title="刪除檔案"></a>刪除檔案</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm [檔案名稱.副檔名]</span><br></pre></td></tr></table></figure>

<h2 id="刪除資料夾-r-recusive-是递归的意思"><a href="#刪除資料夾-r-recusive-是递归的意思" class="headerlink" title="刪除資料夾 (-r recusive 是递归的意思)"></a>刪除資料夾 (-r recusive 是递归的意思)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -r [資料夾名稱]</span><br></pre></td></tr></table></figure>

<h2 id="删除一个文件夹，-r-recursive-是遞迴的意思-，-先刪除資料夾裡內容再刪除資料夾"><a href="#删除一个文件夹，-r-recursive-是遞迴的意思-，-先刪除資料夾裡內容再刪除資料夾" class="headerlink" title="删除一个文件夹， r (recursive 是遞迴的意思)， 先刪除資料夾裡內容再刪除資料夾"></a>删除一个文件夹， r (recursive 是遞迴的意思)， 先刪除資料夾裡內容再刪除資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -r</span><br></pre></td></tr></table></figure>

<h2 id="用編輯器開啟當前資料夾"><a href="#用編輯器開啟當前資料夾" class="headerlink" title="用編輯器開啟當前資料夾"></a>用編輯器開啟當前資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ code .</span><br></pre></td></tr></table></figure>

<h2 id="用編輯器開啟父層資料夾"><a href="#用編輯器開啟父層資料夾" class="headerlink" title="用編輯器開啟父層資料夾"></a>用編輯器開啟父層資料夾</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ code ..</span><br></pre></td></tr></table></figure>

<h2 id="清空畫面所有訊息-快捷鍵ctrl-l"><a href="#清空畫面所有訊息-快捷鍵ctrl-l" class="headerlink" title="清空畫面所有訊息 (快捷鍵ctrl + l)"></a>清空畫面所有訊息 (快捷鍵ctrl + l)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ reset</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git版本控制語法使用</title>
    <url>/2021/06/19/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Git 版本控制語法筆記</p>
<span id="more"></span>

<h1 id="git基本操作篇"><a href="#git基本操作篇" class="headerlink" title="git基本操作篇"></a>git基本操作篇</h1><h2 id="git初始化"><a href="#git初始化" class="headerlink" title="git初始化"></a>git初始化</h2><p>使用Git必須要在你要管理的資料夾根部路初始化，使用Git終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="git-clone，從遠端複製到本地"><a href="#git-clone，從遠端複製到本地" class="headerlink" title="git clone，從遠端複製到本地"></a>git clone，從遠端複製到本地</h2><p>複製一個遠端倉庫資料到當地，會複製所有內容，包含版本控制紀錄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>將<strong>新增</strong>或<strong>修改</strong>文件添加到文件暫存區</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure>

<p>添加一個或多個文件到暫存區：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<p>添加指定目錄到暫存區，包括子目錄：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

<p>添加當前目錄下<strong>所有變動</strong>的文件到暫存區：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>接著可以查看文件狀態，已加入暫存區，或不在暫存區</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>將檔案加入到暫存區後，要使用git commit來發布修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure>
<p>message，可以寫更改的備註，通常短而簡潔。<br>因為每次的改動，也不要太多太大量，保持習慣有小改動就發布git commit做紀錄，<br>方便未來有問題時回退或讓人容易了解改動。</p>
<p>若不想將暫存區全部推上可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>

<h3 id="修改最後一次commit內容"><a href="#修改最後一次commit內容" class="headerlink" title="修改最後一次commit內容"></a>修改最後一次commit內容</h3><p>總是會不小心打錯字，或語意不清楚，希望重新修改commit的內容，但又不想退回版本時，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend --no-edit -m &#x27;message&#x27;</span><br></pre></td></tr></table></figure>
<p>git 就會直接修改最後一次的 commit，而不會增加新的 commit。(版本號碼會變，但發布時間不會變動)</p>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>git reset 命令語法格式如下：</p>
<p>git reset [HEAD]<br>–mixed 為默認，可以不用帶該參數，用於重置暫存區的文件與上一次的提交(commit)保持一致，工作區文件內容保持不變。</p>
<p>git reset  [commit版本號] </p>
<p>範例：<br>假設有三個版本<br><strong>commit HEAD1 [當前]</strong><br>commit HEAD2<br>commit HEAD3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log # 先查看版本，目前當前commit後面標示 HEAD -&gt; [branch]</span><br><span class="line">git reset HEAD^            # 可以回退所有內容到上一個版本[HEAD2]，工作區保持現況，但把所有文件退回到暫存區，並且可以查看跟HEAD3版本差異</span><br><span class="line">git reset HEAD^ hello.php  # 回退 hello.php 文件的版本到上一個版本  </span><br><span class="line">git reset  052e           # 回退到指定版本 指定commit 版本號</span><br></pre></td></tr></table></figure>

<p>查看遠端倉庫 git remote -v<br>新增遠端倉庫 git remote add<br>推送至遠端repository：git push [遠程主機名] [本地分支:遠程分枝名]，如果遠程分枝名跟本地分枝名一樣可以省略</p>
<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>刪除檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm [file]</span><br></pre></td></tr></table></figure>

<p>將檔案僅從暫存區移除，但還是保留此檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>新增遠程倉庫[Repo]：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>

<p>顯示所有遠程倉庫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v </span><br></pre></td></tr></table></figure>

<p>顯示某個遠程倉庫訊息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show [shortname]</span><br><span class="line">* remote https://github.io/doug0849/doug0849.github.io</span><br><span class="line">  Fetch URL: https://github.io/doug0849/doug0849.github.io</span><br><span class="line">  Push  URL: https://github.io/doug0849/doug0849.github.io</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Local ref configured for &#x27;git push&#x27;:</span><br><span class="line">    master pushes to master (local out of date)</span><br></pre></td></tr></table></figure>

<p>刪除定義好的遠程倉庫連結</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm [shortname]</span><br></pre></td></tr></table></figure>

<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>假設今天我把檔案上傳到了Github，但發現有個小錯誤之類的，然後我直接在github網頁上改動了，這時候Github倉庫版本資料就和本地端不同了，<br>這時候要先使用 git fetch把遠端倉庫的數據抓下來比對(只對數據做比較，不抓檔案)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch [shortname]</span><br><span class="line"></span><br><span class="line">得到以下回應</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From github.com:tianqixin/runoob-git-test</span><br><span class="line">   0205aab..febd8ed  master     -&gt; origin/master</span><br></pre></td></tr></table></figure>

<p>可以看到最後一行 0205aab master -&gt; origin/master<br>意思是 本地的master分支 與 遠端origin這個倉庫的 master 不一樣，有更新。</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>之後可以使用git merge來<strong>合併資料</strong>到<strong>本地當前分支</strong>，<br>git merge也可以用來<strong>合併本地分支</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [shortname]/[branch]</span><br></pre></td></tr></table></figure>

<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>其實git pull就是  git fetch + git merge</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;遠程主機名&gt; &lt;遠程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>將遠程主機 origin 的 master 分支拉取過來，與本地的 branch 分支合併。<br>更新操作範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master:branch # 如果遠程分支是與當前分支是同樣的話，則冒號後面的部分可以省略。</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>git push 用來將本地的分支所有版本上傳到遠程並合併。</p>
<p>命令格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;遠程主機名&gt; &lt;本地分支名&gt;:&lt;遠程分支名&gt;  # 如果本地分支名與遠程分支名相同，則可以省略冒號：</span><br><span class="line">git push &lt;遠程主機名&gt; &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>如果要刪除遠端主機的分支可以使用 –delete 參數，以下指令表示刪除 origin 主機的 master 分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete master</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="git-分支管理"><a href="#git-分支管理" class="headerlink" title="git 分支管理"></a>git 分支管理</h1><p>使用分支就可以從開發主線上分離開來，然後在不影響主線的同時繼續工作。<br>所以當再開發任何作業的時候</p>
<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [name] # 創建分枝</span><br><span class="line">git branch # 查詢分枝</span><br><span class="line">git branch -d [name] # 刪除分枝</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [name] # 切換分枝</span><br></pre></td></tr></table></figure>

<h2 id="git-merge-1"><a href="#git-merge-1" class="headerlink" title="git merge"></a>git merge</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [branch name] # 合併分支</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-Array相關</title>
    <url>/2021/06/09/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-Array%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="陣列操作方式"><a href="#陣列操作方式" class="headerlink" title="陣列操作方式"></a>陣列操作方式</h1><h2 id="map"><a href="#map" class="headerlink" title=".map"></a>.map</h2><p>.map 會把原本的物件，會依造函式內容將每一個物件做操作後重新創造出一個新物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass a function to map</span></span><br><span class="line"><span class="keyword">const</span> map1 = array1.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map1);</span><br><span class="line"><span class="comment">// expected output: Array [2, 8, 18, 32]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title=".filter"></a>.filter</h2><p>.filter(設定條件函示) 是把一個陣列物件裡面符合條件的選出來，不符合的剃除，然後產生一個新的陣列物件，不影響原本陣列物件</p>
<h2 id="find"><a href="#find" class="headerlink" title=".find"></a>.find</h2><p>.find(設定條件函示) 是把一個陣列物件裡面，第一個符合條件的物件選出來，就停止了</p>
<h2 id="some"><a href="#some" class="headerlink" title=".some"></a>.some</h2><p>.some(設定條件函示) 是把一個陣列物件裡面，查找是否有相符的，並不回傳整筆符合資料，只回傳true或false，布林值</p>
<h2 id="findIndex"><a href="#findIndex" class="headerlink" title=".findIndex"></a>.findIndex</h2><p>.findIndex(設定條件函示) 回傳項目Index，找不到則回傳-1)</p>
<h2 id="every"><a href="#every" class="headerlink" title=".every"></a>.every</h2><p>.every(設定條件含是) 是對所有的物件做條件比對，最後統一回傳一個true or false，簡而言之不是零分，就是一百分。</p>
<hr>
<h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><p>當用<strong>常數</strong>宣告了一個陣列容器的時候，若要加入物件或其他東西要使用Array.prototype.push()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(INDEX_URL)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    movies.push(...response.data.results)</span><br><span class="line">    renderMovieList(movies)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h2><p>join() 方法會將陣列（或一個類陣列（array-like）物件）中所有的元素連接、合併成一個字串，並回傳此字串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elements.join());</span><br><span class="line"><span class="comment">// expected output: &quot;Fire,Air,Water&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;FireAirWater&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;Fire-Air-Water&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="…展開運算子"><a href="#…展開運算子" class="headerlink" title="…展開運算子"></a>…展開運算子</h2><p>…response.data.results 前面的… 是展開運算子，會將陣列內容展開</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []; <span class="comment">//空陣列，空容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目標：用 push 方法把 movies 從空陣列變成 [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">movies.push(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//傳入 3 個參數：1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">movies.push(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//把陣列用展開運算子打開，打開後就和方法一一模一樣</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//做一個陣列</span></span><br><span class="line">movies.push(...numbers); <span class="comment">//和方法二同樣意思</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>Array</tag>
        <tag>陣列</tag>
        <tag>map</tag>
        <tag>filter</tag>
        <tag>find</tag>
        <tag>some</tag>
        <tag>findIndex</tag>
        <tag>every</tag>
        <tag>Array.prototype.push()</tag>
        <tag>Array.prototype.join()</tag>
        <tag>...展開運算子</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-CSS相關</title>
    <url>/2021/06/09/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-CSS%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="利用toggle來新增或移除元素標籤的class名稱"><a href="#利用toggle來新增或移除元素標籤的class名稱" class="headerlink" title="利用toggle來新增或移除元素標籤的class名稱"></a>利用toggle來新增或移除元素標籤的class名稱</h1><h2 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h2><p>範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">element.classList.toggle(&#x27;sample&#x27;) </span><br></pre></td></tr></table></figure>

<p>element ：某元素，使用document.querySelecrot選出<br>.classList ：某元素的class屬性<br>.toggle(‘.sample’) ：</p>
<p>如果class屬性裡面沒有sample則加上sample，<br>如果class屬性裡面有sample則刪除sample，</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>toggle</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript語法使用-DOM相關</title>
    <url>/2021/06/06/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-DOM%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="JS選擇元素節點方法"><a href="#JS選擇元素節點方法" class="headerlink" title="JS選擇元素節點方法"></a>JS選擇元素節點方法</h1><h2 id="使用基本指令選擇document-querySelector來選擇"><a href="#使用基本指令選擇document-querySelector來選擇" class="headerlink" title="使用基本指令選擇document.querySelector來選擇"></a>使用基本指令選擇document.querySelector來選擇</h2><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span> father </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-sister&quot;</span>&gt;</span> my-sister<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;me&quot;</span>&gt;</span> me </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span>son1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span>son2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son3&quot;</span>&gt;</span>son3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-brother&quot;</span>&gt;</span> my-brother<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>選出class標籤為me的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.me&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="parentElement"><a href="#parentElement" class="headerlink" title="parentElement"></a>parentElement</h2><p>選擇me的父元素和選擇me的父元素的父元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.parentElement   <span class="comment">// 會選擇到&lt;div class=&quot;&quot;father&gt;...&lt;/div&gt;</span></span><br><span class="line">me.parentElement.parentElement   <span class="comment">// 會選擇到&lt;body&gt;...&lt;/body&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="children-i"><a href="#children-i" class="headerlink" title="children[i]"></a>children[i]</h2><p>選擇me的第一個子元素和選擇me的第二個子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.children[<span class="number">0</span>]   <span class="comment">// 會選擇到&lt;div class=&quot;son1&quot;&gt;son1&lt;/div&gt;</span></span><br><span class="line">me.children[<span class="number">1</span>]   <span class="comment">// 會選擇到&lt;div class=&quot;son2&quot;&gt;son2&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="nextElementSibling-amp-previousElementSibling"><a href="#nextElementSibling-amp-previousElementSibling" class="headerlink" title="nextElementSibling &amp; previousElementSibling"></a>nextElementSibling &amp; previousElementSibling</h2><p>選擇me的下一個同層級元素，和選擇me的上一個同層級元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.nextElementSibling   <span class="comment">//  會選擇到&lt;div class=&quot;my-brother&quot;&gt; my-brother&lt;/div&gt; </span></span><br><span class="line">me.previousElementSibling   <span class="comment">//  會選擇到&lt;div class=&quot;my-sister&quot;&gt; my-sister  &lt;/div&gt; </span></span><br></pre></td></tr></table></figure>

<h2 id="firstElementChild-lastElementChild"><a href="#firstElementChild-lastElementChild" class="headerlink" title="firstElementChild, lastElementChild"></a>firstElementChild, lastElementChild</h2><p>選擇me的第一個子元素，選擇me的最後一個子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">me.firstElementChild   <span class="comment">// 會選擇到&lt;div class=&quot;son1&quot;&gt;son1&lt;/div&gt;</span></span><br><span class="line">me.lastElementChild   <span class="comment">// 會選擇到&lt;div class=&quot;son3&quot;&gt;son3&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h1><p>Node.appendChild(sample)<br>是將一個節點加到指定的父節點下面所有子節點的最後面。<br>如果sample這個節點已經存在document樹當中，那 appendChild(sample) 會將原本sample這個節點位置移動到node這個新的位置（不需要事先移除要移動的節點）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TodoList Delete and check</span></span><br><span class="line">list.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.target;</span><br><span class="line">  <span class="keyword">const</span> parentElement = target.parentElement</span><br><span class="line">  <span class="comment">//按下垃圾桶，將項目刪除</span></span><br><span class="line">  <span class="keyword">if</span> (target.classList.contains(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">    parentElement.remove();</span><br><span class="line">    <span class="comment">//Todo中項目按下名字，將項目移置done中</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.tagName === <span class="string">&quot;LABEL&quot;</span>) &#123;</span><br><span class="line">    doneList.appendChild(parentElement) <span class="comment">//會移到doneList中，並且刪除原本自己位置的標籤</span></span><br><span class="line">    target.classList.toggle(<span class="string">&quot;checked&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// DoneList Delete and back</span></span><br><span class="line">doneList.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.target;</span><br><span class="line">  <span class="keyword">const</span> parentElement = target.parentElement</span><br><span class="line">  <span class="comment">//按下垃圾桶，將項目刪除</span></span><br><span class="line">  <span class="keyword">if</span> (target.classList.contains(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">    parentElement.remove();</span><br><span class="line">    <span class="comment">//Done中項目按下名字，將項目移置Todo中</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.tagName === <span class="string">&quot;LABEL&quot;</span>) &#123;</span><br><span class="line">    list.appendChild(parentElement) <span class="comment">//會返回移到List中，並且刪除原本自己位置的標籤</span></span><br><span class="line">    target.classList.toggle(<span class="string">&quot;checked&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="利用matches或classList-contains來比對目標對象"><a href="#利用matches或classList-contains來比對目標對象" class="headerlink" title="利用matches或classList.contains來比對目標對象"></a>利用matches或classList.contains來比對目標對象</h1><h2 id="matches"><a href="#matches" class="headerlink" title=".matches"></a>.matches</h2><p>target.matches(‘.class’或’#id’) 轉譯：目標對象元素是否含有.class或#id，回傳true或fals</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除函式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeTodo</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (target.matches(<span class="string">&quot;.delete&quot;</span>)) &#123;</span><br><span class="line">    target.parentElement.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="classList-contains"><a href="#classList-contains" class="headerlink" title=".classList.contains"></a>.classList.contains</h2><p>或是也可以用<br>target.classList.contains(‘string’) 轉譯：目標對象元素class屬性裡是否含有’string’值，回傳true或fals</p>
<hr>
<h2 id="關於dataset"><a href="#關於dataset" class="headerlink" title="關於dataset"></a>關於dataset</h2><p>可以在元素標籤上設定data資料，在使用JS去取得點擊目標元素上的dataset資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1234567890&quot;</span> <span class="attr">data-user</span>=<span class="string">&quot;ac-genie&quot;</span> <span class="attr">data-date-of-birth</span>&gt;</span>AC Genie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後我們可以呼叫 dataset. 來取得這些屬性的值，你會發現這些值的型態都是字串*：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#user&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.user)</span><br><span class="line"><span class="comment">//ac-genie</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.id)</span><br><span class="line"><span class="comment">//1234567890</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.dateOfBirth)</span><br><span class="line"><span class="comment">//(空字串)</span></span><br></pre></td></tr></table></figure>

<h2 id="更改元素style"><a href="#更改元素style" class="headerlink" title="更改元素style"></a>更改元素style</h2><p>我們常用classList.add來增加元素的樣式或改變樣式，但若本身已經設定好樣式，只是要更改樣式其中的屬性的話可以使用下面此方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">el.style.display = <span class="string">&quot;none&quot;</span>; <span class="comment">// 使用style.(要變更的屬性名稱) = &quot;賦值&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
        <tag>querySelector</tag>
        <tag>parentElement</tag>
        <tag>children</tag>
        <tag>nextElementSibling</tag>
        <tag>firstElementChild</tag>
        <tag>lastElementChild</tag>
        <tag>appendChild</tag>
        <tag>matches</tag>
        <tag>contains</tag>
        <tag>dataset</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript語法使用-Function相關</title>
    <url>/2021/06/09/javascript%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8-Function%E7%9B%B8%E9%97%9C/</url>
    <content><![CDATA[<h2 id="關於-function"><a href="#關於-function" class="headerlink" title="關於 function"></a>關於 function</h2><p>這篇由W3HEXSCHOOL發布的有關function的特性的講解可以參考<br><a href="https://w3c.hexschool.com/blog/cb6e361">連結在這</a></p>
<span id="more"></span>
<p>MDN 的簡短說明</p>
<blockquote class="pullquote"><p>Function 建構函式可建立一個新的 Function 物件。在 JavaScript 中，所有的函式實際上都是 Function 物件。</p>
</blockquote>

<p>Kuro 大大在先前 IT 鐵人賽 - <a href="https://ithelp.ithome.com.tw/articles/10191549">Day 10 函式 Functions 的基本概念 中也有提到</a></p>
<blockquote class="pullquote"><p>在前面介紹變數型別的時候曾經說過，除了基本型別以外的都是物件。<br>當我們透過 typeof 去檢查一個「函式 (function) 」的時候，雖然你會得到 “function” 的結果，<br>讓你以為 function 也是 JavaScript 定義的一種型別，但實際上它仍屬於 Object 的一種。<br>你可以把它想像成是一種可以被呼叫 (be invoked) 的特殊物件 (值)。</p>
</blockquote>

<h2 id="IIFE-立即執行函式"><a href="#IIFE-立即執行函式" class="headerlink" title="IIFE (立即執行函式)"></a>IIFE (立即執行函式)</h2><p>接下來談談 IIFE 全名為 Immediately Invoked Function Expression，意思就是定義完這個函式後馬上就執行的意思，此外它又可以稱之為 Self-Executing Anonymous Function，中文意思是自我執行匿名函式，而 IIFE 的好處是可以避免汙染到全域(global)。</p>
<p>IIFE 的話則是可以改用箭頭函式撰寫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>箭頭函式的使用注意</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filteredMovies = []</span><br><span class="line">filteredMovies = movies.filter( <span class="function"><span class="params">movie</span> =&gt;</span> movie.title.toLowerCase().includes(keyword)) <span class="comment">// OK，前面參數沒帶小括號可以，後面沒帶花括號也可以</span></span><br><span class="line">filteredMovies = movies.filter( <span class="function">(<span class="params">movie</span>) =&gt;</span> movie.title.toLowerCase().includes(keyword)) <span class="comment">// OK，前面參數沒帶小括號可以，後面沒帶花括號也可以</span></span><br><span class="line">filteredMovies = movies.filter( <span class="function"><span class="params">movie</span> =&gt;</span> &#123; <span class="keyword">return</span> movie.title.toLowerCase().includes(keyword)&#125;) <span class="comment">// OK，前面參數帶小括號可以，後面沒帶花括號要加上return</span></span><br><span class="line">filteredMovies = movies.filter( <span class="function">(<span class="params">movie</span>) =&gt;</span> &#123; <span class="keyword">return</span> movie.title.toLowerCase().includes(keyword)&#125;) <span class="comment">// OK，前面參數沒帶小括號可以，後面沒帶花括號要加上return</span></span><br><span class="line"><span class="comment">// 結論，有花括要帶上return</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>function</tag>
        <tag>函式</tag>
        <tag>IIFE</tag>
      </tags>
  </entry>
  <entry>
    <title>跳軌換跑道關於學習寫CODE這件事</title>
    <url>/2021/07/18/change-job-about-learning-programing/</url>
    <content><![CDATA[<blockquote><p>　　終於在2021年5月底的時候，下定決心要轉換跑道，關於開始走上轉職成為網頁工程師的路上。</p>
</blockquote>
<span id="more"></span>
<p>　　後來開始在網路上查找相關的資訊，思考要如何學習以及入門的時候，搜尋到了AC CAMP，看完了簡介沒兩分鐘馬上決定從這個地方開始出發。</p>
<p>　　其實本身自己也算是完全沒有任何關於寫code的經驗，所以剛開始是加入學期一，發現AC 的課綱內容真的寫得很清楚明瞭，對我來說我覺得真的不困難，所以很快的就把所有學期一的預讀內容和練習完成，然後還迫不及待的馬上進入了學期二的預讀階段，最後在六月底開班前完成了學期二之一的預讀，也接著開啟學期二之二的預讀了!</p>
<p>　　在寫這篇文章時，距離下定決心轉換跑道後大概經過了一個半月左右的時間，從零基礎的我，到完成了學期二之一，學了非常多的新知識，新觀念，以及新技術，這都是一個半月前自己沒有想像過的，而在一步步完成這些階段性的課程後，越來越據信心自己能夠成功轉職。</p>
<p>　　這當中真的非常謝謝AC 的所有教練以及助教，在過去幾周當中，課程內容不僅僅是教你如何認識code寫code，還有很多的關於學習的技巧、心態的調整、學長姐的經驗分享…好多好多，這些真的都讓我受益匪淺，而且AC的學習環境真的設計的很棒，每個單元都有相對的關係，一步步建立起相關的知識、一步步的加深練習難度且不斷地重複操作熟悉，然後又有點像是在玩遊戲一樣，當遇到打不贏的BOSS還有助教可以求救幫助，最後破關斬將所帶來的成就感也讓自己信心大增，當中建立起自信心也不再那麼擔心害怕自己沒辦法成功轉職，保持著良好的心態持續的學習，相信自己能夠達到目標。</p>
<p>　　對於下一個階段的學習，希望自己能夠保持著學習動力繼續完成所有挑戰，而目前也已經在預讀學期二之二了，課程難度真的有感提升超多！期望自己能夠在八月分開課之前完成所有的預讀與練習。</p>
]]></content>
      <categories>
        <category>日記</category>
        <category>轉職</category>
      </categories>
      <tags>
        <tag>轉職</tag>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>預讀學期2-2_S3_A12-電影清單加碼功能-作業心得</title>
    <url>/2021/07/30/preview-s2-2-A12-movie-list/</url>
    <content><![CDATA[<p><strong><a href="https://doug0849.github.io/movielist-exercise/">練習完成檔案連結</a></strong></p>
<p>　　之前一直沒有寫相關的作業心得筆記，一方面是覺得難度不高，一方面覺得操作幾次就很熟練了，所以就很懶惰…但進入到學期2-2後，光是S2的製作電影清單，突然感覺難度一下提升超級多，很多內容不是一次兩次就能夠記起來且熟悉，而且函式的拆解跟邏輯複雜度上也提升相當多，演算法也來到了百行之多，這時才發現真的很難一下吸收，所以決定開始來寫學習、作業、技術相關筆記來加深自己的記憶及熟練度。</p>
<span id="more"></span>

<p>任務<br>這次的任務是要把S2製作的My Movie List做進化，且要滿足以下幾個功能</p>
<ol>
<li>要新增一組功能按鈕，可以將畫面呈現為列表模式及卡片模式。</li>
<li>畫面能夠順利在 list 和 card 模式間來回切換。</li>
<li>不能影響到原有功能（尤其是 More、收藏按鈕、分頁功能要正常運作）</li>
</ol>
<h2 id="Step-1：將按鈕樣式置入"><a href="#Step-1：將按鈕樣式置入" class="headerlink" title="Step 1：將按鈕樣式置入"></a>Step 1：將按鈕樣式置入</h2><p>第一步老樣子，先從HTML下手吧！先將Font Awesome按鈕的樣式置入頁面中，並且調整至適當的位置。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step1.jpg" class="" title="step1.jpg">
<center>加入icon</center>

<p>說明：<br>要先將Font Awesome的JS先置入head裏頭。之後在Font Awesome裡尋找相關icon的class碼，安排它在Html的位置，也要適時的調整Row或col（Boostrap開發模式），最後別忘了給他們的父層，以及各自都加上屬於自己的id。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step2.jpg" class="" title="step2.jpg">
<center>將Font Awesome的JS先置入head裏頭</center>

<img src="/2021/07/29/preview-s2-2-A12-movie-list/step3.jpg" class="" title="step3.jpg">
<center>安排icon在html的位置</center>

<hr>
<h2 id="Step-2：清單模式在畫面上呈現的樣子"><a href="#Step-2：清單模式在畫面上呈現的樣子" class="headerlink" title="Step 2：清單模式在畫面上呈現的樣子"></a>Step 2：清單模式在畫面上呈現的樣子</h2><img src="/2021/07/29/preview-s2-2-A12-movie-list/step4.jpg" class="" title="step4.jpg">
<center>清單模式</center>

<p>只要先寫出一列的樣板模式即可，因為之後要用JS把設定好的HTML格式資料至入到畫面上。</p>
<hr>
<h2 id="Step-3：改造function"><a href="#Step-3：改造function" class="headerlink" title="Step 3：改造function"></a>Step 3：改造function</h2><p>首先我們可以複製renderMovieList這個函式，並將它命名為renderMoviesList2之後方便做測試，基本上函式內的邏輯都一樣，只要將新寫的HTML格式資料帶到到rawHTML即可。所以去HTML把你剛剛寫好的格式放進rawHTML吧，記得要把電影名稱或相關要顯示的資料，替換成正確的參數。</p>
<p>之後可以將最下方renderMovieList改成renderMovieList2，來看看是不是正確顯示在螢幕上。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step5.jpg" class="" title="step5.jpg">
<center>rawHTML的template literal置入新的格式</center>>

<img src="/2021/07/29/preview-s2-2-A12-movie-list/step4.jpg" class="" title="step4.jpg">
<center>成功畫面</center>

<hr>
<h2 id="Step-4：新增監聽器"><a href="#Step-4：新增監聽器" class="headerlink" title="Step 4：新增監聽器"></a>Step 4：新增監聽器</h2><p>在Step 1置入icon的時候，就將自己和父層都設定好了id。<br>所以先回到上頭設定常數，將各自的位置選擇出來。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step6.jpg" class="" title="step6.jpg">
<center>把各自按鈕位置選擇出來</center>

<p>然後在父層掛上監聽器。<br>這邊我設定的父層為btnShowStyle</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step7.jpg" class="" title="step7.jpg">
<center>btnShowStyle新增監聽器</center>

<ol>
<li>因為在按鈕上有設置a標籤，所以要先取消超連結本上的預設動作。</li>
<li>加入判斷式，確定是選擇到哪一個按鈕。</li>
<li>接著變更圖案本身的顏色樣式，因為是使用boostrap系統，所以要將各自的classList做新增或刪除。(使用狀態下為藍色primary，非使用狀態下為灰色secondary)</li>
<li>最後面的renderMovieList記得改成renderMovieList2</li>
</ol>
<p>最後來檢查按鈕是否有成功，此時按下按鈕，按鈕要會變色，且會變換顯示的模式</p>
<hr>
<h2 id="Step-5：優化顯示模式的語法。"><a href="#Step-5：優化顯示模式的語法。" class="headerlink" title="Step 5：優化顯示模式的語法。"></a>Step 5：優化顯示模式的語法。</h2><p>由於現在將兩個不同的顯示方式分成兩個函式來寫，會增加後面管理程式碼的困擾，因為<strong>只要碰到任何跟渲染畫面”renderMovieList”的時候，都要去判斷要用renderMovieList或是renderMovieList2</strong>，包含查找功能，換頁功能都有用到renderMovieList這個函式，為了不去更改原有的程式碼，所以決定把這兩個函式合併。</p>
<p>先將renderMovieList2內的程式碼先搬到renderMovieList後面，<br>接著就是加入判斷式，</p>
<p>這邊思考後，我的想法是先在最上頭新增一個變數 showStyle作為信號開關，</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step8.jpg" class="" title="step8.jpg">
<center>showStyle作為信號開關</center>

<p>接著在renderMovieList加上判斷式，若showStyle等於0時，使用cards的顯示方式，否則就顯示清單模式。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step9.jpg" class="" title="step9.jpg">
<center>加上判斷式</center>

<p>接著回到顯示模式監聽器，加入當選則卡片時showStyle重新賦值為0，選擇清單時，showStyle重新賦值為1。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step10.jpg" class="" title="step10.jpg">
<center>依照選擇不同的按鈕，重新賦值showStyle</center>


<p>最後檢查一遍把確定所有的renderMovieList不要有出現之前寫的renderMovieList2。</p>
<p>現在頁面已經可以順利切換了，而且也優化了程式碼，未來若要新增第三種第四種顯示方式，只要在renderMovieList內新增新的判斷及格式，還有在樣式顯示監聽器內加入新的判斷就可以了。</p>
<p>目前原有的功能也要都能夠正常運作，只要選定一種顯示方式，不管用搜尋、換頁都會保持原有的顯示方式。</p>
<p>但是發現一個小問題，<strong>當我在卡片狀態下然後在第三頁時，當我按下變換樣式顯示頁面內容會回到第一頁，應該要顯示當頁才對。</strong></p>
<p>這時候回頭檢視所有的renderMovieList帶入的引數發現，全部都帶入了<strong>getMoviesByPage(1)<strong>，所以不管搜尋、換頁，</strong>只要碰到getMoviesByPage(1)帶入的是1時，全都會回到第一頁。</strong></p>
<hr>
<h2 id="Step-6：修正所有的getMoviesByPage-1"><a href="#Step-6：修正所有的getMoviesByPage-1" class="headerlink" title="Step 6：修正所有的getMoviesByPage(1)"></a>Step 6：修正所有的getMoviesByPage(1)</h2><p>除了搜尋監聽器內的getMoviesByPage(1)。</p>
<p>回到最上方設定一個新的變數page 且賦予值 1。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step11.jpg" class="" title="step11.jpg">
<center>新變數page 賦予值 1</center>

<p>再來將所有的getMoviesByPage的引數帶入page<br>getMoviesByPage(page)<br>這邊要注意，**除了搜尋監聽器內的getMoviesByPage(1)**，不能修改。</p>
<p>然後在回到之前頁碼生成的函式內，將原本的定義page為變數的let拿掉。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step12.jpg" class="" title="step12.jpg">
<center>原本的 let page = 的let拿掉</center>

<p>現在只要切換頁面就會給page重新賦值，page被確定下來，就算換樣式，也還是會保持在原本該顯示的頁數了。</p>
<p><strong>除了搜尋監聽器內的getMoviesByPage(1)不能改原因</strong><br>因為現在<strong>page在globle的狀態</strong>，假設一開始先切換到第三頁，page值此時會被賦予3，搜尋監聽器內的getMoviesByPage()引數如果是page的情況下’’renderMovieList(getMoviesByPage(page))’’，這時候搜尋任何關鍵字，搜尋結果是少於三頁的情況下，會發現此刻畫面會變一片空白沒有資料，那是因為我們變成渲染頁數變成第三頁，但是結果少於三頁，所以當然就沒有任何電影顯示出來。<br>所以再次強調</p>
<p><strong>除了搜尋監聽器內的getMoviesByPage(1)，不能修改。</strong><br><strong>除了搜尋監聽器內的getMoviesByPage(1)，不能修改。</strong><br><strong>除了搜尋監聽器內的getMoviesByPage(1)，不能修改。</strong></p>
<hr>
<ol>
<li><del>已完成任務 (已完成的畫刪除線)</del></li>
<li><del>要新增一組功能按鈕，可以將畫面呈現為列表模式及卡片模式。</del></li>
<li><del>畫面能夠順利在 list 和 card 模式間來回切換。</del></li>
<li><del>不能影響到原有功能（尤其是 More、收藏按鈕、分頁功能要正常運作）<br>由於程式碼篇幅頗長，請運用 description 欄位說明新增的功能，幫助助教能有效注意到重點。在程式碼中也請運用註解來提示助教！</del></li>
</ol>
<h2 id="已完成的視覺與使用者動線驗收重點-已完成的畫刪除線"><a href="#已完成的視覺與使用者動線驗收重點-已完成的畫刪除線" class="headerlink" title="已完成的視覺與使用者動線驗收重點 (已完成的畫刪除線)"></a>已完成的視覺與使用者動線驗收重點 (已完成的畫刪除線)</h2><ol>
<li><del>切換顯示模式時，內容能停留在原本的頁面，不會跳回第一頁</del></li>
<li><del>若使用搜尋後，再切換顯示模式，仍然能正常顯示搜尋結果</del></li>
<li>視覺上能讓使用者知道現在選的是第幾頁、<del>哪個顯示模式</del>、哪些項目有加入收藏</li>
</ol>
<p>看來只剩下最後兩項了，加把勁!</p>
<hr>
<h2 id="Step-7：讓使用者知道現在位在第幾頁。"><a href="#Step-7：讓使用者知道現在位在第幾頁。" class="headerlink" title="Step 7：讓使用者知道現在位在第幾頁。"></a>Step 7：讓使用者知道現在位在第幾頁。</h2><p>隨著改變頁數要改變頁碼的顯示樣式，這代表每當我選了一次頁碼，我勢必要重新渲染一次頁碼，所以表示一定會是從這兩個部分下手</p>
<ol>
<li>renderPaginator(在正確的頁數上改變樣式)</li>
<li>Paginator的監聽器(換頁數就重新render)</li>
</ol>
<p>我們先到Paginator監聽器來，這邊比較容易修改，我們只要在最後加上</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step13.jpg" class="" title="step13.jpg">
<center>新增運算子，及重新渲染頁碼</center>

<p>新增data運算子，因為每次點選換頁按鈕都得重新渲染頁面按鈕，更新顯示正在哪一頁上，所以要看是依filteredMovies來重新渲染頁碼或是movies來重新渲染頁碼，如果搜尋情況下filteredMovies會有資料，將會依搜尋結果的情況下去產生頁碼，若否則會依照原本movies的資料長度去產生頁碼。</p>
<p>再來我們接著修改函式renderPaginator(在正確的頁數上改變樣式)<br>函式當中，<strong>一旦我們置入所有頁碼的HTML格式資料後，我們就可以立刻選取到各li子元素</strong>，而因為globle的page會被更新，此時便可以依照global的page去指出是哪一個li子元素裡的a元素標籤應該要被修改樣式。</p>
<p>paginator.children[0]為第一頁的li標籤<br>paginator.children[0].firstElementChild為li裡面的a標籤<br>paginator.children[0].firstElementChild.classList.add(‘bg-primary’, ‘text-white’)<br>a標籤新增名稱至class內(boostrap改變樣式)</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step14.jpg" class="" title="step14.jpg">
<center>指出正確的元素位置，修改樣式</center>

<p>最後再回到搜尋監聽器上，當搜尋為空白的時候，我們要顯示全部的電影，但別忘了要記得清空filteredMovies,因為filteredMovies現在已經移出到globle當中，也有很多函式都有使用到他，連續操作搜尋下，萬一filteredMovies保留之前的搜尋結果，將會出現顯示錯誤電影資料。<br>最後再補上一個執行產生頁碼函式。</p>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step15.jpg" class="" title="step15.jpg">
<center>記得要清空filteredMovies</center>>

<p>這樣<strong>讓使用者知道現在選的是第幾頁</strong>就大功告成啦!</p>
<hr>
<h2 id="Step-8：顯示哪些項目有加入收藏。"><a href="#Step-8：顯示哪些項目有加入收藏。" class="headerlink" title="Step 8：顯示哪些項目有加入收藏。"></a>Step 8：顯示哪些項目有加入收藏。</h2><p>這大概是所有題目內，我覺得最困擾的一個題目了，邏輯性比較複雜。<br>我思考的邏輯是，先製作一個新的function：</p>
<p>一開始先設定幾個常數：</p>
<ol>
<li>選出所有class為card-title的元素(應該有12個，因為每頁顯示12筆)，並放入panelMovies，之後就可以使用panelMovies[i].innerText來取得畫面上的電影名稱。</li>
<li>將我最愛的電影從locoalStorage取出並從JSON轉成Object，並放入favoriteMoviesList</li>
<li>將favoriteMoviesList使用map製造出一個新的陣列，條件是每一筆電影資料的電影名稱，並放入favoriteMoviesTitle</li>
<li>重複畫面上總共有幾部電影，就重複檢查多少次，for迴圈<br>加入判斷式，若favoriteMoviesTitle裡面含有畫面上第i部的電影名稱，修改”新增至我的最愛按鈕”的顯示樣式。</li>
</ol>
<img src="/2021/07/29/preview-s2-2-A12-movie-list/step16.jpg" class="" title="step16.jpg">
<center>新增一個函式來做已收藏確認</center>

<p>補充說明：</p>
<ol>
<li>第140行，當選擇到元素標籤時，可以使用setAttribute(’string’,’value’)來設定新的標籤屬性，兩個引述都是字串，無屬性值的時候要輸入空字串。</li>
<li>對陣列使用map()，會將陣列中每一個項目，依照條件，產生一組新的陣列</li>
</ol>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN範例說明</a></strong></p>
<p>Array.prototype.map() - JavaScript | MDN<br>The method creates a new array populated with the results of calling a provided function on every element in the calling array. callbackFn Function that is called for every element of arr. Each time callbackFn executes, the returned value is added to newArray.<br>Mozilla</p>
<p>大功告成，完成了所有作業要求了!<br>最後再檢查一遍作業的批改標準吧!<br>詳細的檢查一遍，操作看看，有沒有發現其他的小錯誤，若沒有大致上應該沒有問題啦!</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>setAttribute()</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Node.js及安裝</title>
    <url>/2021/09/10/about-node-js/</url>
    <content><![CDATA[<center><img src="/2021/09/10/about-node-js/1.jpg" class="" title="1.jpg"></center>

<h1 id="Node-js簡介"><a href="#Node-js簡介" class="headerlink" title="Node.js簡介"></a>Node.js簡介</h1><p>　　Node.js是一個JavaScript的執行環境(run-time environment)，以往 JavaScript 只可以在瀏覽器上被執行，但在2009年Node.js被<u><strong>Ryan Dahl</strong></u>開發出來後，當我們在電腦上安裝了 Node.js 就可以在電腦上直接執行副檔名為 .js 的 JavaScript 的檔案。</p>
<span id="more"></span>
<p>　　有了 Node.js，JavaScript 就成為其他的程式語言一樣 (例如：PHP、Python、Ruby、Java) ，擁有能夠開發網路應用程式的能力。有了 Node.js，JavaScript 就可以直接建立、讀取、修改和刪除電腦內的檔案，還可以執行和資料庫連線。 Node.js 也添加了網路應用程式需要的功能，例如作為伺服器處理客戶端發出請求 (request) 並給予回應 (response) 等。</p>
<p>　　<strong>Ryan Dahl</strong>的設計靈感源自Flickr的一款上傳進度欄，在上傳過程中，瀏覽器並不清楚有多少檔案已經傳送到伺服器，除非向伺服器進行查詢，導致瀏覽器不止是要上傳照片，還要詢問伺服器上傳到多少，導致整個變得很慢，所以<strong>Ryan Dahl</strong>想出了一個更簡便的方法，他開始嘗試利用 JavaScript 的特性，使用了當時性能卓越的 Google Chrome JavaScript 引擎 V8 ，打造了 Node.js。</p>
<p>　　Node.js非常擅長<strong>DIRT</strong>(data-intensive real-time) 直接翻譯是「數據密集以及實時」的應用，像是影音串流平台、聊天交友軟體、叫車平台都是需要實時處理大量數據的應用程式。很多知名的網站或是網路應用程式，後台都有使用到Javascript，例如：Paypal,Netflix,Uber。</p>
<h1 id="Node-js安裝"><a href="#Node-js安裝" class="headerlink" title="Node.js安裝"></a>Node.js安裝</h1><p>　　安裝 Node.js 可以直接從 Node.js 的官方網站 <a href="https://nodejs.org/">https://nodejs.org</a> 下載安裝，可是因為實務開發上常常碰到不同專案會使用到不同版本 Node.js ，所以實務上比較常使用的是 Node Version Manager (nvm)，因為他可以簡易的切換Node.js的版本，就省得自己手動刪除再重新安裝，然後無窮無盡的做這件事情。</p>
<p>　　搜尋Nvm(Node Version Manager)，會在Github上出現兩種版本，一種是給MacOS使用，一種是給Windows使用。</p>
<ol>
<li>安裝nvm-windows</li>
</ol>
<p>　　因為我是Windows系統，所以到 <a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a> 的github下載</p>
<img src="/2021/09/10/about-node-js/2.jpg" class="">

<p>　　下載完成後執行安裝程序，一直下一步到安裝完成就好了，但如果要更改安裝路徑，路徑的資料夾名稱不能有空白，不然會有問題。</p>
<p>　　安裝完後打開終端機 (Git Bash)。如果原本終端機已經打開，記得要重開。打開後輸入指令來確定安裝成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nvm version</span><br></pre></td></tr></table></figure>

<img src="/2021/09/10/about-node-js/3.jpg" class="">

<ol start="2">
<li>用nvm安裝Node.js</li>
</ol>
<p>可以先在指令欄內輸入 nvm list available 來查看可以安裝的 Node.js的版本</p>
<img src="/2021/09/10/about-node-js/4.jpg" class="">

<p>建議安裝有寫 <b>LTS (Long Term Support)</b> 的版本，意思是官方會持續維護這個版本比較長一段時間，會比較穩定。</p>
<p>接著輸入 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 14.17.6</span><br></pre></td></tr></table></figure>
<p>就會安裝如圖最新的LTS版本了，安裝完基本上他會自動執行<br>若安裝多個版本，版本切換來切換去久了也會忘記自己安裝過哪些版本，要查詢安裝過那些版本可以輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure>

<p>接著輸入 nvm use</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 17.17.6</span><br></pre></td></tr></table></figure>
<p>使用17.17.6的Node.js，若未來要切換版本，同樣也可以輸入這個指令</p>
<p>若要查看當前使用的版本可以輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<img src="/2021/09/10/about-node-js/5.jpg" class="">

<ol start="3">
<li>在終端機上執行操作JavaScript</li>
</ol>
<p>安裝完Node.js後，就可以輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node</span><br></pre></td></tr></table></figure>
<p>進入node模式<br>接著就能輸入JavaScript的指令了</p>
<img src="/2021/09/10/about-node-js/6.jpg" class="">

<p>按ctrl+c，兩次即可退出node模式<br>另外在終端機複製的指令是 ctrl + insert 貼上是 shift + insert<br>(insert就是方向鍵上面，最左上那一顆)</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>蒐集部落客資料</title>
    <url>/2021/09/18/collect-blog-data/</url>
    <content><![CDATA[<p>由於朋友工作關係，常常需要蒐集各部落客，部落格的名稱，部落客的網址，和主人的email蒐集起來，並且詳列出來後，它可以輕易地一鍵copy，這樣可以省得它每次都要用各自官方的部落格去搜尋相關資料，然後再將這些資料手動貼上。</p>
<span id="more"></span>

<p>看了看這題目，我覺得我應該辦得到! 所以現在就著手來嘗試吧!</p>
<h1 id="第一步：是否有API"><a href="#第一步：是否有API" class="headerlink" title="第一步：是否有API"></a>第一步：是否有API</h1><p>這是我想到的第一件事，所以立刻來實驗，以痞客幫為案例，<br>我立刻搜尋到他們有提供相關API使用，<a href="https://developer.pixnet.pro/#!/">PIXNET api</a><br>然後立刻發現他們有讀取使用者公開資訊! <a href="https://developer.pixnet.pro/#!/doc/pixnetApi/users">在這</a><br>立刻來嘗試一下</p>
<img src="/2021/09/18/collect-blog-data/1.png" class="">
<p>立刻得到了有關使用者名稱以及部落客網址</p>
<h1 id="第二步：問題：不知道作者的ID"><a href="#第二步：問題：不知道作者的ID" class="headerlink" title="第二步：問題：不知道作者的ID"></a>第二步：問題：不知道作者的ID</h1><p>因為朋友起初的希望是能透過引擎搜尋模糊搜尋，也許是輸入中文名，也許是輸入部落格名，然後直接列出相關作者的帳號，部落格名稱，網址，<br>這我遇到的第一個問題，<strong>API沒有提供模糊查詢作者並列出相關資料的清單功能</strong>，<br>所以我換了個想法，是否可以置入GOOGLE的搜尋引擎，輸入關鍵字尋找，並對痞客邦裡的相關資訊進行搜尋，並列出相關部落格，最後讓我來抓取頁面上的資訊。</p>
<p>不管怎樣，先來想辦法放入引擎</p>
<h2 id="置入Google引擎"><a href="#置入Google引擎" class="headerlink" title="置入Google引擎"></a>置入Google引擎</h2><p>後來我找到Google有提供自訂搜尋引擎，可以只針對某些網址進行搜尋<br><a href="https://programmablesearchengine.google.com/cse/create/new">Google Programmable Search</a></p>
<p>順利放進去了，但我發現我無法順利地使用JS來抓取到Google 所產生的新元素…搞了半天…(崩潰)<br>所以我開始嘗試研究，最後發現是網頁生成順序的問題，當瀏覽器在載入網頁時，瀏覽器會先分析這個 HTML 檔案且「由上而下」依序來讀取解析網頁的內容：</p>
<img src="/2021/09/18/collect-blog-data/3.png" class="">
<center>圖片引用自[Kuro Hsu](https://ithelp.ithome.com.tw/articles/10197335?sc=iThomeR)</center>

<p>會發現DOM的形成是在Content Model成行時才出現，所以像google這種工具原件，會在Script讀取完，網頁通通跑完在最後渲染的時候才會出現HTML的元素標籤。<br>所以當我載入我的JS的時候，DOM都還沒形成，根本就抓不到。</p>
<p>因此這個時候就必須要利用 DOMContentLoaded 或 load 事件，來確保 DOM 結構被完整的讀取跟解析。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// DOM Ready!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>或是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// All resources finished loading!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>兩者的差異在load 事件是在<strong>網頁「所有」資源都已經載入且畫面渲染</strong>完成後才會觸發，<br>而 DOMContentLoaded 事件是在 DOM 結構被完整的讀取跟解析後就會被觸發，<strong>不須等待外部資源讀取完成</strong>。<br>如上圖，load 事件是會在 DOMContentLoaded 之後才被觸發，這兩個事件都可以確保網頁結構的載入完成。</p>
<p>後來我嘗試使用DOMContentLoaded事件，但發現還是無法選到，我想是因為此時google的外部資源尚未讀取完成，所以還抓不到，<br>所以又改成load事件來嘗試，最後終於成功</p>
<img src="/2021/09/18/collect-blog-data/4.png" class="">

<p>過程當中也嘗試過一些元素標籤屬性defer，async，這些用法，但都不管用，他們的用法說明可以看這裡<br><a href="https://iter01.com/44981.html">網頁效能優化之非同步載入js檔案</a></p>
<p>現在可以操控到手的資料啦!!</p>
<p>選到GOOGLE的搜尋按鈕後，就可以在上面下監聽器了，<br>每段程式碼都附上備註說明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// All resources finished loading!</span></span><br><span class="line">  googleSearchBtn = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;td button&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">  googleSearchBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      urlPosition = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.gs-visibleUrl-breadcrumb&#x27;</span>) <span class="comment">// 找出帳號的網址欄className，</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urlPosition.length; i++) &#123; <span class="comment">// 使用for迴圈遍歷這些位置</span></span><br><span class="line">        <span class="keyword">const</span> copyBtn = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>) <span class="comment">// 創建一個按鈕元素</span></span><br><span class="line">        copyBtn.innerText = <span class="string">&#x27;Search&#x27;</span> <span class="comment">// 寫上copy</span></span><br><span class="line">        copyBtn.classList.add(<span class="string">&#x27;search-btn&#x27;</span>) <span class="comment">// 加上樣式</span></span><br><span class="line">        copyBtn.setAttribute(<span class="string">&#x27;data-id&#x27;</span>, <span class="string">`<span class="subst">$&#123;i&#125;</span>`</span>) <span class="comment">// 設定data-id，方便之後取用</span></span><br><span class="line">        urlPosition[i].append(copyBtn) <span class="comment">// 插入元素到最後方</span></span><br><span class="line">        urlPosition[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123; <span class="comment">// 在父層掛上監聽器</span></span><br><span class="line">          <span class="keyword">const</span> copyContent = urlPosition[event.target.dataset.id].lastChild.previousElementSibling.innerText <span class="comment">// 選出要複製的文字</span></span><br><span class="line">          <span class="keyword">const</span> index = copyContent.indexOf(<span class="string">&#x27;›&#x27;</span>) <span class="comment">// 處理文字前面的特殊符號</span></span><br><span class="line">          <span class="keyword">const</span> rangeText = copyContent.slice(index + <span class="number">1</span>) <span class="comment">// 取得修改後的字</span></span><br><span class="line">          finalText = rangeText.trim() <span class="comment">// 將前方後方空白移除後置入 Api的search bar</span></span><br><span class="line">          <span class="built_in">console</span>.log(finalText)</span><br><span class="line">          <span class="comment">//接著把文字帶入痞客邦的API搜尋</span></span><br><span class="line">          axios.get(<span class="string">`https://emma.pixnet.cc/users/<span class="subst">$&#123;finalText&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            userData = res.data.user <span class="comment">// 將API取得資料丟進變數</span></span><br><span class="line">            innerData() <span class="comment">// 將物件資料置入HTML中</span></span><br><span class="line">          &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">          axios.get(<span class="string">`https://emma.pixnet.cc/blog?user=<span class="subst">$&#123;finalText&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            blogData = res.data.blog <span class="comment">// 將API取得資料丟進變數</span></span><br><span class="line">            innerData() <span class="comment">// 將物件資料置入HTML中</span></span><br><span class="line">          &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接著就是版面排一排，把該置入的資料丟進去，最後設定一個複製按鈕<br>作法是先所有按鈕選出，接著按鈕身上手動設定了dataset的id，所以當點擊按鈕可以取得id，將id可以用來選擇所有按鈕的index，<br>接著對元素使用element.select()<br>再使用 navigator.clipboard.writeText()來指定要複製到剪貼簿上，<br>成功跳通知，也可以不跳</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dataPanel.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.target.matches(<span class="string">&#x27;.data-copy&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> copyText = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.copy-text&#x27;</span>)</span><br><span class="line">    copyText[<span class="built_in">Number</span>(e.target.dataset.id)].select()</span><br><span class="line">    navigator.clipboard.writeText(copyText[<span class="built_in">Number</span>(e.target.dataset.id)].value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2021/09/18/collect-blog-data/5.png" class="">

<p>大功告成!</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>實作案例</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Hexo在Github上架設blog</title>
    <url>/2021/09/08/create-blog-by-hexo-in-github/</url>
    <content><![CDATA[<h1 id="廢話前言"><a href="#廢話前言" class="headerlink" title="廢話前言"></a>廢話前言</h1><h2 id="想要架設部落格作為記錄自己生活或相關筆記嗎"><a href="#想要架設部落格作為記錄自己生活或相關筆記嗎" class="headerlink" title="想要架設部落格作為記錄自己生活或相關筆記嗎?"></a>想要架設部落格作為記錄自己生活或相關筆記嗎?</h2><p>會想架設部落格的主要原因是自己正在上Javascript課程，課程有提到要開個部落格來作為自己的技術筆記、心得、或一些自己想記錄的東西作為備忘，畢竟學海無涯，有很多東西學會後久久不使用真的會忘記。</p>
<p>後來使用了一些大眾市面上的blog，但終究覺得不合用，一方面更想要有自己的風格，一方面對於自己來說希望更加方便撰寫紀錄及發布。而我這個初心者才知道，原來可以在Github撰寫靜態網頁(蠢)，所以就開始研究到底該如何在Github上架設一個簡易的靜態blog之旅。</p>
<span id="more"></span>
<p>起初還真的不知道要怎麼做，只知道如何在Github上呈現index.html，然後再自己手動寫連結…甚至最後想說是不是全部手刻HTML(蠢x2)，後來想想這不對啊!! 這也太麻煩且浪費時間了，不如用市面上的blog就好，不然完全本末倒置(笑，所以就開始試著搜尋網路上有沒有更適合的作法。<br>後來發現網路上有很多已經完成的樣板，只要下在別人寫好的主體下來加以修改撰寫，在推上Github，就可以完成自己的個人BLOG了。一開始搜尋到的是jekyll但它是ruby撰寫的，所以我也沒有環境系統，所以搞了老半天，但經過一翻嘗試還是有很多問題，覺得搞得一個頭兩個大的時候，讓我搜尋到了Hexo!!</p>
<blockquote><p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他標記語言）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。</p>
<footer><strong>@Hexo</strong><cite><a href="https://hexo.io/zh-cn/docs/">hexo.io/zh-cn/docs</a></cite></footer></blockquote>



<p>他主要又是以Javascript, Node.js 來操作，完全符合我現在在上課的內容，所以環境架設也都已經完成了，做了點嘗試沒想到一下就成功架上Github，中間也沒有遇到太多問題，所以最後決定使用Hexo作為主要的撰寫框架工具啦!順便在這邊紀錄使用的情況，及寫下相關技術筆記。</p>
<hr>
<h1 id="第一步：安裝必備程式"><a href="#第一步：安裝必備程式" class="headerlink" title="第一步：安裝必備程式"></a>第一步：安裝必備程式</h1><h2 id="程式清單："><a href="#程式清單：" class="headerlink" title="程式清單："></a>程式清單：</h2><ul>
<li><a href="https://git-scm.com/downloads">Git</a> 終端機 (Windows推薦)</li>
<li><a href="https://nodejs.org/en/">Node.js</a> 讓你可以在終端機上以Javascript指令來操作電腦</li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a>方便你在個人電腦上編程<br>詳細可以參閱 <a href="https://hexo.io/zh-tw/docs/index.html">Hexo官方文件</a></li>
</ul>
<p>如果完全沒有使用過Git Bash終端機及使用GitHub的同學<br>就是要先有自己的Github帳號啦! 之後要在Git Bash裡設定你的識別資料</p>
<p>範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>

<p>user.name 為你的Github帳戶<br>user.email 為你的Github帳戶設定的email</p>
<h1 id="第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案"><a href="#第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案" class="headerlink" title="第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案"></a>第二步：在電腦上開設專屬Blog資料夾，初始化Hexo檔案</h1><ol>
<li>安裝完後請打開 Git Bash 終端機 </li>
<li>在終端機上輸入 npm install -g hexo-cli ，來安裝hexo</li>
<li>一旦 Hexo 安裝完成後，執行下列指令，Hexo 就會在指定資料夾中建立所有需要的檔案。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; // folder輸入你要建立的資料夾名稱</span><br><span class="line">                     // 若想要在別的硬碟裡面建立，記得先使用終端機輸入cd 移動到你要建立blog資料夾的位置</span><br><span class="line">$ cd &lt;folder&gt; // folder輸入你剛剛建立好的資料夾名稱</span><br><span class="line">$ npm install // 安裝初始化npm</span><br><span class="line">$ git init // 若想要在電腦上使用git版本控制，記得要順便安裝git，不理解或不想用可忽略</span><br></pre></td></tr></table></figure>

<p>建立完成後，專案資料夾會有下列檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>此檔案為網站配置檔案(站點配置)，可以在這個檔案配置大部分的設定。</p>
<h2 id="source-資料夾"><a href="#source-資料夾" class="headerlink" title="source 資料夾"></a>source 資料夾</h2><p>原始檔案資料夾是放置內容的地方。檔案或資料夾名稱開頭為 _ (底線) 的資料還有設定隱藏檔案會被忽略。<br>因為在你把網頁推到伺服器端的時候，Hexo或先把所有原始檔案渲染成Html檔案，在推上伺服器，所以不重要或想要忽略的檔案，可以設定隱藏或是在檔案名稱開頭加上_ (底線)。<br>但除了 _posts 資料夾，因為_posts資料夾內會存放所有你的文章Markdonw檔案。<br>而渲染完成的 檔案會被放到 public 資料夾，而其他檔案會被拷貝過去。</p>
<h2 id="themes-資料夾"><a href="#themes-資料夾" class="headerlink" title="themes 資料夾"></a>themes 資料夾</h2><p>主題資料夾，裡面可以放各式各樣的主題，可以放自己的或網路上別人製作好提供的，然後 Hexo 會根據你_config.yml裡面主題設定要使用哪一個主題來渲染最後完成的HTML檔案。</p>
<h1 id="第三步：在GitHub上建立一個新的Repository"><a href="#第三步：在GitHub上建立一個新的Repository" class="headerlink" title="第三步：在GitHub上建立一個新的Repository"></a>第三步：在GitHub上建立一個新的Repository</h1><ol>
<li><p>先到Github開一個新的Repository</p>
<img src="/2021/09/08/create-blog-by-hexo-in-github/1.jpg" class="" title="1.jpg"></li>
<li><p>輸入Repo名稱 &gt; 選擇公開 &gt;建立</p>
<img src="/2021/09/08/create-blog-by-hexo-in-github/2.jpg" class="" title="2.jpg"></li>
</ol>
<h1 id="第四步：安裝hexo-deployer-git，並部屬至Github"><a href="#第四步：安裝hexo-deployer-git，並部屬至Github" class="headerlink" title="第四步：安裝hexo-deployer-git，並部屬至Github"></a>第四步：安裝hexo-deployer-git，並部屬至Github</h1><p>回到終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h1 id="設定-config-yml"><a href="#設定-config-yml" class="headerlink" title="設定_config.yml"></a>設定_config.yml</h1><p>使用 VS CODE 打開剛剛建立好的HEXO資料夾</p>
<img src="/2021/09/08/create-blog-by-hexo-in-github/3.jpg" class="" title="3.jpg">

<p>開啟_config.yml</p>
<img src="/2021/09/08/create-blog-by-hexo-in-github/4.jpg" class="" title="4.jpg">

<p>裡面有很多相關設定，不一一介紹，主要只以可以成功部屬到Github需要設定的參數為主，其他沒提到的，可以到 <a href="https://hexo.io/zh-tw/docs/configuration">Hexo 官方文檔</a> 查詢。</p>
<p><strong>以下設定以我自己為範例</strong></p>
<p>url: doug0849.github.io<br>設定GitHub的repo設定網址</p>
<p>設定主題<br>theme: landscape </p>
<p>預設應該是landscape，若網路上下載了別人的主題，可以放到themes底下，設定好資料夾名稱，將這個參數改為資料夾名稱即可。</p>
<p>最後設定部屬參數<br>在最後加上以下參數<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/Doug0849/doug0849.github.io.git">https://github.com/Doug0849/doug0849.github.io.git</a><br>  branch: main</p>
<p>type輸入git<br>repo請輸入你完整的repo位置<br>branch: 改為main</p>
<p>回到終端機執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="第五步：別忘了要把repo設定成Github-Page"><a href="#第五步：別忘了要把repo設定成Github-Page" class="headerlink" title="第五步：別忘了要把repo設定成Github Page"></a>第五步：別忘了要把repo設定成Github Page</h1><img src="/2021/09/08/create-blog-by-hexo-in-github/5.jpg" class="" title="5.jpg">

<h1 id="第六步：訪問-https-你的帳戶名稱-github-io"><a href="#第六步：訪問-https-你的帳戶名稱-github-io" class="headerlink" title="第六步：訪問 https://你的帳戶名稱.github.io/"></a>第六步：訪問 https://你的帳戶名稱.github.io/</h1><p>基本上這樣就能在github上看到你的個人blog啦!<br>如果剛上傳應該不會馬上看到，可能過個五分鐘內就會顯示，<br>剩下就是設定其他相關參數，及寫下你的第一篇文章。</p>
<h1 id="第七步：發文"><a href="#第七步：發文" class="headerlink" title="第七步：發文"></a>第七步：發文</h1><p>這邊只做簡易說明<br>使用終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [title]</span><br></pre></td></tr></table></figure>

<p>到_posts底下會看到一個你命名為 [title] 的 Markdown 檔案<br>就可以使用 Markdown 語法來撰寫你的文章<br>寫完後在終端機執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>等個5分鐘，再次訪問 https://你的帳戶名稱.github.io/<br>看看文章有沒有PO上去啦!</p>
<p>其他簡單的操作說明可以看<br><a href="https://doug0849.github.io/2021/09/09/Hexo%E6%93%8D%E4%BD%9C/">其他Hexo 操作</a></p>
<p>詳細的其他說明一樣看<br><a href="https://hexo.io/zh-tw/docs/configuration">Hexo 官方文檔</a> 查詢。</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>建立一個Node.js本機伺服器</title>
    <url>/2021/09/11/create-node-js-local-server/</url>
    <content><![CDATA[<p>開一個測試資料夾先，在裡面建立一個app.js的檔案，並用編輯器開啟</p>
<img src="/2021/09/10/create-node-js-local-server/1.jpg" class="">
<span id="more"></span>
<h1 id="定義基本設定"><a href="#定義基本設定" class="headerlink" title="定義基本設定"></a>定義基本設定</h1><p>接著在app.js裡寫入以下程式碼</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> hostName = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br></pre></td></tr></table></figure>
<p>轉譯為：<br>先載入Node.js的 http 模組塊<br>並定義主機名稱，因為是在自己的電腦上所以通常慣例我們都叫localhost<br>再來定義連接埠號 port = 3000</p>
<p>接著要使用http模塊的createServer方式來建立伺服器，然後透過參數server來表達，<br>createServer需要有一個函數，他有兩個參數request(請求)跟response(回應)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="定義伺服器回應-HTTP-response"><a href="#定義伺服器回應-HTTP-response" class="headerlink" title="定義伺服器回應 HTTP response"></a>定義伺服器回應 HTTP response</h1><h2 id="觀念說明"><a href="#觀念說明" class="headerlink" title="觀念說明"></a>觀念說明</h2><p>大部分跟http伺服器有關的都會有兩個參數，request(請求)跟response(回應)，<br>因為伺服器總得接收到request,然後才會給出response，不然無法進行，<br><strong>req是由瀏覽器</strong><br><strong>req是由瀏覽器</strong><br><strong>req是由瀏覽器</strong>向<strong>伺服器</strong>發出的<strong>請求</strong></p>
<p><strong>res則是經由我們設定回覆</strong>給<strong>瀏覽器</strong>的東西<br><strong>res則是經由我們設定回覆</strong>給<strong>瀏覽器</strong>的東西<br><strong>res則是經由我們設定回覆</strong>給<strong>瀏覽器</strong>的東西</p>
<p>伺服器在回應時，通常會定義以下幾個資訊</p>
<ol>
<li>回應的 HTTP 狀態碼 (status code)</li>
<li>設定回應的內容類型 Response Headers &gt; Content-Type</li>
<li>把回應的內容傳送回去給瀏覽器 Response body &gt; <code>&lt;html&gt;...&lt;/html&gt;</code></li>
</ol>
<hr>
<p><strong>插播</strong><br>HTTP 是 (HyperText Transfer Protocol 的縮寫)<br>HTTP 傳輸通訊協定就是<strong>電腦之間互相索取文件的溝通語言</strong><br>當瀏覽器發出請求通常會定義幾個資訊，Method、URL、Header、Message Body</p>
<hr>
<p>回正題，伺服器端回應HTTP response，通常會定義以下幾個資訊</p>
<ol>
<li>Status code(狀態碼)<br>可以想像成客戶端與伺服器端之間的招呼語，重要的是開頭第一個數字：</li>
</ol>
<ul>
<li>2XX：成功回應，例如 200</li>
<li>3XX：重新轉向，例如 301 (永久轉向)、302 (暫時轉向)</li>
<li>4XX：客户端錯誤回應，例如 404 Not Found (找不到資源)</li>
<li>5XX：伺服器的問題，例如 500 Internal Server Error</li>
</ul>
<p>我們先設定成功代碼</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>設定回應的內容<strong>類型</strong>，Response Headers &gt; Content-Type<br>一般都是用用瀏覽器看網頁，所以大部分內容類型是 HTML 文件 (text/html) 。<br>但有些時候伺服器回傳的可能是純文字 (text/plain) 、PDF 檔 (application/pdf) 、影片檔 (video/mpeg4) 、或者是經常用來傳送資料的 JSON 檔 (application/json) …。</li>
</ol>
<p>在來設定回應的內容類型，先以純文字來作回應</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>設定要回應給瀏覽器的<strong>內容</strong><br>因為已經定義為純文字內容，所以先以純文字做回應，可以用**res.end()**來做回應</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;Hi! This is my first Node.js server!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="啟動伺服器"><a href="#啟動伺服器" class="headerlink" title="啟動伺服器"></a>啟動伺服器</h1><p>最後我們要啟動伺服器，要求他<strong>監聽</strong>瀏覽器傳來的<strong>request(請求)</strong><br>在node.js中我們可以使用在伺服器上使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server.lisetn(port,serverName,<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>這個方法啟動伺服器需要port參數，serverName,和一個匿名函式</p>
<p>最後把一開始定義好的參數帶進去，並在匿名函式內可以console.log一段顯示訊息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span></span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;Hi! This is my first Node.js server!&#x27;</span>) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, hostName, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running on http://<span class="subst">$&#123;hostName&#125;</span>:3000!`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接著回到在終端機上執行這個app.js<br>並且會得到伺服器啟動的訊息</p>
<img src="/2021/09/10/create-node-js-local-server/2.jpg" class="">

<p>然後用瀏覽器開啟拜訪 <a href="http://localhost:3000/">http://localhost:3000</a> 就可以成功拜訪剛剛建立的伺服器。</p>


<p>也就是你透過<strong>瀏覽器</strong> &gt; <strong>向你的電腦架設出來的伺服器發出請求</strong> &gt; <strong>你的電腦回覆給瀏覽器</strong> 這樣一連串的動作。</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>隨記-越南疫情近況</title>
    <url>/2021/09/12/diary-epidemic-in-veitnam/</url>
    <content><![CDATA[<p>今天是自從2019年2月20我來越南工作開始算起的第935天，最近越南疫情稍微有好轉一些了，自從宣布封城開始經過兩星期左右，而確診病數也確實看到明顯下降了，值得開心。</p>
<span id="more"></span>

<p>昨天的新聞報導胡志明的確診病例為5629例，跟高峰期每天的8000多相比少了很多，總算看得到點點希望了，政府也宣布，部分地區會在16號開始解除封閉，胡志明可能還要再等等，也許是10月吧，到那時候我大概就會立刻提離職，然後準備收拾行曩回臺灣去了，身在臺灣的各位朋友們!!真的很幸福啊!! 回臺灣後大概會計畫邊休息邊玩邊走走看看，然後持續進行著轉職的計畫囉。</p>
<p>關於健身，今年4月份工作很忙，然後就沒體力去，到了5月份準備要去運動，結果那個周末就直接宣布健身房停止營業，所以也是從那時候就開始就不敢出門了，越南爆發時間大概是跟臺灣第一次疫情爆發差不多時間，然後就從那個時候一直關到今天沒出門，頂多上下樓去辦公室，後來正式宣布Work From Home的時候就幾乎沒踏出家門了，除非下樓拿快遞的食材之類的，日子大概不外乎就是工作、打電動、看漫畫、睡覺、上課、學技術，每天無限循環。</p>
<p>最近每天也沒什麼新鮮事，就是每天在寫寫技術筆記，繼續上課補強，或是自己看些技術文章，還有日夜顛倒，對，嚴重的日夜顛倒，搞得身體不太舒服，看看我這篇發文時間就知道了，所以準備來去睡覺了，稅前隨手寫個日記醬，搭晚安。</p>
<img src="/2021/09/12/diary-epidemic-in-veitnam/1.jpg" class="">]]></content>
      <categories>
        <category>日記</category>
        <category>越南</category>
      </categories>
      <tags>
        <tag>日記</tag>
        <tag>越南</tag>
      </tags>
  </entry>
  <entry>
    <title>ejs樣板語法技術筆記</title>
    <url>/2021/09/08/ejs%E6%A8%A3%E6%9D%BF%E6%8A%80%E8%A1%93%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>在ejs樣版檔案下的標籤語意</p>
<p>&lt;%   ‘脚本’ 标签，用于流程控制，无输出。<br>&lt;%_  删除其前面的空格符<br>&lt;%__ 在模板中，透过 __ 或 _p 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。<br>     可詳<a href="https://hexo.io/zh-cn/docs/internationalization">Hexo官方文檔</a><br>&lt;%=  输出数据到模板（输出是转义 HTML 标签），像是等於innerHTML<br>&lt;%-  输出非转义的数据到模板，像是等於innerText<br>&lt;%#  注释标签，不执行、不输出内容<br>&lt;%%  输出字符串 ‘&lt;%’<br>%&gt;   一般结束标签<br>-%&gt;  删除紧随其后的换行符<br>_%&gt;  将结束标签后面的空格符删除</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>EJS</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>EJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主題添加留言板</title>
    <url>/2021/09/10/hexo-add-comment/</url>
    <content><![CDATA[<h2 id="本篇使用的是utterances留言板"><a href="#本篇使用的是utterances留言板" class="headerlink" title="本篇使用的是utterances留言板"></a>本篇使用的是utterances留言板</h2><p>utterances是由TypeScript所構成的留言區套件，透過串接GitHub issue的方式來完成留言區功能(但需要GitHub帳號)，簡而言之就是它可以在文章底下留言，並且同步到GitHub專案留下一個issue留言。</p>
<span id="more"></span>
<h2 id="為什麼選擇用-utterances-留言板"><a href="#為什麼選擇用-utterances-留言板" class="headerlink" title="為什麼選擇用 utterances 留言板?"></a>為什麼選擇用 utterances 留言板?</h2><p>因為Blog全部架在GitHub上，感覺統一管理比較方便。</p>
<h2 id="套件引用"><a href="#套件引用" class="headerlink" title="套件引用"></a>套件引用</h2><ul>
<li>utterances: <a href="https://utteranc.es/">https://utteranc.es/</a></li>
</ul>
<h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>進入 utterances 後找到 <strong>configuration</strong></p>
<img src="/2021/09/10/hexo-add-comment/1.jpg" class="" title="1.jpg">

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>先點擊 utterances app 進到下個頁面</p>
<img src="/2021/09/10/hexo-add-comment/2.jpg" class="" title="2.jpg">

<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><p>點擊安裝，然後再到個人GitHub的Setting裡的Applications設定utterances<br>看是要所有的Repo都可以引用這個套件，或是只有選擇的Repo可以使用，這邊我是選擇指有特定的選擇Repo可用</p>
<img src="/2021/09/10/hexo-add-comment/3.jpg" class="" title="3.jpg">

<h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h2><p>回到 utterances頁，輸入你的repo資料<br>我自己的範例是 doug0849/doug0849.github.io</p>
<img src="/2021/09/10/hexo-add-comment/1.jpg" class="" title="1.jpg">

<h2 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h2><p>再來 Blog Post ↔️ Issue Mapping 大概就是當有人留言後會出現的樣式，選第一個即可。</p>
<img src="/2021/09/10/hexo-add-comment/4.jpg" class="" title="4.jpg">

<h2 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h2><p>選一個你喜歡的樣式風格</p>
<img src="/2021/09/10/hexo-add-comment/5.jpg" class="" title="5.jpg">

<h2 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h2><p>複製JavaScript 到你模板裡要放Comment的位置</p>
<img src="/2021/09/10/hexo-add-comment/6.jpg" class="" title="6.jpg">

<p>每個模板的位置不太一樣，必須要找到正確的地方引入此段JS<br>以Hexo Next 模板來說，請丟到 Next 主題資料夾下 &gt; layout &gt; _partials &gt; comments.swig<br>開啟 comments.swig 找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if page.comments %&#125;</span><br></pre></td></tr></table></figure>
<p>把它丟在它下面</p>
<img src="/2021/09/10/hexo-add-comment/7.jpg" class="" title="7.jpg">

<p>最後到主題_config.yml最後補上</p>
<p>utterances:<br>  enable: true</p>
<p>這樣就完成啦!</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo操作</title>
    <url>/2021/09/09/hexo-command/</url>
    <content><![CDATA[<h3 id="關於draft"><a href="#關於draft" class="headerlink" title="關於draft"></a>關於draft</h3><p>放在/source/_drafts下<br>可執行命令hexo new draft <code>&lt;title&gt;</code> 創建草稿<br>通過執行命令hexo publish <code>&lt;title&gt;</code> 可以把_drafts下的草稿文章推到_posts下</p>
<span id="more"></span>
<p>會按照new_post_name的配置來命名文章<br>如果有開啟_config裡的post_asset_folder: true，對應的asset資料夾也會一起移動<br>手動操作也是可以的，草稿最後會被解析到model(‘Post’)中，參數published變為0 （預設情况下不會傳給布局頁面進行渲染）<br>_config.yml中如果設定render_drafts: true<br>就會傳給布局頁面進行渲染<br>在generate或deploy時會自動把_drafts/下的文件解析生成到目標文件夾下（但不會移動到/source/_posts下）</p>
<h3 id="關於New-Post"><a href="#關於New-Post" class="headerlink" title="關於New Post"></a>關於New Post</h3><p>執行命令hexo new title 就可以創建新文章<br>新文章會丟到/source/_posts底下<br>可以在站點_config裡面設定新文章預設命名<br>就可以在_posts底下自動用資料夾分類</p>
<p>new_post_name: :year/:month/:title.md</p>
<p>文章將會在_posts/2021/09/底下</p>
<h3 id="關於產生靜態文件"><a href="#關於產生靜態文件" class="headerlink" title="關於產生靜態文件"></a>關於產生靜態文件</h3><p>執行命令hexo generate<br>這時候Hexo會將你用Markdown寫好的文章、圖片，會全部依照主體layout設定去生成HTML文件，這些檔案位於public底下，每一次執行就會依照source檔案底下有變動的的文章重新生成一次html文檔</p>
<p>簡易命令寫法 hexo g<br>可以附帶參數 -w 將會隨時監控原始檔案的變動，只要一變動便會重新生成新的html，在本地測試時很好用，開一個終端機執行hexo serve啟動本地伺服器觀察，一個終端機執行 hexo g -w 將會持續幫你更新檔案。</p>
<h3 id="關於部屬"><a href="#關於部屬" class="headerlink" title="關於部屬"></a>關於部屬</h3><p>執行命令hexo deploy<br>在執行hexo deploy之前要先執行 hexo generate來產生靜態文件，然後在執行hexo deploy就會將靜態文件上傳到指定位置。<br>Hexo預設支援github，只要在github開好repo並設定成github_page，可以在站點_config裡加入設定值</p>
<p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/%E5%80%8B%E4%BA%BA%E5%B8%B3%E8%99%9F/repo%E5%90%8D%E7%A8%B1">https://github.com/個人帳號/repo名稱</a><br>  branch: master(推送到master分支，若不使用master分支要設定到你repo設定的預設分支上)</p>
<p>執行hexo deploy -m “commit message”<br>大概等於git commit -m “message”，但是這邊不使用git push檔案，因為會將所有原始資料上傳至Github造成檔案混亂，最好另外開一個branch來做檔案備份，或自己手動在本地電腦備份。</p>
<h3 id="關於本地伺服器"><a href="#關於本地伺服器" class="headerlink" title="關於本地伺服器"></a>關於本地伺服器</h3><p>執行完hexo generate後若不想直接上傳到個人網路空間，<br>可以執行 hexo serve 來啟動本地伺服器，觀察檢查是否有其他問題。<br>本地伺服器位置位於 <a href="https://localhost:4000/">https://localhost:4000</a></p>
<h3 id="關於站點配置-config-yml"><a href="#關於站點配置-config-yml" class="headerlink" title="關於站點配置_config.yml"></a>關於站點配置_config.yml</h3><p>有很多的基本配置都在這個文件裡，相關的配置變數可以詳官方網站的文件說明。<br><strong><a href="https://hexo.io/zh-cn/docs/configuration">Hexo配置</a></strong></p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>今天是學寫Code的第107天</title>
    <url>/2021/09/10/learning-programing-107th-day/</url>
    <content><![CDATA[<h5 id="今天是我學寫code的第107天"><a href="#今天是我學寫code的第107天" class="headerlink" title="今天是我學寫code的第107天"></a><center>今天是我學寫code的第107天</center></h5><p><strong><em><center>(歡呼加鼓掌!)</center></em></strong></p>
<p>　　在2021年5月25日晚上這一天，對自己下了一個人生的新決定，決定要轉換跑道啦!<br>　　學到至今3個月多一些，加上第一次自己成功在Github上用Hexo架出靜態網頁，就在這邊稍微紀錄一下自己的轉職日記啦! XD</p>
<img src="/2021/09/09/learning-programing-107th-day/1.jpg" class="" title="1.jpg">
<span id="more"></span>
<p>　　再一次說說為什麼在這老大不小的年紀，就在今年年底即將正式年滿32歲的微大叔年紀，竟然毅然決然地決定換跑道吧!</p>
<p>　　本身原本是從事建築設計產業的，但從大學開始半工半讀一直做到了現，到海外越南工作，到了前幾個月還是下了個決心轉換跑道了。</p>
<p>　　原因的話，其實一方面是疫情影響的關係導致無法回親愛的臺灣，一方面是建築設計這產業在臺灣的處境真的越來越差，薪資待遇真的讓我覺得糟糕到很離譜，本身就須具備很多專業的知識及技術能力，還得花很多時間學習新的軟件操作及使用，但學這麼多卻完全不見薪水有多大的成長，反而變成理所應當的感覺，而且這產業所背負的責任壓力，時間壓力以及工作量卻又時常相當的大，所以就在想著若是回臺灣後到底要不要繼續這產業，最後最後自己內心的想法是”<strong>NO</strong>“，所以就就開始思考了，那我想做什麼?</p>
<img src="/2021/09/09/learning-programing-107th-day/2.jpg" class="" title="2.jpg">

<p>　　這要回到小時候，其實自己的父親是一位很熱愛電腦的人，他在我小學一二年級的時候，就買了第一台window 95的電腦，後來甚至自己維修電腦做小生意賺錢，於是我從小就熱愛打電腦遊戲，後來父母覺得我們似乎有興趣，也把我們送到電腦補習班學習，但對於那個年紀連除法都不會的我來說，學程式語言真的太難了。後來父母就把我轉送到學習PhotoShop、DreamWeaver、Flash…但老實說現在大概只有PhotoShop功力還行吧，後來長大自己對這方面也比較有興趣又自己買書學了Illustrator，我想也是因為從小培養出對電腦相關的興趣，加上國中畢業時原本想要去念大安高中的資訊科，但那時候母親聽信親戚的話，那時候很多人覺得念技職學校沒未來，大家都要念普通高中然後進好名校，所以堅持不讓我念技職學校，也可能是這原因，又再心理埋下了另一個小小的遺憾，直至今日人生自己做主，所以就下定決心不如開始學習寫程式吧!</p>
<img src="/2021/09/09/learning-programing-107th-day/3.jpg" class="" title="3.jpg">

<p>　　剛好越南疫情也相當嚴重，所有工作幾乎都停擺，工作也非常不忙碌，所以有比較多的時間可以專心學習，就這樣<strong>邊打電動邊工作邊學怎麼Programming</strong>到今天<strong>107</strong>天的日子裡，已經會如何使用Express.js以及MongoDB來架設基本的網站，雖說還不是很熟悉，但也算是一個歷程了，再來又自己學習了如何在Github架出靜態網頁，如何用Hexo框架系統在Github架設個人blog，也算是滿滿的成就感啦!(再次為自己歡呼加鼓掌)</p>
<img src="/2021/09/09/learning-programing-107th-day/4.jpg" class="" title="4.jpg">

<p>　　再來下個階段目標，因為目前這個Blog還是套用超具人氣的樣板(可是它真的很好用，害我有點懶惰)，接著開始會自己學習把所有Blog頁面重新架設過，並建立出自己風格的Hexo主題，然後陸陸續續把相關練習作品整理起來，在這邊當成最好的履歷表呈現出來，也繼續學習更多複雜精進的技術，另一方面看看是否會幫助到一些跟我一樣半路出家的人，接著希望明年差不多這個時間，看看是否能順利達成轉職目標，就讓我們繼續看下去吧!</p>
<img src="/2021/09/09/learning-programing-107th-day/5.jpg" class="" title="5.jpg">]]></content>
      <categories>
        <category>日記</category>
        <category>轉職</category>
      </categories>
      <tags>
        <tag>轉職</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code - Markdown &amp; Hexo 自動補齊語法標籤設定</title>
    <url>/2021/09/09/markdown-auto-fill/</url>
    <content><![CDATA[<p>在VS Code中寫Markdown，每次撰寫時遇到一些插入圖片或是其他語法覺得很麻煩，因為都不會自動補齊，因此上網找了些資訊看VS Code要怎麼調整才能達到這個功能。</p>
<span id="more"></span>
<p>首先點選文件&gt;首選項&gt;用戶片段</p>
<img src="/2021/09/09/markdown-auto-fill/step1.png" class="" title="Step1">
<p>接著會在上方有一個視窗，要輸入Markdown，點選Markdown.json</p>
<img src="/2021/09/09/markdown-auto-fill/step2.png" class="" title="Step2">
<p>在markdown.json 上面有一些範例</p>
<img src="/2021/09/09/markdown-auto-fill/step3.png" class="" title="Step3">

<p>Print to console 是標題<br>prefix 是要觸發的關鍵字<br>body 是觸發後的樣子，可以在後面補上(‘$1’)(‘$2’)，$代表執行快捷後光標自動跳到的位置</p>
<p>再來要編寫適合自己的Markdonw<br>我希望要得到的完整語句是```javascript<br>可以添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Print to ```javascript&quot;: &#123;</span><br><span class="line">	&quot;prefix&quot;: &quot;```js&quot;,</span><br><span class="line">	&quot;body&quot;: [</span><br><span class="line">		&quot;```Javascript&quot;,</span><br><span class="line">		&quot;$1&quot;,</span><br><span class="line">		&quot;$2&quot;,</span><br><span class="line">		&quot;```&quot;,</span><br><span class="line">	],</span><br><span class="line">	&quot;description&quot;: &quot;js代碼塊&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>另外我是使用Hexo的框架，所以也可以自己加上Hexo相關的標籤語法</p>
<img src="/2021/09/09/markdown-auto-fill/step4.png" class="" title="step4">

<p>最後要在VS code的setting.json裡設定開啟Markdown的快捷功能</p>
<img src="/2021/09/09/markdown-auto-fill/step5.png" class="" title="step5">
</br>
<img src="/2021/09/09/markdown-auto-fill/step6.png" class="" title="step6">
</br>
<img src="/2021/09/09/markdown-auto-fill/step7.png" class="" title="step7">
</br>
大功告成
</br>
<img src="/2021/09/09/markdown-auto-fill/step8.png" class="" title="step8">
</br>
<img src="/2021/09/09/markdown-auto-fill/step9.png" class="" title="step9">]]></content>
      <categories>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>學期2-2_S2-電影清單練習實作</title>
    <url>/2021/09/11/s2-2-movie-list-exercise/</url>
    <content><![CDATA[<p><strong>此文章僅記錄作業時提醒自己遇到的問題及需要注意處</strong></p>
<span id="more"></span>
<h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><p>當用<strong>常數</strong>宣告了一個陣列容器的時候，若要加入物件或其他東西要使用Array.prototype.push()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(INDEX_URL)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    movies.push(...response.data.results)</span><br><span class="line">    renderMovieList(movies)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<h2 id="展開運算子"><a href="#展開運算子" class="headerlink" title="展開運算子"></a>展開運算子</h2><p>…response.data.results 前面的… 是展開運算子，會將陣列內容展開</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> movies = []; <span class="comment">//空陣列，空容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//目標：用 push 方法把 movies 從空陣列變成 [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">movies.push(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//傳入 3 個參數：1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">movies.push(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//把陣列用展開運算子打開，打開後就和方法一一模一樣</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//做一個陣列</span></span><br><span class="line">movies.push(...numbers); <span class="comment">//和方法二同樣意思</span></span><br></pre></td></tr></table></figure>

<h2 id="關於dataset"><a href="#關於dataset" class="headerlink" title="關於dataset"></a>關於dataset</h2><p>可以在元素標籤上設定data資料，在使用JS去取得點擊目標元素上的dataset資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1234567890&quot;</span> <span class="attr">data-user</span>=<span class="string">&quot;ac-genie&quot;</span> <span class="attr">data-date-of-birth</span>&gt;</span>AC Genie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然後我們可以呼叫 dataset. 來取得這些屬性的值，你會發現這些值的型態都是字串*：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#user&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.user)</span><br><span class="line"><span class="comment">//ac-genie</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.id)</span><br><span class="line"><span class="comment">//1234567890</span></span><br><span class="line"><span class="built_in">console</span>.log(el.dataset.dateOfBirth)</span><br><span class="line"><span class="comment">//(空字串)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>Array.prototype.push()</tag>
        <tag>...展開運算子</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
      </tags>
  </entry>
  <entry>
    <title>S2：切版練習：毛小孩星球</title>
    <url>/2021/09/14/s2-layout-pet-planet/</url>
    <content><![CDATA[<p><strong><a href="https://codepen.io/doug0849/pen/MWovwyr">完成作品CodePen連結</a></strong></p>
<p><strong>此文章所做的筆記，僅為提醒自己要多加注意的地方。</strong></p>
<h1 id="本文引用之圖片均來自Alpha-Camp"><a href="#本文引用之圖片均來自Alpha-Camp" class="headerlink" title="本文引用之圖片均來自Alpha Camp"></a>本文引用之圖片均來自<a href="https://tw.alphacamp.co/">Alpha Camp</a></h1><span id="more"></span>
<h1 id="作業筆記"><a href="#作業筆記" class="headerlink" title="作業筆記"></a>作業筆記</h1><h2 id="起手式-Rest-default-CSS-還原瀏覽器預設設定"><a href="#起手式-Rest-default-CSS-還原瀏覽器預設設定" class="headerlink" title="起手式 Rest default CSS 還原瀏覽器預設設定"></a>起手式 Rest default CSS 還原瀏覽器預設設定</h2><p>每家瀏覽器都有預設不同的 CSS 樣式，造成前端工程師網頁開發上一個頭痛的問題：<br>開發時用 CSS 設計好整齊美麗的排版，在 Google Chrome 上看起沒問題，用 IE 打開卻全變了樣，且市面上還有 Firefox、Safari、Opera 等其他家瀏覽器，</p>
<p>所以實務開發中，CSS起手式通常會是 Reset CSS，先將各大瀏覽器的預設樣式還原，有個乾淨的開始，再來制訂專案的樣式。</p>
<p>可以直接使用開源的 CSS Reset 工具如：</p>
<ol>
<li><a href="https://meyerweb.com/eric/tools/css/reset/" title="" target="">Reset CSS</a> ，這是 CSS 大師 Eric Meyer 整理出的版本</li>
<li><a href="https://necolas.github.io/normalize.css/" title="" target="">Normalize.css</a> 這是 Bootstrap 目前已經內建使用的版本</li>
<li>或是自行制訂</li>
</ol>
<h2 id="header-固定置頂"><a href="#header-固定置頂" class="headerlink" title="header 固定置頂"></a>header 固定置頂</h2><p>常常看到很多網頁，可以將header固定在最上方，不會因為頁面下滑消失。<br>我們可以使用 <strong>position: fixed</strong> 來固定元素位置。</p>
<p>再通過 z-index 可以定義元素的層級，<strong>愈大的數字會放在愈上層，愈小的數字會放在愈下層</strong>，而視窗位於 0 的位置。<br>將數值設定為 999 ，基本 header 元素就很難被其他元素覆蓋掉，導覽列就會固定在最上層。</p>
<h2 id="em-vs-rem"><a href="#em-vs-rem" class="headerlink" title="em vs. rem"></a>em vs. rem</h2><p>rem 和 em 同樣是相對單位，只是參照的對象不同。 em 參照的對象是父元素， rem 是 root em 的意思， 參照的是根元素，就是 html 層級的字體大小，一般瀏覽器的預設值是 16 px。<br>使用 rem 的好處是，專案一複雜，很容易忘記父元素是多少大小，用 rem 不用特別去記。或當父元素字體大小突然被改動時，用 rem 也不會受到連帶影響。</p>
<h2 id="絕對定位-position-absolute"><a href="#絕對定位-position-absolute" class="headerlink" title="絕對定位 position:absolute"></a>絕對定位 position:absolute</h2><img src="/2021/09/14/s2-layout-pet-planet/navbar.png" class="">

<p>絕對定位 position: absolute 指的是子元素根據父元素做定位，但父元素CSS要設定position: relative，否則會根據html body標籤來設定位置。<br>在這個案例中，父元素是 header(跟body位置一樣寬且置頂)，子元素是 nav。<br>假設 top 是 0，子元素會貼齊父元素的最頂端。<br>看手機設計稿，此案導覽列是貼齊在 header 的下面，所以要設定 top:100%。子元素移動到父元素正下方。</p>
<p>本案<strong>導覽列</strong>原本是<strong>沒有特別設定寬度</strong>的，<strong>瀏覽器預設為 auto</strong>。<br>一般情況下，導覽列因為是 block element，因此會想辦法佔滿父元素的寬度和高度空間。<br>然而，在<strong>設定為絕對定位後，元素已經完全脫離文字流了</strong>，本身<strong>寬度和高度大小會透過內容決定</strong>，<br>所以目前 .nav 的寬度只有 4 個字元寬。手動將寬度設為 100% 和父元素同寬，文字就會置中。</p>
<h2 id="使用line-height-來設定文字的垂直置中"><a href="#使用line-height-來設定文字的垂直置中" class="headerlink" title="使用line-height 來設定文字的垂直置中"></a>使用line-height 來設定文字的垂直置中</h2><p>要做文字的垂直置中的效果，可能會直覺想到 position 或是 flexbox，<br>這邊因為只有文字，所以可以使用 line-height 這方法來讓 logo 文字垂直置中。</p>
<p><strong>將文字的 line-height 設定和父元素同高即可。</strong></p>
<h2 id="使用input-checkbox來製作漢堡排使導覽列收合"><a href="#使用input-checkbox來製作漢堡排使導覽列收合" class="headerlink" title="使用input-checkbox來製作漢堡排使導覽列收合"></a>使用input-checkbox來製作漢堡排使導覽列收合</h2><h3 id="1-先加入html標籤"><a href="#1-先加入html標籤" class="headerlink" title="1.先加入html標籤"></a>1.先加入html標籤</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>毛小孩星球<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   加入input-checkbox --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nav-toggle&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  加上導覽列  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#activity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>近期活動<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#album&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>狗兒相片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#adoption&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>領養資訊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-原先的nav先設定不顯示"><a href="#2-原先的nav先設定不顯示" class="headerlink" title="2.原先的nav先設定不顯示"></a>2.原先的nav先設定不顯示</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="comment">/*依據 Header 定位*/</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/*原本先不顯示*/</span></span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-pseudo-class-控制「被勾選」時樣式，及使用-選定同一層後方元素"><a href="#3-使用-pseudo-class-控制「被勾選」時樣式，及使用-選定同一層後方元素" class="headerlink" title="3.使用 pseudo-class 控制「被勾選」時樣式，及使用 ~ 選定同一層後方元素"></a>3.使用 pseudo-class 控制「被勾選」時樣式，及使用 ~ 選定同一層後方元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nva</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣就可以製作出一個陽春版的漢堡排。</p>
<h3 id="4-使用-transition-和-transform-優化收合的轉場效果"><a href="#4-使用-transition-和-transform-優化收合的轉場效果" class="headerlink" title="4.使用 transition 和 transform 優化收合的轉場效果"></a>4.使用 transition 和 transform 優化收合的轉場效果</h3><ul>
<li>transition 屬性是一個縮寫，冒號後面可以放四個屬性值：<br>transition: property duration timing-function delay;依序代表：<ul>
<li>transition-property：載明哪個屬性要使用這個效果，例如我們的目標是和顯示有關的 display 屬性。</li>
<li>transition-duration：這個效果持續發生的時間，單位是秒，如果是 0 點幾，0 可以不寫。例如我們希望持續 0.2 秒的話可寫 .2s 。</li>
<li>transition-timing-function：效果的變化速度，可以寫屬性名稱，例如 ease-in 是緩慢的開始，也可以自由定義 cubic-bezier 函數，<a href="https://easings.net/">easing.net</a> 提供一張好用的速查表，可前往試用後複製想要的函數。</li>
<li>transition-delay：先延遲多久之後再開始這個效果，單位和寫法同transition-duration。</li>
</ul>
</li>
</ul>
<ol>
<li>再nav加入 transition<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"><span class="comment">/*依據 Header 定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*原本先不顯示*/</span></span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="comment">/*設定display的過渡動畫變化效果*/</span></span><br><span class="line"><span class="attribute">transition</span>: display .<span class="number">2s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>最後發現沒有變化<br>畫面沒有變化是因為 display 只有 100% 完全顯示和 0% 完全不顯示兩個狀態，無法做到漸變的效果。</p>
<ol start="2">
<li>transform<br>為了解決這個問題，我們再來多認識一個 CSS 屬性：transform。<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform">transform</a> 的 MDN 文件，裡面有屬性變化效果的範例。</li>
</ol>
<p>  使用 transform: scale(1,0); 來取代 display: none;<br>  及 transform: scale(1,1); 來取代 display: block;</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"><span class="comment">/*依據 Header 定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*改設定transform的過渡動畫變化效果*/</span></span><br><span class="line"><span class="attribute">transition</span>: transform .<span class="number">2s</span> ease-out;</span><br><span class="line"><span class="comment">/*由display改為transform，一開始設定(x,y)比例為(1,0)為不顯示*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nav</span> &#123;</span><br><span class="line"><span class="comment">/*由display改為transform，設定(x,y)比例為(1,1)*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  此時能夠發現有轉場效果了，但是卻從中間開闔。</p>
<ol start="3">
<li>使用 transform-origin 設定 transform 變化起點在上方<br>讓導覽列從上方開始做上下收放，可使用 transform-origin 這個屬性來達成。<br>預設的屬性值是 center，代表 transform 效果的起始點是在元素的中心。<br>可以看 MDN還有哪些屬性 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin">transform-origin</a></li>
</ol>
<p>  增加transform-origin屬性</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line"><span class="comment">/*依據 Header 定位*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*設定transform的過渡動畫變化效果*/</span></span><br><span class="line"><span class="attribute">transition</span>: transform .<span class="number">2s</span> ease-out;</span><br><span class="line"><span class="comment">/*由display改為transform，一開始設定(x,y)比例為(1,0)為不顯示*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*設定變化原點在上方*/</span></span><br><span class="line"><span class="attribute">transform-origin</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nav</span> &#123;</span><br><span class="line"><span class="comment">/*由display改為transform，設定(x,y)比例為(1,1)*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>最後使用 opacity 讓使用者不會看到開關時文字壓縮<br>在.nav-item上加上opacity: 0 以及 .nav-toggle:checked時.nav-item的樣式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-item</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1.4rem</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>; <span class="comment">/*完全透明*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-toggle</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.nav</span> <span class="selector-class">.nav-item</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: opacity <span class="number">0.2s</span> ease-out <span class="number">0.15s</span>; <span class="comment">/*透明過場設定，最後一個參數為當checked被執行時，緩150毫秒進行過場動畫*/</span></span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>; <span class="comment">/*不透明*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="製作-hamburger-樣式及位置"><a href="#製作-hamburger-樣式及位置" class="headerlink" title="製作 hamburger 樣式及位置"></a>製作 hamburger 樣式及位置</h2><p>利用label 的for 屬性會和input 的 id綁定，就可以點label的時候去觸及input<br>先在html上加入 label，再加上span打上三，暫時製作一個陽春的漢堡排</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;</span>毛小孩星球<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   hamberger --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nav-toggle&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  加上導覽列  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#activity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>近期活動<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#album&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>狗兒相片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#adoption&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>領養資訊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   增加label標籤 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle-label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hamburger&quot;</span>&gt;</span>三<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>設定漢堡排位置<br>先選定 navbar-toggle-label ，使用絕對定位，讓漢堡排從文字流離開<br>然後設定top和bottom都為0，代表這個元素高度跟父元素 header 相等是 60px<br>最後使用display: flex 和 align-items 來設定垂直置中。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar-toggle-label</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">7.5%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>進階版漢堡排：使用span畫線<br>先把國字三刪除，接著改寫 .hamburger的樣式，畫出第一條具備美感的漢堡排中央橫線。<br>選定漢堡.hamburger，寬度設定 30px，高度是 3px，背景顏色則是 #267b98。</p>
<p>.hamburger {<br>  width: 30px;<br>  height: 3px;<br>  background: #267b98;<br>}</p>
<h3 id="使用偽元素增加漢堡另外兩條線"><a href="#使用偽元素增加漢堡另外兩條線" class="headerlink" title="使用偽元素增加漢堡另外兩條線"></a>使用偽元素增加漢堡另外兩條線</h3><p>其他兩條都跟中間這一條外觀相同，所以我們在選擇器 .hamburger後加兩個偽元素選擇 hamburger::before 和 .hamburger::after。<br>但我們還沒有給它任何的 content，還沒有任何的內容，所以基本上是看不到它。<br>我們需要給hamburger::before 和 .hamburger::after一個 content，屬性值設定為一個空值，因為我們只需要利用這個元素的空間來做樣式，不需要內容。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#267b98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="comment">/*給一個空的內容*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="設定偽元素的位置"><a href="#設定偽元素的位置" class="headerlink" title="設定偽元素的位置"></a>設定偽元素的位置</h3><p>如果想給 .hamburger:before 和 .hamburger::after 設定在 .hamburger 的上下方，<br>應該給 .hamburger設定 position: relative<br>.hamburger:before 和 .hamburger::after 設定position: absolute</p>
<p>absolute是<strong>相對於自己最近的父元素來定位的</strong>，<br>如果<strong>不給.hamburger相對定位</strong>，那麼.hamburger:before 和 .hamburger::after的<strong>絕對定位absolute就是相對於body來定位的</strong>。</p>
<p><strong>relative是相對於自己來定位的</strong>，例如：.hamburger{position:relative;top:-50px;},這時.hamburger會以他原本的位置上移50px。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#267b98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hamburger</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/*給一個空的內容*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著移動before和after兩個元素的上下位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>會看到兩個元素已經各上下移動8px，但是偏了一邊，只要在設定absolute的時候給兩個元素left 0即可<br>完整css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hamburger</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#267b98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hamburger</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*給一個空的內容*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hamburger</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="隱藏input-checkbox"><a href="#隱藏input-checkbox" class="headerlink" title="隱藏input-checkbox"></a>隱藏input-checkbox</h2><p>給input-checkbox設定上CSS樣式屬性 visibility: hidden;<br>就會隱藏，但是會看到brand歪一邊，這時候再給input-checkbox設定position: absolute，讓他抽離文字流即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar-toggle</span> &#123;</span><br><span class="line">  <span class="comment">/*不佔空間*/</span></span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>display: none 與 visibility: hidden 的差異 display: none 與 visibility: hidden 都是隱藏元素的方法，差別在於 display: none 會一口氣使操作對象從文字流中拔除，而 visibility: hidden 則像是用一塊白布蓋起來的感覺，畫面上不顯示，但還是會佔一個空間：</p>
<p>在我們剛剛實作的案例中，將 visibility: hidden 搭配上 position: absolute; ，故元素會從文字流中移除，完全和 display: none 是一樣的效果。<br>在我們的情境中這兩種做法都可以，一併介紹給大家知道。<br>未來你可以根據需求判斷要用哪一個方法比較合適。</p>
<h2 id="grid-auto-flow-與-grid-auto-rows"><a href="#grid-auto-flow-與-grid-auto-rows" class="headerlink" title="grid-auto-flow 與 grid-auto-rows"></a>grid-auto-flow 與 grid-auto-rows</h2><p>grid-auto-flow 是控制當沒有宣告子元素要被擺在網格的特定位置時，子元素將根據特定的流向被自動擺放到網格當中。<br><strong>grid-auto-flow 的預設值為 row</strong>，意思是子元素將<strong>逐列</strong>被擺放到網格中。<br>假設第一行有兩列，放滿後會被推向下一行，若是有設定grid-auto-rows高，那麼會自動生成下一行高，並把元素推下一行的第一列。</p>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: row;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>換個方向可以手動更改<strong>grid-auto-flow 為 column</strong>，意思是子元素將<strong>逐行</strong>被放到網格中。<br>假設第一行只有一列，第二行也只有一列，子元素會由上而下，放滿後會被推向下一列第一行，若是有設定grid-auto-columns寬，那麼自動生成的下一列寬，並把元素推下一列的第一行。</p>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: column;</span><br><span class="line">  grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h2><p>可以透過父層先劃分好格子，然後再選擇各個子元素，將各個子元素使用grid-area各自命名，最後回到父層使用grid-template-areas來安排子元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.banner-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr); </span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">250px</span>);</span><br><span class="line">  grid-template-areas:</span><br><span class="line">    <span class="string">&quot;main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;left left right right&quot;</span>;</span><br><span class="line">  grid-gap: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-banner</span> &#123;</span><br><span class="line">  grid-area: main;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-banner-left</span> &#123;</span><br><span class="line">  grid-area: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-banner-right</span> &#123;</span><br><span class="line">  grid-area: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>CSS</tag>
        <tag>切版</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-切版練習-T恤商店</title>
    <url>/2021/09/15/s2-layout-tshirt-shop/</url>
    <content><![CDATA[<p><strong><a href="https://doug0849.github.io/layout-exercise">完成作品</a></strong></p>
<p><strong>此編記錄自己從零到全部的實作切版畫面時所碰到的步驟處理及狀況處裡筆記。</strong></p>
<span id="more"></span>
<h1 id="Step1：先將得到的設計稿框出HTML的結構"><a href="#Step1：先將得到的設計稿框出HTML的結構" class="headerlink" title="Step1：先將得到的設計稿框出HTML的結構"></a>Step1：先將得到的設計稿框出HTML的結構</h1><img src="/2021/09/15/s2-layout-tshirt-shop/html-wireframe.png" class="">

<h1 id="Step2-將HTML結構寫出來"><a href="#Step2-將HTML結構寫出來" class="headerlink" title="Step2: 將HTML結構寫出來"></a>Step2: 將HTML結構寫出來</h1><img src="/2021/09/15/s2-layout-tshirt-shop/build-html.png" class="">

<h1 id="step3-reset-CSS-並設定-common-CSS"><a href="#step3-reset-CSS-並設定-common-CSS" class="headerlink" title="step3: reset CSS 並設定 common CSS"></a>step3: reset CSS 並設定 common CSS</h1><h1 id="step4-開始切版"><a href="#step4-開始切版" class="headerlink" title="step4: 開始切版"></a>step4: 開始切版</h1><h2 id="第一小時紀錄進度-4-30"><a href="#第一小時紀錄進度-4-30" class="headerlink" title="第一小時紀錄進度(4:30)"></a>第一小時紀錄進度(4:30)</h2><img src="/2021/09/15/s2-layout-tshirt-shop/01hr.png" class="">

<h2 id="第二小時紀錄進度-6-30"><a href="#第二小時紀錄進度-6-30" class="headerlink" title="第二小時紀錄進度(6:30)"></a>第二小時紀錄進度(6:30)</h2><img src="/2021/09/15/s2-layout-tshirt-shop/02hr.png" class="">

<h2 id="第三小時紀錄進度-7-30"><a href="#第三小時紀錄進度-7-30" class="headerlink" title="第三小時紀錄進度(7:30)"></a>第三小時紀錄進度(7:30)</h2><img src="/2021/09/15/s2-layout-tshirt-shop/03hr.png" class="">

<p>沒什麼進度，遇到了search icon換位置的問題，<br>因為上方的按鈕都用絕對定位，但原本將search icon放在一個div.function裏頭，這個div也是絕對定位，導致search icon無法參考頁面最左上角問題(會去參考到div.function)，所以將他移出div.function，才可以參考navbar位置定位，之後畫面縮放，用grid將各個元素位置放進去即可</p>
<p>休息半小時</p>
<h2 id="第四小時紀錄進度-9-00"><a href="#第四小時紀錄進度-9-00" class="headerlink" title="第四小時紀錄進度(9:00)"></a>第四小時紀錄進度(9:00)</h2><img src="/2021/09/15/s2-layout-tshirt-shop/04hr.png" class="">
<p>還是沒什麼進度，碰到漢堡排點空白處會無法展開menu，後來發現是因為使用了flex box,父層的label變成緊貼LOGO前面，後來研究半天，要先把它換成display: block，然後設定絕對位置到左上角，子層的span線條就會跟著移動，再設定子層為position: relative，偽元素::before ::after就可以調整成absolute後移動位置。</p>
<h2 id="第五小時紀錄進度-10-00"><a href="#第五小時紀錄進度-10-00" class="headerlink" title="第五小時紀錄進度(10:00)"></a>第五小時紀錄進度(10:00)</h2><img src="/2021/09/15/s2-layout-tshirt-shop/04hr.png" class="">
<p>比較有進度了，目前做到排列T畜產品中，過程中碰到照片超出block，但使用overflow:hidden無法隱藏，後來發現是要設定在block不是設定在圖片上。</p>
<h2 id="第六小時紀錄進度-11-00"><a href="#第六小時紀錄進度-11-00" class="headerlink" title="第六小時紀錄進度(11:00)"></a>第六小時紀錄進度(11:00)</h2><img src="/2021/09/15/s2-layout-tshirt-shop/05hr.png" class="">
<p>遇到的問題是在衣服照片hover時，要用一個block把兩張圖包起來，然後要疊兩層圖，一張圖不需要設定position，，一張是position:absolute，這時候不需要設定position的這張圖要比設定絕對定位這張來得小，這樣父層才可以設定高度是auto，隨著子元素圖片放大縮小，但是如果放大張的，那小張的那張會蓋不過大張的底圖。父層會根據大張的那張放大縮小。</p>
<h2 id="第七八小時記錄進度-1-00"><a href="#第七八小時記錄進度-1-00" class="headerlink" title="第七八小時記錄進度(1:00)"></a>第七八小時記錄進度(1:00)</h2><p>完成!<br>最後footer的元素流動一直搞不定，搞半天後來才發現是自己不小心設定到flex box，但有一個重點要在一次提醒自己並且記清楚，block屬性下的子元素，每多一個元素一定都會自動換行，不需要設定其他CSS屬性，若元素不希望他換行，可以設定display: inline-block; 下個元素就不會換行了，若突然他沒換行，表示父元素絕對有設定到其他display屬性。</p>
<p>另外在最下方的input欄，學到一個新的函式value，calc( value - value)：<br>此 calc()函數用一個表達式作為它的參數，用這個表達式的結果作為值。這個表達式可以是任何如下操作符的組合，採用標準操作符處理法則的簡單表達式。</p>
<p>+<br>加法。<br>-<br>減法。<br>*<br>乘法，乘數中至少有一個是 <number>。<br>/<br>除法，除數（/ 右面的數）必須是 <number>。<br>表達式中的運算對象可以使用任意 <length> 值。如果你願意，你可以在一個表達式中混用這類值的不同單位。在需要時，你還可以使用小括號來建立計算順序。</p>
<p>input欄位的長度，依整體最大寬度的50% - 固定長度，來控制input欄位隨視窗縮放時調整大小。</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>CSS</tag>
        <tag>切版</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo提交部落格的sitemap到Google Search Console</title>
    <url>/2021/09/11/submit-sitemap-to-google-by-hexo/</url>
    <content><![CDATA[<p>Google Search Console工具可以用來查看使用者搜尋什麼關鍵字而觸及到你</p>
<p>想提升搜尋引擎最佳化 <strong>SEO</strong> (Search Engine Optimization，SEO) ，<br>可以把網站的sitemap提交到Google Search Console ，就可以在後台了解：</p>
<span id="more"></span>

<ol>
<li>網頁搜尋總點擊次數</li>
<li>使用者點擊錯誤的網址數量</li>
<li>使用者會搜尋什麼關鍵字而到你的網站</li>
<li>使用者是從哪些國家搜尋的</li>
<li>行動裝置可用性</li>
</ol>
<p>…等等相關。</p>
<p>其中，還可以查看「連結」：查看外部連結，哪些最熱門，來你的部落格的人又是點擊了哪些外部連結。</p>
<h2 id="產生-Sitemap-xml"><a href="#產生-Sitemap-xml" class="headerlink" title="產生 Sitemap.xml"></a>產生 Sitemap.xml</h2><p>在 Hexo 有一個 Plugin 叫做 hexo-generator-sitemap，可以幫助生產網站的 Sitemap.xml，就可以拿這份檔案去提交了唷！來看以下簡單三個步驟。</p>
<h3 id="安裝-Install"><a href="#安裝-Install" class="headerlink" title="安裝 Install"></a>安裝 Install</h3><ol>
<li><p>在部落格資料夾使用終端機輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li>
<li><p>設定 Config</p>
</li>
</ol>
<p>打開你的部落格資料夾，打開根目錄的 _config.yml，在最後面貼上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">./sitemap_template.xml</span> <span class="comment"># 這行非必填，除非你想設定自訂的樣板</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新編譯一次，發布新內容：</li>
</ol>
<p>hexo g -d<br>檢查看看有沒有順利產生 Sitemap.xml？</p>
<p><a href="https://doug0849.github.io/sitemap.xml">https://doug0849.github.io/sitemap.xml</a> =&gt; 我的<br>提交至 Google Search Console<br>打開 Google Search Console</p>
<p>進入「索引 &gt; Sitemap」</p>
<p>「新增 Sitemap」：sitemap.xml</p>
<p>測試sitemap.xml可不可以讀取</p>
<ol>
<li>可以點選sitemap.xml進去後右上角有個開啟sitemap測試</li>
<li>使用左邊的網址審查 輸入完整位置 <a href="https://doug0849.github.io/sitemap.xml">https://doug0849.github.io/sitemap.xml</a> ，之後點選右上方測試線上網址</li>
</ol>
<p>若都沒問題，就是Google問題，通常只能等了，也許需要等待好幾天甚至是一週的時間sitemap狀態才會轉為正常。</p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>sitemap</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-4-卡牌配對遊戲</title>
    <url>/2021/10/05/memorizing-game/</url>
    <content><![CDATA[<p>此篇記錄卡牌配對遊戲製作過程，用來提醒自己的技術筆記<br><strong><a href="https://doug0849.github.io/pair-cards-memorizing-game/">實作練習作品</a></strong></p>
<span id="more"></span>
<h1 id="第一張牌"><a href="#第一張牌" class="headerlink" title="第一張牌"></a>第一張牌</h1><p>使用flex佈局來完成第一張牌，一共四排一排13張牌，透過flex來指定每張牌佔位比例，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#cards</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">7%</span> <span class="number">0</span> <span class="number">1</span>; <span class="comment">/* 每個 item 分配容器寬度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8vw</span>; <span class="comment">/* 依視窗的寬度等比例變化 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>flex 縮寫的表定順序是 flex-grow → flex-shrink → flex-basis，不過因為 flex 是高容錯的設計，而這裡指定 7% 和 flex-shink &amp; flex-grow 預期吃到的參數格式不一樣，因此自動當成了 flex-basis 的值。</p>
<h1 id="flex-grow：分配剩餘空間"><a href="#flex-grow：分配剩餘空間" class="headerlink" title="flex-grow：分配剩餘空間"></a>flex-grow：分配剩餘空間</h1><p>設定 0 的意思是不要分配剩餘空間。</p>
<p>如果是 1 或 1 以上的數字，這個元素會佔用剩餘的空間，並且根據設定的數字大小來彈性調整分配方式。<br>flex-grow: 1 代表平分，若是 flex-grow: 2 代表中間佔用的空間會是右邊的兩倍，還有更多可以查官方文件。</p>
<h1 id="flex-shrink：空間不足如何收縮"><a href="#flex-shrink：空間不足如何收縮" class="headerlink" title="flex-shrink：空間不足如何收縮"></a>flex-shrink：空間不足如何收縮</h1><p>如果視窗變小，flex item 就需要收縮，減少自己所佔的空間，而 flex-shrink。這裡我們設定 1，我們想讓元素等比例收縮；如果設定比 1 更高的數字，代表我們要深入控制每個元素的收縮比例。</p>
<h1 id="flex-basis：分配寬度"><a href="#flex-basis：分配寬度" class="headerlink" title="flex-basis：分配寬度"></a>flex-basis：分配寬度</h1><p>flex-basis 可以控制 item 在容器裡佔的寬度，在這裡我們使用百分比，就是以容器的寬度為 100%。<br>由於我們希望 52 張牌能以 4*13 排列，每一橫列要有 13 張卡片，100 / 13 = 7.7，這裡暫時抓 7% 的比例，剩餘一點空隙就當成 margin。</p>
<h1 id="卡片高度：與寬度等比例縮放"><a href="#卡片高度：與寬度等比例縮放" class="headerlink" title="卡片高度：與寬度等比例縮放"></a>卡片高度：與寬度等比例縮放</h1><p>由於卡片的寬度根據容器寬度變化，卡片高度也需要等比例變化，容器寬度的預設值為視窗大小，所以這裡我們把卡片高度設定為 8vw，代表視窗大小的 8%。這樣就寬高就能等比例的變化。</p>
<h1 id="使用-last-child-及-transform來倒轉數字"><a href="#使用-last-child-及-transform來倒轉數字" class="headerlink" title="使用:last-child 及 transform來倒轉數字"></a>使用:last-child 及 transform來倒轉數字</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="當物件的屬性與函式-變數名稱相同時，可以省略不寫："><a href="#當物件的屬性與函式-變數名稱相同時，可以省略不寫：" class="headerlink" title="當物件的屬性與函式/變數名稱相同時，可以省略不寫："></a>當物件的屬性與函式/變數名稱相同時，可以省略不寫：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原本的寫法</span></span><br><span class="line"><span class="keyword">const</span> view = &#123;</span><br><span class="line">  <span class="attr">displayCards</span>: <span class="function"><span class="keyword">function</span> <span class="title">displayCards</span>(<span class="params"></span>) </span>&#123; ...  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略後的寫法</span></span><br><span class="line"><span class="keyword">const</span> view = &#123;</span><br><span class="line">  <span class="function"><span class="title">displayCards</span>(<span class="params"></span>)</span> &#123; ...  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於我們會把 view 以及之後的 model 和 controller 當成模組來使用，目的是創造出一個命名空間 (namespace)，把相關的變數和函式都分類進去，因此屬性名稱和函式名稱基本上都會是同名的，不會特地取新的名字，所以之後我們都會省略屬性名稱不寫，看起來會比較簡潔。</p>
<h1 id="透過switch來轉換數字成為J-Q-K"><a href="#透過switch來轉換數字成為J-Q-K" class="headerlink" title="透過switch來轉換數字成為J, Q, K"></a>透過switch來轉換數字成為J, Q, K</h1><p>由於狀況有 4 種，在這裡用 switch 會比 if/else 清楚，若是 1、11、12、13 的狀況，則分別回傳 A、J、Q、K，如果數字是 2-10，則把數字原封不動地回傳。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">transformNumber (number) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;J&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;K&#x27;</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="使用Array-from-Array-52-key-，來生成連續數字陣列"><a href="#使用Array-from-Array-52-key-，來生成連續數字陣列" class="headerlink" title="使用Array.from(Array(52).key())，來生成連續數字陣列"></a>使用Array.from(Array(52).key())，來生成連續數字陣列</h1><p>Array.from 可以從「類似陣列」的物件來建立陣列<br>Array(52)，它會產生一個有 52 個元素的空陣列：<br>Array(52).keys()會變成一個迭代器，需要使用類似for迴圈之類的迭代，才有辦法生成。<br>ES6 推出了 Array.from() 之後，就可以搭配迭代器來生成陣列：</p>
<img src="/2021/10/05/memorizing-game/1.png" class="">


<h1 id="產生-52-個-DOM-元素並拼裝-template"><a href="#產生-52-個-DOM-元素並拼裝-template" class="headerlink" title="產生 52 個 DOM 元素並拼裝 template"></a>產生 52 個 DOM 元素並拼裝 template</h1><p>有了連續數字陣列以後</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">displayCards</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rootElement = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#cards&quot;</span>);</span><br><span class="line">  rootElement.innerHTML = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(<span class="number">52</span>).keys()).map(<span class="function"><span class="params">index</span> =&gt;</span> <span class="built_in">this</span>.getCardElement(index)).join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>用 map 迭代陣列，並依序將數字丟進 view.getCardElement()，會變成有 52 張卡片的陣列；</li>
<li>接著要用 join(“”) 把陣列合併成一個大字串，才能當成 HTML template 來使用；</li>
<li>把組合好的 template 用 innerHTML 放進 #cards 元素裡。</li>
</ul>
<h1 id="洗牌演算法：Fisher-Yates-Shuffle"><a href="#洗牌演算法：Fisher-Yates-Shuffle" class="headerlink" title="洗牌演算法：Fisher-Yates Shuffle"></a>洗牌演算法：Fisher-Yates Shuffle</h1><p>先看一下 JavaScript 的實作版本 getRandomNumberArray，參數 count 表示陣列的長度，count 會傳入 52。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getRandomNumberArray</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> number = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(count).keys())</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = number.length - <span class="number">1</span>; index &gt; <span class="number">0</span>; index--) &#123;</span><br><span class="line">      <span class="keyword">let</span> randomIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (index + <span class="number">1</span>))</span><br><span class="line">      ;[number[index], number[randomIndex]] = [number[randomIndex], number[index]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>生成連續數字陣列<br>const number = Array.from(Array(count).keys()) - 生成一個長度為 count 的連續數字陣列。這個之前介紹過了。</li>
</ol>
<p>我們先假設 count 是 7，那麼 number 就是 [0, 1, 2, 3, 4, 5, 6]。</p>
<p>選定想交換的位置<br>let index = number.length - 1 取出最後一項。</p>
<p>let randomIndex = Math.floor(Math.random() * (index + 1))，找到一個隨機項目。</p>
<ol start="2">
<li>交換陣列元素<br>[number[index], number[randomIndex]] = [number[randomIndex], number[index]]<br>這段是運用了 ES6 的解構賦值語法，意思是讓 number[randomIndex] 和 number[index] 交換，等同於：</li>
</ol>
<p>temp = number[index]<br>number[index] = number[randomIndex]<br>number[randomIndex] = temp<br>此時我們的 index 是 6，如果假設 randomIndex 是 2，那麼 number 就會變成：[0, 1, 6, 3, 4, 5, 2]</p>
<ol start="3">
<li>解構賦值<br>以前要為變數賦值，只能一個個慢慢寫：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>有了 ES6 比較厲害的解構賦值 (destructuring assignment) 之後，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><strong>只要等號兩邊的模式相同 (例如都是 [] 或都是 {})，左邊的變數就會被賦予右邊的對應值。</strong></p>
<p>不可省略的分號<br>注意在程式碼裡有一個分號 ;，他不是寫錯的。</p>
<p><strong>在 JavaScript 的分號代表「這個執行語句結束了」，大部分的分號都是可以省略的，這裡剛好是不可以省略的。</strong><br>因為前面呼叫了 Math.floor() 這個函式庫，如果沒有加上分號，會和後面的 [] 連起來，被解讀成 Math.floor()[]，雖然沒有實際的意義，但因為瀏覽器對 JavaScript 的語法解析很寬鬆，這裡會發生錯誤，所以需要加上分號變成 Math.floor();[] 來把執行語句隔開。</p>
<h1 id="設定遊戲狀態"><a href="#設定遊戲狀態" class="headerlink" title="設定遊戲狀態"></a>設定遊戲狀態</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> GAME_STATE = &#123;</span><br><span class="line">  <span class="attr">FirstCardAwaits</span>: <span class="string">&quot;FirstCardAwaits&quot;</span>,</span><br><span class="line">  <span class="attr">SecondCardAwaits</span>: <span class="string">&quot;SecondCardAwaits&quot;</span>,</span><br><span class="line">  <span class="attr">CardsMatchFailed</span>: <span class="string">&quot;CardsMatchFailed&quot;</span>,</span><br><span class="line">  <span class="attr">CardsMatched</span>: <span class="string">&quot;CardsMatched&quot;</span>,</span><br><span class="line">  <span class="attr">GameFinished</span>: <span class="string">&quot;GameFinished&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用switch來控制遊戲狀態</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dispatchCardAction (card) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!card.classList.contains(<span class="string">&#x27;back&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">this</span>.currentState) &#123;</span><br><span class="line">    <span class="keyword">case</span> GAME_STATE.FirstCardAwaits:</span><br><span class="line">      view.flipCard(card)</span><br><span class="line">      model.revealedCards.push(card)</span><br><span class="line">      <span class="built_in">this</span>.currentState = GAME_STATE.SecondCardAwaits</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> GAME_STATE.SecondCardAwaits:</span><br><span class="line">      view.flipCard(card)</span><br><span class="line">      model.revealedCards.push(card)</span><br><span class="line">      <span class="comment">// 判斷配對是否成功</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;this.currentState&#x27;</span>, <span class="built_in">this</span>.currentState)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;revealedCards&#x27;</span>, model.revealedCards.map(<span class="function"><span class="params">card</span> =&gt;</span> card.dataset.index))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="展開運算子及其餘參數"><a href="#展開運算子及其餘參數" class="headerlink" title="展開運算子及其餘參數"></a>展開運算子及其餘參數</h1><p>展開運算子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">999</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...numbers)</span><br><span class="line"><span class="comment">// instead of Math.max(5, 6, 8, 9, 11, 999);</span></span><br></pre></td></tr></table></figure>

<p>其餘參數<br>「把值蒐集起來變成陣列」的情況，在下例中，不確定會傳給sum 函式幾個參數，但總之我們想要在 sum 函式裡使用陣列處理方法，這時候也可以用 … 把參數轉變成一個陣列來迭代：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...numbers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">  numbers.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">    result += number</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<h1 id="改寫flipCard，function帶入其餘參數"><a href="#改寫flipCard，function帶入其餘參數" class="headerlink" title="改寫flipCard，function帶入其餘參數"></a>改寫flipCard，function帶入其餘參數</h1><p>flipCard改寫為可以傳入1個或是2個參數 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">flipCards (...cards) &#123;</span><br><span class="line">    cards.map(<span class="function"><span class="params">card</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (card.classList.contains(<span class="string">&#x27;back&#x27;</span>)) &#123;</span><br><span class="line">        card.classList.remove(<span class="string">&#x27;back&#x27;</span>)</span><br><span class="line">        card.innerHTML = <span class="built_in">this</span>.getCardContent(<span class="built_in">Number</span>(card.dataset.index))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      card.classList.add(<span class="string">&#x27;back&#x27;</span>)</span><br><span class="line">      card.innerHTML = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h1 id="改寫pairCard，function帶入其餘參數"><a href="#改寫pairCard，function帶入其餘參數" class="headerlink" title="改寫pairCard，function帶入其餘參數"></a>改寫pairCard，function帶入其餘參數</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">pairCards</span>(<span class="params">...cards</span>)</span> &#123;</span><br><span class="line">  cards.map(<span class="function"><span class="params">card</span> =&gt;</span> &#123;</span><br><span class="line">    card.classList.add(<span class="string">&#x27;paired&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS動畫特效"><a href="#CSS動畫特效" class="headerlink" title="CSS動畫特效"></a>CSS動畫特效</h1><p>在 CSS3 有提供一套 CSS animations 的現成動畫工具，需要透過關鍵影格 @keyframes 來設定動畫的漸變流程</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrong</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: wrongAnimation;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> wrongAnimation &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ffd54f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用 @keyframes 指定了一個叫 wrongAnimation 的動畫流程，在 keyframes 裡可以用 from 和 to 來指定動畫漸變起點/終點，使用 to 來指定「當動畫發生時，該元素要逐漸加上黃色邊框」。</p>
<p>設定好 keyframes 之後，要呼叫它。呼叫的位置在 .wrong 類別裡，在呼叫動畫時我們一併指定了：</p>
<p>animation-duration: 0.2s - 動畫要持續 0.2 秒，也就是「逐漸加入黃色邊框」的效果要用 0.2 秒來跑完。<br>animation-iteration-count: 5 - 動畫要重覆 5 次</p>
<h1 id="整合動畫進JS"><a href="#整合動畫進JS" class="headerlink" title="整合動畫進JS"></a>整合動畫進JS</h1><p>回到 JavaScript 來整合，我們先加入一個函式 view.appendWrongAnimation：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// view</span></span><br><span class="line"><span class="function"><span class="title">appendWrongAnimation</span>(<span class="params">...cards</span>)</span> &#123;</span><br><span class="line">  cards.map(<span class="function"><span class="params">card</span> =&gt;</span> &#123;</span><br><span class="line">    card.classList.add(<span class="string">&#x27;wrong&#x27;</span>)</span><br><span class="line">    card.addEventListener(<span class="string">&#x27;animationend&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span>   event.target.classList.remove(<span class="string">&#x27;wrong&#x27;</span>), &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>這個函式裡會為卡片加入 .wrong 類別，一旦加入就會開始跑動畫。另外我們用事件監聽器來綁定**動畫結束事件 (animationend)**，一旦動畫跑完一輪，就把 .wrong 這個 class 拿掉。</p>
<p>最後的 {once: true} 是要求在事件執行一次之後，就要卸載這個監聽器。因為同一張卡片可能會被點錯好幾次，每一次都需要動態地掛上一個新的監聽器，並且用完就要卸載。</p>
<p>最後到 controller.dispatchCardAction 中，在配對失敗的流程中呼叫 view，注意這一行要加在 setTimeout 之前 ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判斷配對是否成功</span></span><br><span class="line">       <span class="keyword">if</span> (model.isRevealedCardsMatched()) &#123;</span><br><span class="line">         <span class="comment">// 配對成功</span></span><br><span class="line">         view.renderScore(model.score += <span class="number">10</span>)</span><br><span class="line">         <span class="built_in">this</span>.currentState = GAME_STATE.CardsMatched</span><br><span class="line">         view.pairCards(...model.revealedCards)</span><br><span class="line">         model.revealedCards = []</span><br><span class="line">         <span class="built_in">this</span>.currentState = GAME_STATE.FirstCardAwaits</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 配對失敗</span></span><br><span class="line">         <span class="built_in">this</span>.currentState = GAME_STATE.CardsMatchFailed</span><br><span class="line">         view.appendWrongAnimation(...model.revealedCards)  <span class="comment">// add this</span></span><br><span class="line">         <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.resetCards, <span class="number">1000</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS語法使用</title>
    <url>/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="以下圖源均來自："><a href="#以下圖源均來自：" class="headerlink" title="以下圖源均來自："></a>以下圖源均來自：<a href="https://tw.alphacamp.co/" title="" target="">Alpha Camp課程</a></h1><h1 id="觀念隨記"><a href="#觀念隨記" class="headerlink" title="觀念隨記"></a>觀念隨記</h1><p>階層式樣式表（英語：Cascading Style Sheets，縮寫：CSS；又稱串樣式列表、級聯樣式表、串接樣式表、階層式樣式表）</p>
<span id="more"></span>
<p>用戶體驗 (UX) 研究表示，在<strong>桌機</strong>的閱讀體驗中，理想上<strong>每行的字元應該在 50 到 75 之間</strong>才能維持良好的易讀性。更有其他研究表示，其實這個範圍<strong>可以擴大到 85 個字元。</strong></p>
<p>認識 display 屬性<br>所有的 HTML 元素都會有一個預設的 display 值，預設值通常是 block 或 inline 其中一個。</p>
<p>塊元素(block element)</p>
<ul>
<li>address - 地址</li>
<li>blockquote - 块引用</li>
<li>center - 举中对齐块</li>
<li>dir - 目录列表</li>
<li>div - 常用块级容易，也是css layout的主要标签</li>
<li>dl - 定义列表</li>
<li>fieldset - form控制组</li>
<li>form - 交互表单</li>
<li>h1 - 大标题</li>
<li>h2 - 副标题</li>
<li>h3 - 3级标题</li>
<li>h4 - 4级标题</li>
<li>h5 - 5级标题</li>
<li>h6 - 6级标题</li>
<li>hr - 水平分隔线</li>
<li>isindex - input prompt</li>
<li>menu - 菜单列表</li>
<li>noframes - frames可选内容，（对于不支持frame的浏览器显示此区块内容</li>
<li>noscript - ）可选脚本内容（对于不支持script的浏览器显示此内容）</li>
<li>ol - 排序表单</li>
<li>p - 段落</li>
<li>pre - 格式化文本</li>
<li>table - 表格</li>
<li>ul - 非排序列表</li>
</ul>
<p>內聯元素(inline element)</p>
<ul>
<li>a - 锚点</li>
<li>abbr - 缩写</li>
<li>acronym - 首字</li>
<li>b - 粗体(不推荐)</li>
<li>bdo - bidi override</li>
<li>big - 大字体</li>
<li>br - 换行</li>
<li>cite - 引用</li>
<li>code - 计算机代码(在引用源码的时候需要)</li>
<li>dfn - 定义字段</li>
<li>em - 强调</li>
<li>font - 字体设定(不推荐)</li>
<li>i - 斜体</li>
<li>img - 图片</li>
<li>input - 输入框</li>
<li>kbd - 定义键盘文本</li>
<li>label - 表格标签</li>
<li>q - 短引用</li>
<li>s - 中划线(不推荐)</li>
<li>samp - 定义范例计算机代码</li>
<li>select - 项目选择</li>
<li>small - 小字体文本</li>
<li>span - 常用内联容器，定义文本内区块</li>
<li>strike - 中划线</li>
<li>strong - 粗体强调</li>
<li>sub - 下标</li>
<li>sup - 上标</li>
<li>textarea - 多行文本输入框</li>
<li>tt - 电传文本</li>
<li>u - 下划线</li>
<li>var - 定义变量</li>
</ul>
<hr>
<h2 id="Rest-default-CSS"><a href="#Rest-default-CSS" class="headerlink" title="Rest default CSS"></a>Rest default CSS</h2><p>每家瀏覽器都有預設不同的 CSS 樣式，造成前端工程師網頁開發上一個頭痛的問題：<br>開發時用 CSS 設計好整齊美麗的排版，在 Google Chrome 上看起沒問題，用 IE 打開卻全變了樣，且市面上還有 Firefox、Safari、Opera 等其他家瀏覽器，</p>
<p>所以實務開發中，CSS起手式通常會是 Reset CSS，先將各大瀏覽器的預設樣式還原，有個乾淨的開始，再來制訂專案的樣式。</p>
<p>可以直接使用開源的 CSS Reset 工具如：</p>
<ol>
<li><a href="https://meyerweb.com/eric/tools/css/reset/" title="" target="">Reset CSS</a> ，這是 CSS 大師 Eric Meyer 整理出的版本</li>
<li><a href="https://necolas.github.io/normalize.css/" title="" target="">Normalize.css</a> 這是 Bootstrap 目前已經內建使用的版本</li>
<li>或是自行制訂</li>
</ol>
<hr>
<h2 id="網頁-單位-px-em-rem"><a href="#網頁-單位-px-em-rem" class="headerlink" title="網頁 ( 單位 ) px, em, rem, %"></a>網頁 ( 單位 ) px, em, rem, %</h2><h3 id="px："><a href="#px：" class="headerlink" title="px："></a>px：</h3><p>絕對單位代表螢幕中每個「點」( pixel )。</p>
<h3 id="em："><a href="#em：" class="headerlink" title="em："></a>em：</h3><p>相對單位，每個子元素透過「倍數」乘以父元素的 px 值。</p>
<h3 id="rem："><a href="#rem：" class="headerlink" title="rem："></a>rem：</h3><p>相對單位，每個元素透過「倍數」乘以根元素(瀏覽器預設)也就是html元素標籤的 px 值，通常瀏覽器預設為 16 px。<br>使用 rem 的好處是，專案一複雜，很容易忘記父元素是多少大小，用 rem 不用特別去記。或當父元素字體大小突然被改動時，用 rem 不會受到連帶影響。</p>
<h3 id="："><a href="#：" class="headerlink" title="%："></a>%：</h3><p>相對單位，每個子元素透過「百分比」乘以父元素的 px 值</p>
<hr>
<h1 id="RWD重點筆記"><a href="#RWD重點筆記" class="headerlink" title="RWD重點筆記"></a>RWD重點筆記</h1><ol>
<li>由小螢幕到大螢幕，mobile first。</li>
<li>使用media query以不同Breakpoint來設定不同階層的樣式</li>
<li>Breakpoint會設在各種螢幕尺寸變化的中間，例如常見的有：320px、480px、720px、768px、960px、1024px。</li>
</ol>
<p>每設一個 breakpoint 意味需要準備多一份 CSS 樣式，要抓得多細是看設計的需求。</p>
<p>除了幾個在設備間切換的主要分界點，也會設定次要分界點來調整比較細微的 CSS 變化，像是元素的邊距、避免文字超過頁面寬度，或是調整圖片尺寸。</p>
<h2 id="media-queries使用"><a href="#media-queries使用" class="headerlink" title="media queries使用"></a>media queries使用</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;...//styles&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;...//styles&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>) &#123;...//styles&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用 and、or 或 not 等運算子。</p>
<h2 id="import-其他文件"><a href="#import-其他文件" class="headerlink" title="@import 其他文件"></a>@import 其他文件</h2><p>如果樣式太多想要把文件拆開，可以使用 @import 來導入其他文件，仍然可以在同一份 CSS 裡統一管理網站樣式。</p>
<p>運用 url() 來載入文件，仍然可以串接 media type and feature：<br>@import url(‘styles.css’) screen and (max-width: 670px);</p>
<hr>
<h1 id="關於CSS整體優先級"><a href="#關於CSS整體優先級" class="headerlink" title="關於CSS整體優先級"></a>關於CSS整體優先級</h1><h2 id="瀏覽器開發商的優先級"><a href="#瀏覽器開發商的優先級" class="headerlink" title="瀏覽器開發商的優先級"></a>瀏覽器開發商的優先級</h2><p>style sheets 的來源可以分為三種：(由上而下)</p>
<ol>
<li>User agent origin：由「瀏覽器廠商」制定。</li>
</ol>
<ul>
<li>所以後來產生了重置樣式的工具 <a href="https://meyerweb.com/eric/tools/css/reset/">Reset CSS</a>、<a href="https://necolas.github.io/normalize.css/">Normalize CSS</a> 等，就是用來解決不同廠牌瀏覽器下造成的預設樣式偏差的問題，讓開發者得以在一致的基礎上，建構網頁 CSS 樣式設計。</li>
</ul>
<ol start="2">
<li>User origin：由「瀏覽器使用者」制定。</li>
</ol>
<ul>
<li>可以覆蓋掉 user agent origin 的樣式。通常能在你的瀏覽器右上角找到設定的地方，以 Firefox 為例，使用者可「偏好設定 &gt; 語言與外觀」中，自訂字型、字體大小等樣式</li>
</ul>
<ol start="3">
<li>Author origin：由「網頁開發者」制定。</li>
</ol>
<ul>
<li>優先級最高，可以覆蓋掉上述兩個來源的定義。而載入 CSS 樣式到 HTML 的方法有很多種。</li>
</ul>
<hr>
<h2 id="style-sheets-優先級"><a href="#style-sheets-優先級" class="headerlink" title="style sheets 優先級"></a>style sheets 優先級</h2><ol>
<li>HTML文檔內直接設定元素標籤的</li>
<li>HTML文檔內由上而下，越下面大於越上面</li>
<li>載入的CSS樣式表，越優先載入的大於後面載入的，例如</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange; <span class="comment">/* 第二優先 */</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 最優先 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(style-<span class="number">2</span>.css)</span><br><span class="line">  div &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;  <span class="comment">/*第三，優先於style-2*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>style-2.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(style-<span class="number">2</span>.css)</span><br><span class="line">  div &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red; <span class="comment">/*最後*/</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="CSS-選擇器的優先級"><a href="#CSS-選擇器的優先級" class="headerlink" title="CSS 選擇器的優先級"></a>CSS 選擇器的優先級</h2><p>網頁開發者制定樣式是透過多種 CSS 選擇器，選取到特定的元素來指定樣式。<br>在談論 CSS 優先級問題時，我們會把選擇器分成以下三個等級：</p>
<p>等級一：以 ID 選擇器為代表，例如#article。<br>等級二：以 Class 選擇器為代表，另外包括屬性選擇器、偽類選擇器，例如 .container 、[type=”radio”]、:hover。<br>等級三：以 Element 選擇器為代表，另外包括偽元素選擇器，例如 div、::before。<br>優先級是，等級一 &gt; 二 &gt; 三，CSS選擇器有一個分數機制，可以看成一個數學比大小的問題。<br>一個類別都有一個分數<br>等級一:ID類別:0分(百位) - 等級二:class類別:0分(十位) - 等級三:Element類別: 0分(個位)</p>
<p>每當選擇器列出多一個class名稱時，例如 .container<br>這時候class就會+1分<br>等級一:ID類別:0分(百位) - 等級二:class類別:1分(十位) - 等級三:Element類別: 0分(個位)<br>總分10分</p>
<p>再來選擇器多一個element元素名稱時，例如 div<br>這時候Element就會+1分<br>等級一:ID類別:0分(百位) - 等級二:class類別:1分(十位) - 等級三:Element類別: 1分(個位)<br>總分11分</p>
<p>這時候這兩個選擇器有不一樣樣式內容，這時候div.container會優先於.container</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CSS優先級總結"><a href="#CSS優先級總結" class="headerlink" title="CSS優先級總結"></a>CSS優先級總結</h2><p>總而言之，言而總之</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/CSS_level.png" class="">
<center>圖源：<a href="https://tw.alphacamp.co/" title="" target="">Alpha Camp課程</a> </center>

<h2 id="CSS撰寫注意三件事"><a href="#CSS撰寫注意三件事" class="headerlink" title="CSS撰寫注意三件事"></a>CSS撰寫注意三件事</h2><p>避免掉入 CSS 樣式優先集泥潭中的原則就是<strong>千萬不要因為「某個選擇器看起來很厲害」、「某個選擇器可以一擊必殺」隨意使用</strong>，請把以下三點放在心上：</p>
<ol>
<li>不使用 !important：除非你有很好的理由，否則千萬別輕易放大絕招，導致日後難維護。</li>
<li>遵守內容和樣式分離：盡量不要在 HTML 中另外撰寫 style 區塊及使用 inline style ，除非你有個很好的理由，例如用 JavaScript 動態控制樣式變化的時候。</li>
<li>讓選擇器的優先級放低：撰寫樣式時，盡量選用 Class 或 Element 的級別的選擇器，<strong>非必要不用 id</strong> 或<strong>複雜的選擇器組合</strong>，保留多一點彈性的空間給後續的樣式來覆蓋。</li>
</ol>
<h2 id="複習選擇器的好幫手："><a href="#複習選擇器的好幫手：" class="headerlink" title="複習選擇器的好幫手："></a>複習選擇器的好幫手：</h2><p>Envato Tuts+ - <strong><a href="https://code.tutsplus.com/zh-hant/tutorials/the-30-css-selectors-you-must-memorize--net-16048">30個你必須記住的CSS選擇器</a></strong><br><strong><a href="https://flukeout.github.io/">CSS Diner</a></strong> (一款小遊戲，你需要輸入正確的選擇器來選到指定器皿或食物)</p>
<hr>
<h1 id="語法使用隨記"><a href="#語法使用隨記" class="headerlink" title="語法使用隨記"></a>語法使用隨記</h1><hr>
<h2 id="行高-line-height"><a href="#行高-line-height" class="headerlink" title="行高 line-height"></a>行高 line-height</h2><h3 id="用line-height設定文字的垂直置中"><a href="#用line-height設定文字的垂直置中" class="headerlink" title="用line-height設定文字的垂直置中"></a>用line-height設定文字的垂直置中</h3><p>只要將元素的line-height設定跟容器的高度一樣即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Reverts to the default value of the browser. */</span></span><br><span class="line"><span class="attribute">line-height</span>: normal;</span><br><span class="line"><span class="comment">/* 可以使用無單位: 航高會是以倍數乘字體大小 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line"><span class="comment">/* 可以使用px單位 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="comment">/* 可以使用em單位 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">0.8em</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="固定元素位置於網頁最上層，position-fixed"><a href="#固定元素位置於網頁最上層，position-fixed" class="headerlink" title="固定元素位置於網頁最上層，position: fixed"></a>固定元素位置於網頁最上層，position: fixed</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="comment">/*固定置頂*/</span></span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以透過position的fixed來控制元素固定於原本位置，接著使用z-index以數字大小來控制此元素的圖層優先順序。0最後面，數字越大越上面。</p>
<hr>
<h2 id="絕對定位-position-absolute"><a href="#絕對定位-position-absolute" class="headerlink" title="絕對定位 position:absolute"></a>絕對定位 position:absolute</h2><p>絕對定位 position: absolute 指的是子元素根據父元素做定位。<br>接著可以使用Top來設定元素位於父元素的垂直位置，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span> ; <span class="comment">/*會貼齊父元素的最上緣*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>; <span class="comment">/*會貼齊父元素的最下緣*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>absolute是<strong>相對於自己最近的父元素來定位的</strong>，<br>如果<strong>不給.father相對定位</strong>，那麼.father:before 和 .father::after的<strong>絕對定位absolute就是相對於body來定位的</strong>。<br><strong>relative是相對於自己來定位的</strong>，例如：.father{position:relative;top:-50px;},這時.hamburger會以他原本的位置上移50px。</p>
<hr>
<h2 id="Grid-system"><a href="#Grid-system" class="headerlink" title="Grid system"></a>Grid system</h2><h3 id="進階：grid-template-columns-和-grid-template-rows-的值"><a href="#進階：grid-template-columns-和-grid-template-rows-的值" class="headerlink" title="進階：grid-template-columns 和 grid-template-rows 的值"></a>進階：grid-template-columns 和 grid-template-rows 的值</h3><p>grid-template-columns 和 grid-template-rows 的值除了使用基本的網頁單位 px, em, rem, %, 來設定之外，<br>還可以使用以下幾種較為彈性的設定單位</p>
<h3 id="對齊系統"><a href="#對齊系統" class="headerlink" title="對齊系統"></a>對齊系統</h3><p>和 flexbox 佈局系統一樣，grid 系統有 align-items, justify-items, align-content, justify-content 屬性可以對子元素操作。</p>
<h3 id="fr："><a href="#fr：" class="headerlink" title="fr："></a>fr：</h3><p>fraction 這個單位和分幾份有關。1fr 意味著能分到容器剩餘空間的一個等分、2fr 的分到兩等份，以此類推，因此 fr 相較於 px 是一個比較具有彈性的單位。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/fr.png" class="">

<h3 id="minmax-："><a href="#minmax-：" class="headerlink" title="minmax()："></a>minmax()：</h3><p>minmax(min, max) 能夠給定尺寸最小和最大值，讓尺寸的決定變得相對彈性。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/minmax.png" class="">

<h3 id="repeat-："><a href="#repeat-：" class="headerlink" title="repeat()："></a>repeat()：</h3><p>透過 repeat() 的使用可以大量快速的設定重複區塊：</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/repeat.png" class="">

<h3 id="auto"><a href="#auto" class="headerlink" title="auto()"></a>auto()</h3><p>auto 有兩種行為，會受到左右的單位影響。</p>
<ol>
<li>auto 元素的尺寸簡單來說是：內容多大就有多大，但留意它會依照同一列 / 同一行最大尺寸的格子進行調整，例如未來如果有第二行、第二列，而它的寬度是 100px，那目前這個很窄的2號格子也會被撐寬為 100px。<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/auto1.png" class=""></li>
<li>搭配其他固定尺寸的單位使用，2號格子的尺寸會自動延伸，填滿容器內的剩餘空間。<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/auto2.png" class=""></li>
</ol>
<h3 id="grid-auto-flow-與-grid-auto-rows"><a href="#grid-auto-flow-與-grid-auto-rows" class="headerlink" title="grid-auto-flow 與 grid-auto-rows"></a>grid-auto-flow 與 grid-auto-rows</h3><p>grid-auto-flow 是控制當沒有宣告子元素要被擺在網格的特定位置時，子元素將根據特定的流向被自動擺放到網格當中。<br>grid-auto-flow 的預設值為 row ，意思是子元素將<strong>逐列</strong>被擺放到網格中。<br>假設第一行有兩列，放滿後會被推向下一行，若是有設定grid-auto-rows高，那麼會自動生成下一行高，並把元素推下一行的第一列。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/grid-auto-rows.png" class="">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: row;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>換個方向可以手動更改grid-auto-flow 為 column，子元素將逐行被放到網格中。<br>假設第一行只有一列，第二行也只有一列，<br>子元素會由上而下，放滿後會被推向下一列第一行，若是有設定grid-auto-columns寬，那麼自動生成的下一列寬，並把元素推下一列的第一行。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/grid-auto-columns.png" class="">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-<span class="attribute">auto</span>-flow: column;</span><br><span class="line">  grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<hr>
<h2 id="偽類-pseudo"><a href="#偽類-pseudo" class="headerlink" title="偽類 pseudo"></a>偽類 pseudo</h2><h3 id="pseudo-elements使用方法及簡易範例"><a href="#pseudo-elements使用方法及簡易範例" class="headerlink" title="pseudo-elements使用方法及簡易範例"></a>pseudo-elements使用方法及簡易範例</h3><p>偽元素寫法是在選擇器後面加上兩個冒號和一個關鍵字<br>關鍵字，如：</p>
<p>p::first-line - 選取第一行。<br>p::first-letter - 選取第一個字。<br>p::before - 在選取的元素前面插入東西。<br>p::after - 在選取的元素後面插入東西。<br>p::selection - 選取反白後的文字。</p>
<p>例如 p::first-line 選擇器是 p 標籤，關鍵字是 first-line，通過p::first-line就可以選到段落中的第一行文字來控制它的樣式。</p>
<h3 id="before-和-after"><a href="#before-和-after" class="headerlink" title="::before 和 ::after"></a>::before 和 ::after</h3><p>這兩個是最常用的，兩者預設值都是 display:inline-block，然後會繼承原本元素屬性，通常會搭配 content 屬性來添加內容。<br>範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大家好，我是AC Genie<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-before-after1.png" class="">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;♥&quot;</span>;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;^_^&quot;</span>;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-before-after2.png" class="">

<h3 id="pseudo-class使用介紹及簡易範例"><a href="#pseudo-class使用介紹及簡易範例" class="headerlink" title="pseudo-class使用介紹及簡易範例"></a>pseudo-class使用介紹及簡易範例</h3><p>一開始學最常用的就是 :hover，是用來控制滑鼠滑過時元素的樣式，但 hover 前面只有一個冒號，和兩個冒號::的偽元素不同，<br>偽類 (pseudo-class) 這種類別與<strong>元素</strong>的<strong>某個「狀態」</strong>有關，例如：</p>
<p>:visited - 點擊過的超連結。<br>:checked - 被勾選的元素。<br>:hover - 滑鼠滑過的地方。<br>:focus - 滑鼠所在的表單輸入框。<br>:first-child - 第一個子元素。<br>:last-child - 最後一個子元素。<br>:nth-child() - 特定子元素。<br>單個冒號 (:) 是這種類別的特殊標記。</p>
<p>範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用偽類 :nth-child()，搭配關鍵字 odd 指定單數的子元素給橘紅色背景、 even 指定雙數的子元素給綠色背景，p:nth-child(odd) 也可以寫作 p:nth-child(2n+1)，p:nth-child(even) 也可以寫作 p:nth-child(2n) 。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: OrangeRed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: LightSeaGreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-element.png" class="">


<p>使用:not(:last-child)可以取消選擇最後一個元素<br>範例</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: OrangeRed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>意思則是 所有的p元素橘紅色背景，除了最後一個p元素</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/pseudo-element2.png" class="">

<hr>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>transition 屬性是一個縮寫，冒號後面可以放四個屬性值：<br>transition: property duration timing-function delay;</p>
<p>依序代表：<br>transition-property：載明哪個屬性要使用這個效果，例如我們的目標是和顯示有關的 display 屬性。<br>transition-duration：這個效果持續發生的時間，單位是秒，如果是 0 點幾，0 可以不寫。例如我們希望持續 0.2 秒的話可寫 .2s 。<br>transition-timing-function：效果的變化速度，可以寫屬性名稱，例如 ease-in 是緩慢的開始，也可以自由定義 cubic-bezier 函數，<a href="https://easings.net/">easing.net</a> 提供一張好用的速查表，可前往試用後複製想要的函數。<br>transition-delay：先延遲多久之後再開始這個效果，單位和寫法同transition-duration。</p>
<p>使用方法可參考：<br><a href="https://www.w3schools.com/css/css3_transitions.asp">W3C</a><br><a href="https://codepen.io/doug0849/pen/MWovwyr?editors=1100">作業-毛小孩星球</a></p>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform">transform</a> 的 MDN 文件，裡面有屬性變化效果的範例。<br>transform 這個屬性可以平移、旋轉、縮放和傾斜元素。<br>使用方法可參考：<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform">MDN</a><br><a href="https://codepen.io/doug0849/pen/MWovwyr?editors=1100">作業-毛小孩星球</a></p>
<h2 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h2><p>使用transform-origin來設定變化的原點<br>使用方法可參考：<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin">MDN</a><br><a href="https://codepen.io/doug0849/pen/MWovwyr?editors=1100">作業-毛小孩星球</a></p>
<hr>
<h2 id="隱藏元素方法-visibility-hidden-及-display-none"><a href="#隱藏元素方法-visibility-hidden-及-display-none" class="headerlink" title="隱藏元素方法 visibility: hidden 及 display: none"></a>隱藏元素方法 visibility: hidden 及 display: none</h2><p>display: none 與 visibility: hidden 都是隱藏元素的方法，差別在於 display: none 會一口氣使操作對象從文字流中拔除，而 visibility: hidden 則像是用一塊白布蓋起來的感覺，畫面上不顯示，但還是會佔一個空間：</p>
<p>將 visibility: hidden 搭配上 position: absolute; ，故元素會從文字流中移除，完全和 display: none 是一樣的效果。<br>在我們的情境中這兩種做法都可以，一併介紹給大家知道。<br>未來你可以根據需求判斷要用哪一個方法比較合適。</p>
<img src="/2021/06/09/css%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/hidden.png" class="">]]></content>
      <categories>
        <category>技術筆記</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>CSS</tag>
        <tag>優先級</tag>
      </tags>
  </entry>
  <entry>
    <title>AC數位職涯相談室#4-開箱數位軟體團隊-模擬專案體驗帶你找出適合的職能-流水帳心得</title>
    <url>/2021/07/24/ac-4th-panel-discussion/</url>
    <content><![CDATA[<blockquote><p>2021年7月22日，非常感謝AC又舉辦了每月一次的數位職涯相談室啦! 本次邀請到的就是BLOG新翹楚 <strong>方格子</strong> 的前端及全端工程師：<u><strong>Jiang &amp; Kuan</strong></u>來分享現實職場當中前後端各別負責的工作內容。 </p>
</blockquote>
<span id="more"></span>

<p>　　本次座談由兩位主持人 職崖教練 <u><strong>Yenting</strong></u> 及 學習教練 <u><strong>Ken</strong></u> 來開啟這次的相談室啦，一開始不外乎一定要用kahoot來做一些現場調查啦，本次的調查內容大概都會與講座的題目所說的找出適合的職能有所相關，一共有四個題目做調查。</p>
<hr>
<h2 id="第一題：你期待在數位相談室獲得什麼價值？"><a href="#第一題：你期待在數位相談室獲得什麼價值？" class="headerlink" title="第一題：你期待在數位相談室獲得什麼價值？"></a>第一題：你期待在數位相談室獲得什麼價值？</h2><ol>
<li>了解數位軟體產業的慣例與現況</li>
<li>與有經驗的學長姐、助教討論職崖相關問題</li>
<li>釐清自己的職崖目標</li>
<li>了解現在學習的技術在不同的產業與職能中會如何被應用</li>
</ol>
<p>此題我的答案是 - <strong>了解現在學習的技術在不同的產業與職能中會如何被應用。</strong>因為本身在上AC課程的時候大概就有感覺，自己對於網頁的切版排版這件事抗拒很大，相對於撰寫JS的演算法會覺得很麻煩且較無趣，所以其實大概很清楚自己想走的是網頁後端，所以比較想了解現在學習的技術在不同的產業與職能中會如何被應用。</p>
<hr>
<h2 id="第二題：你報名-想報名全端Web-App-課程的動機是？"><a href="#第二題：你報名-想報名全端Web-App-課程的動機是？" class="headerlink" title="第二題：你報名/想報名全端Web App 課程的動機是？"></a>第二題：你報名/想報名全端Web App 課程的動機是？</h2><ol>
<li>初步認識寫程式、探索興趣</li>
<li>成為科技職涯人才(更好的PM、設計師、管理者或創業家)</li>
<li>轉職成為專業網路工程師</li>
<li>到海外工作和發展</li>
</ol>
<p>此題我的答案是 - <strong>成為科技職涯人才(更好的PM、設計師、管理者或創業家)<strong>，雖然前面有講到希望可以轉職成為後端網路工程師，但其實最最最終目標是希望有一天，我能夠靠著這項技能，成為一位創業家。因為本身其實很懶惰，常常遇到很多問題，</strong>希望能找到這些麻煩問題的快速解決路徑，或是不用一直重複的操作同樣的事情。</strong>所以未來或許當自己有一定工程師能力後，期望自己能在市場上尋找一個熱門問題，由自己先行開發相關程式透過提供解決這個問題的方式來創造價值。</p>
<hr>
<h2 id="第三題：下列何者最接近你理想中的職能"><a href="#第三題：下列何者最接近你理想中的職能" class="headerlink" title="第三題：下列何者最接近你理想中的職能?"></a>第三題：下列何者最接近你理想中的職能?</h2><ol>
<li>前端工程師</li>
<li>後端工程師</li>
<li>專案經理</li>
<li>網頁設計師</li>
</ol>
<p>此題我的答案是 - <strong>後端工程師。</strong>雖然題目只能選一個，但當前目標是後端工程師，未來希望自己能夠成為全端工程師，能夠自己獨力開發一個完整的產品，這也是未來作為獨立創業家的第一步。</p>
<hr>
<h2 id="第四題：承上題，你覺得你目前對這個職能有多了解"><a href="#第四題：承上題，你覺得你目前對這個職能有多了解" class="headerlink" title="第四題：承上題，你覺得你目前對這個職能有多了解?"></a>第四題：承上題，你覺得你目前對這個職能有多了解?</h2><ol>
<li>完全不清楚</li>
<li>大概知道需要具備那些技能，但也不是非常清楚</li>
<li>很清楚這個職能需要那些技能，目前正在精進中</li>
<li>知道這個職能需要的技能，在團隊中扮演的角色</li>
</ol>
<p>此題我的答案是 - <strong>大概知道需要具備那些技能，但也不是非常清楚。</strong>其實自己沒有太大的把握能夠清楚說出每一個職位實質上所需具備的技能，及工作內容，因為完全沒有經驗，尚在學習當中，所以覺得透過這次的相談室，一定也能夠有所收穫。</p>
<hr>
<h2 id="模擬專案"><a href="#模擬專案" class="headerlink" title="模擬專案"></a>模擬專案</h2><p>此次相談室以「模擬專案」流程方式來進行，模擬專案的目的主要是希望透過一個實境場景來帶入實際感，不是單純由分享者分享自己的工作在幹嘛，而是可以知道<strong>在一個產品團隊裡面要怎麼去解決問題</strong>，在不同的角色分工中會遇到的問題跟衝突，所以會分三個步驟：</p>
<img src="/2021/07/24/ac-4th-panel-discussion/1.jpg" class="" title="1.jpg">
<center>模擬專案流程 by ALPHA Camp</center>

<ul>
<li>Step 1 : 了解&amp;拆解任務 拆解任務、了解要解決的問題、還有產品特性、要解決的對象有哪些，一一分析出來後分工，整個團隊的配置該有哪些部分。</li>
<li>Step 2 : 選擇你的任務&amp;角色 任務分析後，依自己的專長來完成自己的任務</li>
<li>Step 3 : 團隊任務衝突 執行任務的時候，一定會有摩擦，在團隊中該如何解決衝突，讓任務順利完成。</li>
</ul>
<hr>
<p>模擬專案任務背景說明： 本次主要負責產品為方格子官網，為何設定在方格子？因為今天請到的分享者就是方格子的前端及全端工程師啦! <strong><u>Jiang</u> &amp; <u>Kuan</u></strong></p>
<h2 id="專案目標："><a href="#專案目標：" class="headerlink" title="專案目標："></a>專案目標：</h2><img src="/2021/07/24/ac-4th-panel-discussion/2.jpg" class="" title="2.jpg">
<center>專案目標 by ALPHA Camp</center>

<p>任務拆解分析：</p>
<ol>
<li>打造吸引人，且操作&amp;體驗順暢的介面呈現。 團隊配置所需－前端工程師</li>
<li>確保每次給使用者的資料，能夠正確且即時地呈現出來。 團隊配置所需－後端工程師</li>
<li>釐清專案需求，並清楚掌握與定義不同功能要達成的目的，確保成品符合需求。 團隊配置所需－專案經理(PM)</li>
</ol>
<hr>
<h2 id="前端工程師所需負責的工作："><a href="#前端工程師所需負責的工作：" class="headerlink" title="前端工程師所需負責的工作："></a>前端工程師所需負責的工作：</h2><p>1.確認資料呈現的形式<br>2.網頁切版<br>3.評估開發作業所需的時間與複雜度</p>
<h2 id="Jiang分享筆記重點："><a href="#Jiang分享筆記重點：" class="headerlink" title="Jiang分享筆記重點："></a>Jiang分享筆記重點：</h2><ul>
<li>實作設計師設計出來的分類業面(切版、動態評估)：  切版實作頁面上是滿主要的一個重點，透過實作把頁面做出設計時想要呈現的樣子。  實作頁面時有時候會忽略掉一個點，<strong>當要做一個頁面的時候，UI其實是交雜著需要被注入各種資料，可能名字很長數字很大，當中是有一些動態評估在裡面，這都是前端需要考量到的點。</strong></li>
<li>評估前端實作上的可行性：確認特定需求在畫面上能不能做出來：  有時候要去意識到的<strong>不是當前的需求一定要完成，而是要考量時間的磨合，以及當前公司的系統架構以及資料架構上是不是能夠符合需求，這也就會需要跟後端去做溝通跟評估。</strong>  當PM將一個產品設計畫面出來時，<strong>要去評估是不是合理的，能不能做到，資料要哪來，再往後無限擴展。</strong></li>
<li>評估開發規模的困難度以及時間： 可以思考哪些功能可以事先確認與動工（案例：那些頁面初步的頁面資訊可以先實作）  在實作這些功能時，去<strong>思考要用什麼樣最快的方式去製作出基本版本，之後再慢慢推進。</strong>而一些需求功能在還沒有真正被確定前，能夠以經驗來評估有哪些東西是可以先接出來的，有哪些資料是要再做處理的。  且公司在營運這個平台中工程師一定會去建立一些組件（意指網頁常用元件，如導覽列、下拉選單、警告訊息、按鈕…等等），用組件去簡化實作邏輯，然後很快地把該有的元件套進頁面，元件套進頁面的同時會去思考哪些後端資料是需要被帶入使用的，去加快頁面的完整性，而這些已完成或是能夠完成的事情可能就比較不需要再討論，所以可以減少一些在溝通過程中產生的摩擦力<strong>只要在前期準備的越完整，討論的問題就可以越進階，溝通上的摩擦就能夠減少。</strong></li>
<li>跟後端確認資料的串接格式，可行性 如果資料尚有疑慮，如何先出個相對可行的實作版本。  有時候這問題不是那麼重要，重要的問題是當拿到設計畫面時，能夠去思考到後端有沒有帶出這些資料功能，前端並不是只在乎說把頁面做出來就好，而是要去思考實作時，能夠去接觸的資料有哪些? 目前的資料結構長什麼樣子? 是不是適合帶入到現有的元件去載入? 如果不行的時候是不是有什麼建議可以提供給後端?<strong>工程師非常重要的一個環節是會不會去溝通，以及能不能看到設計稿時去思考後面的所有相關問題，這些會去影響到能不能夠把這些任務做出來很重要的環節。</strong></li>
</ul>
<h2 id="其他Q＆A"><a href="#其他Q＆A" class="headerlink" title="其他Ｑ＆Ａ"></a>其他Ｑ＆Ａ</h2><p><strong>1. 前端工程師需要做動畫呈現嗎？</strong></p>
<ul>
<li>動畫有很多種，有些是簡潔動畫，有些是互動上動畫，但這些其實都不是一定要擁有的技能，但有的話很好。動畫其實是by case 不是by project，這是當有需要才會去面臨到的問題，但我認為比較重要的是<strong>要怎麼把基本的畫面切出來，標後版，然後資料可以很乾淨的呈現在畫面上，這是最重要的。</strong>有些技能樹，像是要Opea GL、3D動畫那是其次，如果能掌握前面的技能，我相信這些進階的技能在學習上是滿快可以掌握的。動畫在工作上肯定會遇到，但以優先級來說沒有到那麼重點。</li>
</ul>
<p><strong>2. 前端工程師常常會需要跟設計師溝通，如果會這些設計軟體對前端工程師有沒有加分?</strong></p>
<ul>
<li>應該算有加分，以業界來說有很多接案公司都會希望前端工程師他們也有相對應的技能，去把UI上的原件實現到切版上面去，這是有可能的。 不過我認為這只能算是一個延伸功能，你會了很好，你可能可以去跟設計師討論某些事。  不過其實在我們前端的角度上，通常設計師他設計出來的會是figma, sketch, ????(44分32秒不清楚), 然後會讓我們去看，這個畫面上的這個組件他的規格是什麼? 長寬高, upshadow, position 這些東西反而是我們怎麼跟設計師溝通的方式。PS算是一個次級的一個附加價值，你在你自己技能樹上你有這個功能，未來你可能可以協助設計師。<strong>真正在前端來講，其實很專注在畫面上的資料呈現及動態掌握，你的畫面能不能完整乾淨然後順暢地呈現在使用者面前這是很重要的點。</strong></li>
</ul>
<p><strong>Ken補充:</strong><br>雖然在分享過程中有設定一個正確答案的概念，不過其實這個在更多時候，在不同家公司，不同的團隊會有不一樣的合作模式，這也是肯定的事情，不過比較常聽到的合作模式，前端工程師本身並不需要做太多複雜的視覺介面設計，更多時候是像Jiang強調的去了解資訊的呈現乾淨程度。</p>
<hr>
<h2 id="後端工程師所需負責的工作："><a href="#後端工程師所需負責的工作：" class="headerlink" title="後端工程師所需負責的工作："></a>後端工程師所需負責的工作：</h2><ol>
<li>定義資料串接的格式</li>
<li>確認資料庫是否能滿足本次需求</li>
<li>設計能滿足需求的演算法</li>
</ol>
<h2 id="Kuan分享筆記重點："><a href="#Kuan分享筆記重點：" class="headerlink" title="Kuan分享筆記重點："></a>Kuan分享筆記重點：</h2><p>這個list是今天從PM那接下一個任務後，可能會進行的一個工作流程，在團隊中做為一個後端工程師，在真正敲下鍵盤之前：</p>
<ul>
<li>評估開發複雜度 。<ul>
<li>API的改動幅度  一開始評估任務的複雜度有多高，是否需要修改API？</li>
<li>用比喻的方式來講，我需要修改的匯款單上的欄位就好，還是需要設計一個新的匯款單來符合任務的需。這是越工作越有經驗之後越能做出正確的評估。</li>
</ul>
</li>
</ul>
<ul>
<li>評估當前的資料(資料庫)是否能滿足新功能 。<ul>
<li>資料可能不太夠，或資料庫可能要做變動(增加欄位)  比較實際面的就是，<strong>資料庫需要增加幾個欄位</strong>，這是後端工程師考量的事情。</li>
</ul>
</li>
</ul>
<ul>
<li>評估效能變動的幅度 。<ul>
<li>新功能上線後，活應時間會不會變太久？若會，如何做架構調整</li>
<li>因為PM對後端不是那麼了解，有一些功能<strong>後端工程師必須要去思考，這個功能會不會影響到API回應的時間</strong>，可能進到頁面之後前端呈現都是正確的，但後端回應太慢沒有辦法即時回應資料，所以讀取的圈圈就是一直跑，是否會導致這種情況發生?如果會的話就要去做溝通，讓這功能可能只有80%的效果，可是他不會對我們的效能造成影響，或是去<strong>溝通功能要做修正，還是架構要做修正。</strong>新功能是否需要做機器調整，長期流量會不會變大，促銷活動可能有瞬間流量  像是搶演唱會的門票時會有一個高峰流量，提前知道瞬間流量會出來，<strong>是不是需要做一些事前的調整</strong>，這也是後端工程師工作時的眉角。</li>
</ul>
</li>
</ul>
<ul>
<li>設計能滿足需求的演算法 。<ul>
<li>需求是最新的十筆資料，就要正確呈現  假設一個新功能，PM說他想要”近10天”，”最新的十筆資料”，”不能有重複的作者”，後端就要想辦法把這一句話變成一個正確的資料，不能錯、不能重複、也不能超過時間，而且效能要好，這就帶到後端工程師最有價值的三個地方：<strong>資料的正確性，系統的穩定性(不能壞不能慢)，以及程式的彈性</strong>，寫程式時要注意程式不能寫得太死、寫的太隨便，若今天程式有比較大的彈性，未來PM要新增什麼樣的新功能，就需要害怕，只要簡單的修改後就可以滿足新的需求。<strong>正確、穩定、彈性的工程師就是一個優秀的工程師。</strong></li>
</ul>
</li>
</ul>
<ul>
<li>與前端共同定義資料的串接格式 。銀行的匯款單(誰?多少錢?那些欄位要大寫?)  此部分滿看公司文化，Kuan的經驗大多數是先由後端先做出一個初步的API，<strong>未來在實作過程再討論更進一步的修正。  未來網頁在實作的時候，不管前後工程師，都要盡量當個體貼的工程師，彼此討論修正出對雙方都更方便更彈性的資料，這是很重要的。</strong></li>
</ul>
<ul>
<li>評估是否需要更動/串接第三方服務 。例如：要串哪一間金流，是否有每月定時扣款功能可以符合訂閱功能  調查某一種功能，要串接哪一家的服務，而此間公司提供的功能的系統是否符合，且服務是比較好，價格是能夠接受的。</li>
</ul>
<ul>
<li>撰寫測試 指自動化測試，每一次系統部屬上去的時候，他都會跑一次自動化測試，有什麼好處?他真正的價值不是在，確定你剛剛寫的程式是正確的，而是在未來每一次的更動，你都可以確定你前面的寫的程式都是正確的，最害怕的就是寫a壞b，改b壞c，異種瀑布式的修改，這樣一整天工作的心情就會非常糟糕。</li>
</ul>
<p>以上是後端工程式要去評估及實作的一些流程。</p>
<p>而在上面提到的一些API資料庫，第三方服務，資料格式測試，這些在比較大的公司會有專業的分工，而較小的公司有可能會統一歸納交給後端工程師，所以可能會跟未來的職掌不太一樣，但也不需要太害怕為什麼需要學這麼多東西，<strong>真正重要的是學習這些東西的過程中順便排養出一種解決問題的能力，未來遇到一個新的stack下來，可能沒有處理過，但卻可以用過去的經驗來評估要如何學習這個新東西以及攻克它。</strong></p>
<hr>
<h2 id="PM所需負責的工作："><a href="#PM所需負責的工作：" class="headerlink" title="PM所需負責的工作："></a>PM所需負責的工作：</h2><ol>
<li>需求確認、盤點</li>
<li>規劃開發時程</li>
<li>確認資源(人力、時間、$$)</li>
</ol>
<p>Yenting補充分享： 其實很多人會認為PM有技術能的時候可以加分，但這個<strong>加分不是在人力不足的時候，自己跳下去開發，而是加分在你知道整件事情的一些原理跟脈絡，所以可以做出一些比較好的人力資源分配或式時間管理。</strong>其實這個道理在其他地方也是一樣的，例如前面提到的前端工程師是否要做畫面設計，也許許多前端工程師他是有這個能力，但當你的團隊裡面其實有一個人很明確的分工，他就是網頁設計師，這就是他的工作的時候，那你就不應該跟他去搶工作，那不然你這樣子就會造成重工其實也很難管理，所以同理得證，有時候及時你是個 full stack ，你今天這個任務分配到後端那你也會前端的時候你要不要跳下去做? 如果沒有被分到的話你就不應該做這件事情，所以這個道理其實是apply在很多不同的角色上面，所以希望大家可以知道，因為<strong>當你是一個團隊作戰的時候，你要專注在deliver你自己應該要做什麼事情的時候，這其實才是最應該要先完成的事情，而不是你今天會很多技能，所以你就要做很多事情，團隊運作不應該是這樣子。</strong></p>
<h2 id="PM執掌清單："><a href="#PM執掌清單：" class="headerlink" title="PM執掌清單："></a>PM執掌清單：</h2><ul>
<li>確認並清楚定義專案需求</li>
<li>預估中案所需的資源，包含人力、時間、預算</li>
<li>規劃開發時程</li>
<li>提供初步對專案成果的發想(User Story、Wireframe)</li>
<li>測試：檢查工程部開發出來的功能是否有滿足需求(使用者的角度測試，非後端工程測試)</li>
<li>擔任產品的內部代言人-&gt;用比較宏觀的角度去看產品，評估哪些功能最有價值優先開發 。知道產品現有的問題 。產品在使用者端的問題 。產品的內部邏輯</li>
</ul>
<h2 id="如何跟工程師配合做一個好的PM："><a href="#如何跟工程師配合做一個好的PM：" class="headerlink" title="如何跟工程師配合做一個好的PM："></a>如何跟工程師配合做一個好的PM：</h2><h3 id="筆記Jiang分享"><a href="#筆記Jiang分享" class="headerlink" title="筆記Jiang分享 :"></a>筆記Jiang分享 :</h3><p><strong>PM要能夠掌握整個開發的節奏，要讓工程師明確的知道當前的任務要做什麼，目標在哪，什麼時候要完成，有問題的時候可以討論</strong>，PM的彈性跟能不能掌握這個專案的進度是很重要的</p>
<h3 id="筆記Kuan分享"><a href="#筆記Kuan分享" class="headerlink" title="筆記Kuan分享:"></a>筆記Kuan分享:</h3><p><strong>讓工程師專心做該做的事</strong>，工程師會做一個時間的評估，好的PM不應該一直去壓時程，當然PM有他的壓力，但<strong>一個好的PM可以把所有的需求梳理成一個很順暢的時間線，分配各個工程師至擅長的位置</strong>，工程師最討厭覺得最煩躁的是，我做A做到一半被叫去做B，前面的東西做一半就卡到，或是這個需求沒有先確認完，然後做到一半就做修改。 </p>
<hr>
<h2 id="團隊衝突情境1：設計師想要放Fixed-title，前端工程師評估實作會太複雜。你會怎麼做"><a href="#團隊衝突情境1：設計師想要放Fixed-title，前端工程師評估實作會太複雜。你會怎麼做" class="headerlink" title="團隊衝突情境1：設計師想要放Fixed title，前端工程師評估實作會太複雜。你會怎麼做?"></a>團隊衝突情境1：設計師想要放Fixed title，前端工程師評估實作會太複雜。你會怎麼做?</h2><ol>
<li>先這樣先這樣，總之需求開了，先做再說，先交付任務在討論。</li>
<li>這什麼??覺得需求不合理，先跳過不做，完成其他需求。</li>
<li>Hmm 我想想，覺得需求不合理，先找設計師討論</li>
</ol>
<h3 id="Jiang分享重點筆記："><a href="#Jiang分享重點筆記：" class="headerlink" title="Jiang分享重點筆記："></a>Jiang分享重點筆記：</h3><p>工程師在業界建立起自己能力所及到哪邊，要非常清楚的技術展示在哪個環節，要有辦法去掌握這個東西。</p>
<p>當需求進來時，要先思考這個需求會觸及到哪些專案當中程式碼的組件，切版，程式邏輯，可以用畫圓的方式表現，當畫出來後大概就知道這個需求觸及的範圍有多廣，若和原定的距離想差甚遠，就必須去思考怎麼跟設計師溝通，讓設計師了解到當前的問題(例如：實作畫面時有時是使用已經既有的組件，若要去加相關新功能，可能會有排斥現象、邏輯不符、或是有很多副作用跑出來)，與設計師溝通取一個中間值需求，但同時要記得設計師最終想要的目標是什麼，未來有餘裕的時候思考這功能有沒有辦法做到，那需要花多久時間去實踐。<strong>除了自己知道要做什麼之外，也要知道別人最終想要什麼，記錄下來未來有機會在慢慢發掘，最後在反饋給自己的團隊，這會是一個正向循環。</strong></p>
<h2 id="團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。"><a href="#團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。" class="headerlink" title="團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。"></a>團隊衝突情境2：後端工程師發現「最新」及「近期熱門」分類，出現的文章會很像。</h2><ol>
<li>最新&amp;近期熱門都是很常見的分類，即使有重複，還是把需求做出來比較好，畢竟交付的時間也很緊急。</li>
<li>評估後覺得做出來的觀看體驗可能不好，想先找PM討論替代方案。</li>
<li>先做其他功能/想辦法找資源做出來</li>
</ol>
<h3 id="Kuan分享重點筆記："><a href="#Kuan分享重點筆記：" class="headerlink" title="Kuan分享重點筆記："></a>Kuan分享重點筆記：</h3><p>在<strong>評估後覺得做出來的觀看體驗可能不好，想先找PM討論替代方案前會有一個前提</strong>，你必須是能夠”觀察出”做出來後的觀看體驗不佳，如果今天是一個按圖施工的後端工程師，可能就不會考慮到這件事，但我相信一個好的工程師，不應該只是按圖施工，而是在實作功能的時候去，去考慮到當初為什麼要做這個功能，要時時刻刻放在心裡，實作這個功能之後有沒有達到使用者，幫助他們找到他們想要看的文章，如果兩個TAB都是一樣的文章，那就是沒有任何意義。</p>
<p>PM是否一定要了解完全實作的細節，其實是工程師對PM的溝通，<strong>工程師要具備一個將技術白話文的能力</strong>，必須讓PM知道現階段做不到，為什麼? 因為需要新的東西或是新的服務，或是現階段資料沒辦法達成，讓PM去理解，那PM就可以把你這個擔憂回報給其他的部門，然後去做不同的處置，那這段期間就可以先做這樣等等。</p>
<p>若是選擇<strong>最新&amp;近期熱門都是很常見的分類，即使有重複，還是把需求做出來比較好，畢竟交付的時間也很緊急</strong>。通常代表現在時程很趕，並且影響不是那麼大，可以將優化的過程放在心裡，在未來時間餘裕的時候將他拿出來做。</p>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本次相談室讓我對前後端工程師以及PM有了更深入的了解，這次的相談室不僅僅只是對某一個職業的敘述跟經驗分享，更是具體的將職場上的情況帶入到你的面前，讓自己可以從更宏觀的角度去理解自己是否適合這個職能/產業/公司。<br>職場上的情況從解析需求問題開始，到團隊分工合作，最後到團隊的衝突如何解決，這當中帶給聽者各種不同角度去思考到的問題，很重要的一點是，<strong>團隊分工合作當中，溝通非常的重要，除了自己的職掌外也同時要去了解隊友的狀況，並互相溝通取得平衡，讓彼此能夠互相理解問題的重點，並找到共同解決問題的方式。</strong></p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>工作相談室</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
        <tag>工作相談室</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript-打磚塊遊戲實作</title>
    <url>/2021/09/16/Javascript-brick-break-game/</url>
    <content><![CDATA[<p><strong><a href="https://doug0849.github.io/javascript-brickgame-exercise">完成作品</a></strong></p>
<p>自己本身滿愛玩遊戲的，自己開始學JavaScript之後，主要都是在學如何開發網頁及如何使用JavaScript來操作網頁，透過路由來新增、讀取、更新、刪除資料庫資料…，但心裡一直想，JavaScript的運用很廣泛，不如自己來查資料看看如何來製作一款簡易的小遊戲，也來接觸不同層面的開發運用。 於似乎我找到MDN上的一個打磚塊教學，就決定先從這個小遊戲開始練習學習並記錄過程。</p>
<span id="more"></span>

<h1 id="第一步：認識canvas"><a href="#第一步：認識canvas" class="headerlink" title="第一步：認識canvas"></a>第一步：認識canvas</h1><h2 id="canvas-說明"><a href="#canvas-說明" class="headerlink" title="canvas 說明"></a>canvas 說明</h2><p>它看起來有點像 <code>&lt;img&gt;</code> 元素，其中的差異點在於 <code>&lt;canvas&gt;</code> 沒有 src 和 alt 屬性，<code>&lt;canvas&gt;</code> 只有 width 與 height 這兩個屬性，這兩個屬性皆為非必須、能透過 DOM屬性設定；若是沒有設定 width 和 height 屬性，畫布寬預設值為 300 pixels、高預設值為 150 pixels，我們也可以用 CSS 強制設定元素尺寸，但當渲染時，影像會縮放以符合元素的尺寸。</p>
<blockquote>
<p>Note:如果繪圖結果看起來有些扭曲，可以改試著用<code>&lt;canvas&gt;</code>自身的width和height屬性而不要用CSS來設定寬高。</p>
</blockquote>
<p>需要<code>&lt;/canvas&gt;</code>結束標籤</p>
<p><code>&lt;canvas&gt;</code>產生一個固定大小的繪圖畫布，這個畫布上有一或多個渲染環境(rendering context)，我們可以用渲染環境來產生或操作顯示內容的渲染環境(rendering context)。<br>不同環境(context)可能會提供不同型態的渲染方式，好比說WebGL使用OpenGL ES的3D環境(context)，而這裡我們主要將討論2D渲染環境(rendering context)。</p>
<p>一開始canvas為空白，程式碼腳本需要先存取渲染環境，在上面繪圖，然後才會顯現影像。<br><code>&lt;canvas&gt;</code> 素有一個方法(method)叫getContext()，透過此方法可以取得渲染環境及其繪圖函數(function)；<br><strong>getContext()輸入參數只有渲染環境類型一項</strong>，像本教學所討論的2D繪圖，就是輸入”2d”。</p>
<h2 id="Canvas基礎"><a href="#Canvas基礎" class="headerlink" title="Canvas基礎"></a>Canvas基礎</h2><p>我們將<code>&lt;canvas&gt;</code>元件的參考存成變數canvas為了未來使用。建立ctx變數儲存”2D渲染環境”，ctx變數實際拿來繪製Canvas的工具。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#myCanvas&#x27;</span>) <span class="comment">// 取得渲染畫布位置</span></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>) <span class="comment">// 宣告為2d渲染環境</span></span><br></pre></td></tr></table></figure>

<p>先在canvas上印出紅色正方形。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 開始畫路徑</span></span><br><span class="line">ctx.beginPath() </span><br><span class="line"><span class="comment">// (x, y, width, height) </span></span><br><span class="line"><span class="comment">// 從canvas畫布起點(左上角為0,0)，向右移動20，向下移動40，劃出矩形50 x50</span></span><br><span class="line">ctx.rect(<span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">50</span>) </span><br><span class="line">ctx.fillStyle = <span class="string">&quot;#FF0000&quot;</span> <span class="comment">// 填充顏色設定</span></span><br><span class="line">ctx.fill() <span class="comment">// 填充</span></span><br><span class="line">ctx.closePath() <span class="comment">// 有開始有結束，封閉路徑</span></span><br></pre></td></tr></table></figure>

<p>不止矩形，也可以印出綠色的圓形。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">240</span>, <span class="number">160</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.closePath();</span><br></pre></td></tr></table></figure>

<p>arc用到六個參數</p>
<ul>
<li>圓弧中心的x、y座標</li>
<li>圓弧的半徑</li>
<li>圓弧開始和結束的角度(從開始到結束的角度, 以弧度表示)</li>
<li>繪製的方向(false代表順時針方向, 預設或true為逆時針方向) 最後一個參數並非必要</li>
</ul>
<p>fillStyle 也可以像CSS一樣可以用16進位、顏色關鍵字、rgba()函式等其他可用的顏色指定方法。</p>
<p>不但有fill() 填滿圖形，還有 stroke() 專門為外輪廓線上色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.rect(<span class="number">160</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;rgba(0, 0, 255, 0.5)&quot;</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br></pre></td></tr></table></figure>


<h1 id="第二步：讓球移動"><a href="#第二步：讓球移動" class="headerlink" title="第二步：讓球移動"></a>第二步：讓球移動</h1><h2 id="定義一個繪製用的迴圈"><a href="#定義一個繪製用的迴圈" class="headerlink" title="定義一個繪製用的迴圈"></a>定義一個繪製用的迴圈</h2><p>藉由繪製球在螢幕上然後再清除，然後在每個影格中繪製球在偏移一點點的位置上（如果在同一個位置上就等於沒動），造成物體移動的感覺，就如同電影中物體移動的方式。<br>所以先定義一個繪製用的迴圈</p>
<p>為了固定更新 canvas 繪圖區域的每一個影格，我們需要定義一個繪製函式（drawing function），它將會重複執行，用不同的變數改變球的位置或其他物的位置。<br>重複執行一個函式，可以使用 JavaScript timing function，像是 setInterval() 或是 requestAnimationFrame().</p>
<p>畫一個圓，draw()函數每十毫秒會被setInterval執行一次:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(<span class="number">50</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>);</span><br><span class="line">  ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span>;</span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.closePath();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(draw, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>setInterval 會無限循環， draw() 函數會以每 10 毫秒被呼叫一次除非我們將它停止。</p>
<h2 id="讓球動起來"><a href="#讓球動起來" class="headerlink" title="讓球動起來"></a>讓球動起來</h2><p>目前球沒移動，因為它不斷在原本位置更新，所以看不出來。<br>先定義四個新變數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = canvas.width / <span class="number">2</span>; <span class="comment">// 定義畫面中間位置</span></span><br><span class="line"><span class="keyword">let</span> y = canvas.height - <span class="number">30</span>; <span class="comment">// 定義畫面由下往上30位置</span></span><br><span class="line"><span class="keyword">const</span> dx = <span class="number">2</span>; <span class="comment">// 定義球的移動X軸</span></span><br><span class="line"><span class="keyword">const</span> dy = -<span class="number">2</span>; <span class="comment">// 定義球的移動Y軸</span></span><br></pre></td></tr></table></figure>

<p>然後修改原本球的起始位置，然後再最後加上 x += dx , y += dy</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.arc(x, y, <span class="number">10</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>)</span><br><span class="line">  ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span></span><br><span class="line">  ctx.fill()</span><br><span class="line">  ctx.closePath()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(draw, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>執行後球變成像畫線似的</p>
<h2 id="在每個影格開始前清除canvas"><a href="#在每個影格開始前清除canvas" class="headerlink" title="在每個影格開始前清除canvas"></a>在每個影格開始前清除canvas</h2><p>要將canvas 清除掉可以使用 clearRect().<br>clearRect()需要 4個參數: </p>
<ul>
<li>前兩個參數代表了長方形左上角的 x和 y座標</li>
<li>後兩個參數代表了長方形右下角的 x 和 y 座標</li>
</ul>
<p>之前在這長方形範圍內所繪製的東西將會被清除掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.arc(x, y, <span class="number">10</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>)</span><br><span class="line">  ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span></span><br><span class="line">  ctx.fill()</span><br><span class="line">  ctx.closePath()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(draw, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>球沒有留下痕跡了。每 10 毫秒 canvas 會被清除，新的球將會被畫在指定的新位置上，且 x 和 y 會更新以用在下一個影格.</p>
<h2 id="整理程式碼"><a href="#整理程式碼" class="headerlink" title="整理程式碼"></a>整理程式碼</h2><p>把畫球獨立設為一個函式，因為這個函式會不斷地被使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#myCanvas&#x27;</span>) <span class="comment">// 取得渲染畫布位置</span></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>) <span class="comment">// 宣告為2d渲染環境</span></span><br><span class="line"><span class="keyword">let</span> x = canvas.width / <span class="number">2</span>; <span class="comment">// 定義畫面中間位置</span></span><br><span class="line"><span class="keyword">let</span> y = canvas.height - <span class="number">30</span>; <span class="comment">// 定義畫面由下往上30位置</span></span><br><span class="line"><span class="keyword">const</span> dx = <span class="number">2</span>; <span class="comment">// 定義球一開始向右移動的X距離</span></span><br><span class="line"><span class="keyword">const</span> dy = -<span class="number">2</span>; <span class="comment">// 定義球一開始向上移動的Y距離</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.arc(x, y, <span class="number">10</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">  ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span></span><br><span class="line">  ctx.fill()</span><br><span class="line">  ctx.closePath()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  drawBall()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(draw, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h1 id="第三步：讓球反彈吧"><a href="#第三步：讓球反彈吧" class="headerlink" title="第三步：讓球反彈吧!"></a>第三步：讓球反彈吧!</h1><h2 id="簡單的碰撞偵測"><a href="#簡單的碰撞偵測" class="headerlink" title="簡單的碰撞偵測"></a>簡單的碰撞偵測</h2><p>為了偵測碰撞的發生，我們將檢查球是否接觸(相撞)牆壁，如果有碰到，我們就改變球的行進方向。<br>為了方便計算，宣告一個新變數 ballRadius 代表球的半徑，然後更新畫球的半徑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ballRadius = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>總共有四面牆壁會與球發生碰撞，先處理上方的牆壁：<br>在每個影格檢查球是否有接觸到 Canvas 上方壁面 —如果是的話，我們將扭轉球的運動，所以它將開始在相反的方向移動，並保持在可見邊界。記住坐標是從左上角開始，我們可以得到這樣的東西：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(y + dy &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>單純看垂直Y軸移動方向，因為向上是負數，最上方為0，如果球位置的Y值低於零，就改變Y軸的運動的方向，可以再次宣告它本身來轉換。<br>依此類推可以推出，下方邊界</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(y + dy &gt; canvas.height) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>兩語句可以合併</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(y + dy &gt; canvas.height || y + dy &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依此類推X軸就是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x + dx &gt; canvas.width || x + dx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入draw()裡面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width || x + dx &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y + dy &gt; canvas.height || y + dy &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125;</span><br><span class="line">  drawBall()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這時候球就會反彈啦! ，但是會發現求超出畫面半顆，因為是以球心做為判斷，這時候要在邊界上扣掉和增加球的半徑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y + dy &gt; canvas.height - ballRadius || y + dy &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125;</span><br><span class="line">  drawBall()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第四步：控制球版"><a href="#第四步：控制球版" class="headerlink" title="第四步：控制球版"></a>第四步：控制球版</h1><p>目前還無法跟畫面互動，如果沒有互動，怎麼稱作遊戲!</p>
<h2 id="畫球拍"><a href="#畫球拍" class="headerlink" title="畫球拍"></a>畫球拍</h2><p>所以我們這時需要一個球拍，先定義一些變數，定義球拍的長和寬，和球拍X軸上的初始位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> paddleHeight = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> paddleWidth = <span class="number">75</span>;</span><br><span class="line"><span class="keyword">let</span> paddleX = (canvas.width-paddleWidth)/<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>接著把球拍畫出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawPaddle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.beginPath()</span><br><span class="line">    ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span></span><br><span class="line">    ctx.fill()</span><br><span class="line">    ctx.closePath()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="允許用戶控制球版"><a href="#允許用戶控制球版" class="headerlink" title="允許用戶控制球版"></a>允許用戶控制球版</h2><p>我們需要：<br>兩個變量以保存左右方向鍵是否被按下的信息。<br>兩個事件監控器來捕捉按鈕的按下動作。我們需要運行一些代碼以在被按下時可以控制球拍的移動<br>兩個用於處理被按下或按鈕後的事件方法來實現左右移動球拍</p>
<p>可以使用 boolean 變量來初始定義。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rightPressed = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> leftPressed = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>這兩個變量的兩個默認值都是false，因為在開始時沒有任何案件被按下。<br>接著要監聽手勢的點擊動作，需要添加監聽器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;keydown&quot;</span>, keyDownHandler) <span class="comment">// 監聽按下鍵，按下按鍵時執行keyDownHandler函式</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;keyup&quot;</span>, keyUpHandler) <span class="comment">// 監聽放開鍵，放開按鍵時執行keyUpHandler函式</span></span><br></pre></td></tr></table></figure>

<p>並新增keyDownHandler及keyUpHandler兩個函式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyDownHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假設按下的按鈕是右鍵，則把rightPressed函數設為true</span></span><br><span class="line">  <span class="keyword">if</span> (e.keyCode == <span class="number">39</span>) &#123;</span><br><span class="line">    rightPressed = <span class="literal">true</span></span><br><span class="line">  &#125;<span class="comment">// 假設按下的按鈕是左鍵，則把rightPressed函數設為true</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == <span class="number">37</span>) &#123;</span><br><span class="line">    leftPressed = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyUpHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假設放開的按鈕是右鍵，則把rightPressed函數設為false</span></span><br><span class="line">  <span class="keyword">if</span> (e.keyCode == <span class="number">39</span>) &#123;</span><br><span class="line">    rightPressed = <span class="literal">false</span></span><br><span class="line">  &#125;<span class="comment">// 假設放開的按鈕是左鍵，則把rightPressed函數設為false</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == <span class="number">37</span>) &#123;</span><br><span class="line">    leftPressed = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>總而言之，不管按下或放開，都要監聽，監聽後還要判斷按下或放開哪一顆鍵，都要設定。</p>
<h2 id="球版控制邏輯"><a href="#球版控制邏輯" class="headerlink" title="球版控制邏輯"></a>球版控制邏輯</h2><p>現在有用於存儲按鍵，事件監聽器和相關功能的信息的變量。<br>接著在draw（）函數內部，每一幀被渲染的同時監測是否按下了左或右鍵。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rightPressed) &#123;</span><br><span class="line">   paddleX += <span class="number">7</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed) &#123;</span><br><span class="line">   paddleX -= <span class="number">7</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>如果按一下左鍵，球拍將向左移動7個像素，如果按一下右鍵，球拍將向右移動7個像素。<br>但是球拍會移出畫布然後消失，所以改一下判斷，另外方形的起始點是方形的左下角，也同樣是作為心點，所以要以左下角的點為中心點來做判斷。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rightPressed &amp;&amp; paddleX &lt; canvas.width - paddleWidth) &#123;</span><br><span class="line">    paddleX += <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    paddleX -= <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五步：Game-Over，及接球"><a href="#第五步：Game-Over，及接球" class="headerlink" title="第五步：Game Over，及接球"></a>第五步：Game Over，及接球</h1><h2 id="Game-Over"><a href="#Game-Over" class="headerlink" title="Game Over"></a>Game Over</h2><p>目前遊戲永無止盡，所以要修改一下牆壁反彈的規則，當球從下方離開畫布時，就跳出警示，並重新開始遊戲。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( y + dy &lt; <span class="number">0</span> + ballRadius ) &#123; <span class="comment">// 從此處開始修改</span></span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( y + dy &gt; canvas.height - ballRadius ) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Game Over&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.location.reload()</span><br><span class="line">  &#125;<span class="comment">// 從此處結束</span></span><br><span class="line">  <span class="keyword">if</span> (rightPressed &amp;&amp; paddleX &lt; canvas.width - paddleWidth) &#123;</span><br><span class="line">    paddleX += <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    paddleX -= <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  drawBall()</span><br><span class="line">  drawPaddle()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接球"><a href="#接球" class="headerlink" title="接球"></a>接球</h2><p>最後球和球拍之間要創建一些碰撞檢測，使它可以反彈並返回到遊戲區域。<br>最簡單的方法是檢查球落下後，球心的x值是否在球拍的左邊和右邊之間。<br>可以這麼做</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="comment">// 如果球碰到畫布邊界就反轉</span></span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果球碰到畫布上邊界就反轉，下邊界則判斷是否落在球板內</span></span><br><span class="line">  <span class="keyword">if</span> ( y + dy &lt; <span class="number">0</span> + ballRadius ) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( y + dy &gt; canvas.height - ballRadius ) &#123; <span class="comment">// 當球落下</span></span><br><span class="line">    <span class="keyword">if</span> ( x &gt; paddleX &amp;&amp; x &lt; paddleX + paddleWidth) &#123; <span class="comment">// 再增加一個判斷，如果球在球板範圍內則反轉</span></span><br><span class="line">      dy = -dy</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&#x27;Game Over&#x27;</span>)</span><br><span class="line">      <span class="built_in">document</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判斷是否有按下鍵盤，有的話移動球板位置</span></span><br><span class="line">  <span class="keyword">if</span> (rightPressed &amp;&amp; paddleX &lt; canvas.width - paddleWidth) &#123;</span><br><span class="line">    paddleX += <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    paddleX -= <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawBall()</span><br><span class="line">  drawPaddle()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="第六步：畫磚-重要"><a href="#第六步：畫磚-重要" class="headerlink" title="第六步：畫磚 (重要!)"></a>第六步：畫磚 (重要!)</h1><p>只有彈接球有點無聊，加上磚來增添遊戲趣味。<br>一開始先定義磚的基本資料：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> brickRowCount = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> brickColumnCount = <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> brickWidth = <span class="number">75</span></span><br><span class="line"><span class="keyword">const</span> brickHeight = <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> brickPadding = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> brickOffsetTop = <span class="number">30</span></span><br><span class="line"><span class="keyword">const</span> brickOffsetLeft = <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>定義了磚的行數和列，寬度和高度，磚塊之間的距離，這樣它們就不會互相接觸；有一個上、左偏移量，就不會從畫布的邊緣開始繪製。</p>
<h2 id="畫磚的邏輯"><a href="#畫磚的邏輯" class="headerlink" title="畫磚的邏輯"></a>畫磚的邏輯</h2><p>我們將在一個二維數組容納我們所有的磚。<br>它將包含磚列（c），磚行（R），每一個包含一個物件，物件內包含x和y的座標，讓每個磚顯示在屏幕上。在變量下面添加以下代碼：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bricks = [];</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>; c&lt;brickColumnCount; c++) &#123;</span><br><span class="line">    bricks[c] = [];</span><br><span class="line">    <span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;brickRowCount; r++) &#123;</span><br><span class="line">        bricks[c][r] = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bricks是一個雙層陣列，陣列裡還有數組表示Column的陣列，，Column的陣列裡面有數組物件，代表Row，<br>目前我們先使用for迴圈將磚的座標宣告出來。</p>
<img src="/2021/09/16/Javascript-brick-break-game/1.png" class="">

<table>
<thead>
<tr>
<th></th>
<th>C0</th>
<th>C1</th>
<th>C2</th>
<th>C3</th>
<th>C4</th>
</tr>
</thead>
<tbody><tr>
<td>R0</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
</tr>
<tr>
<td>R1</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
</tr>
<tr>
<td>R2</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
<td>x,y</td>
</tr>
</tbody></table>
<p>接著我們創建一個函數來遍歷數組中的所有磚塊並在屏幕上繪製它們。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBricks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="number">0</span>; c&lt;brickColumnCount; c++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;brickRowCount; r++) &#123;</span><br><span class="line">            bricks[c][r].x = <span class="number">0</span>;</span><br><span class="line">            bricks[c][r].y = <span class="number">0</span>;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.rect(<span class="number">0</span>, <span class="number">0</span>, brickWidth, brickHeight);</span><br><span class="line">            ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span>;</span><br><span class="line">            ctx.fill();</span><br><span class="line">            ctx.closePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>現在會將所有的磚畫出可是它只會畫在同個位置上，所以要加上一些變數，來改變磚的x和y</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft</span><br><span class="line"><span class="keyword">let</span> brickY = (r*(brickHeight+brickPadding))+brickOffsetTop</span><br></pre></td></tr></table></figure>

<p>每個brickX位置是 brickWidth + brickPadding，乘以列數C，再加上brickOffsetLeft；<br>以此類推，brickY的邏輯相同，除了名稱不同，使用行數R，brickHeight，和brickOffsetTop。</p>
<p>現在把變數套進函式內，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBricks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="number">0</span>; c&lt;brickColumnCount; c++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;brickRowCount; r++) &#123;</span><br><span class="line">          <span class="keyword">let</span> brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft</span><br><span class="line">          <span class="keyword">let</span> brickY = (r*(brickHeight+brickPadding))+brickOffsetTop</span><br><span class="line">          bricks[c][r].x = brickX</span><br><span class="line">          bricks[c][r].y = brickY</span><br><span class="line">          ctx.beginPath()</span><br><span class="line">          ctx.rect(brickX, brickY, brickWidth, brickHeight)</span><br><span class="line">          ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span></span><br><span class="line">          ctx.fill()</span><br><span class="line">          ctx.closePath()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣每一塊磚就會被畫在正確的位置上，每一塊磚之間也都有間隔，且是從左上角和頂部的畫布邊緣偏移。</p>
<h1 id="第七步：打破磚"><a href="#第七步：打破磚" class="headerlink" title="第七步：打破磚"></a>第七步：打破磚</h1><p>邏輯是必須在每塊磚一開始給個Key跟Value，添加一個物件KEY表示狀態，值則是讓磚塊有被打破，及沒被打破兩種值，可以用0,1處裡，接著當球如果通過磚要達成以下條件：</p>
<ul>
<li>球的 X 位置大於磚的 X 位置。</li>
<li>球的 X 位置小於磚的 X 位置加上它的寬度。</li>
<li>球的 Y 位置大於磚的Y位置。</li>
<li>球的 Y 位置小於磚塊的 Y 位置加上它的高度。<br>代表磚塊被撞擊了，接著重新設定磚塊屬性，當重新渲染畫面的時候，不渲染屬性屬於消失的磚塊</li>
</ul>
<p>所以</p>
<h2 id="先添加屬性"><a href="#先添加屬性" class="headerlink" title="先添加屬性"></a>先添加屬性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bricks = [];</span><br><span class="line"><span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; brickColumnCount; c++) &#123;</span><br><span class="line">  bricks[c] = [];</span><br><span class="line">  <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; brickRowCount; r++) &#123;</span><br><span class="line">    bricks[c][r] = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">status</span>: <span class="number">1</span> &#125;; <span class="comment">// 先加上一個新key-value，1表示未被打擊</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著畫磚函示加上判斷</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBricks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; brickColumnCount; c++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; brickRowCount; r++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bricks[c][r].status === <span class="number">1</span>) &#123; <span class="comment">// 補上狀態等於1，才進行繪製</span></span><br><span class="line">        <span class="keyword">let</span> brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft</span><br><span class="line">        <span class="keyword">let</span> brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop</span><br><span class="line">        bricks[c][r].x = brickX</span><br><span class="line">        bricks[c][r].y = brickY</span><br><span class="line">        ctx.beginPath()</span><br><span class="line">        ctx.rect(brickX, brickY, brickWidth, brickHeight)</span><br><span class="line">        ctx.fillStyle = <span class="string">&quot;#0095DD&quot;</span></span><br><span class="line">        ctx.fill()</span><br><span class="line">        ctx.closePath()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後補上判斷磚塊是否被打擊函式，邏輯：當磚球都被繪製出位置之後，遍歷所有的磚塊，檢查是否有被擊中，若有就將Y方向反轉，並將磚塊的狀態設定成0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collisionDetection</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="number">0</span>; c&lt;brickColumnCount; c++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;brickRowCount; r++) &#123;</span><br><span class="line">            <span class="keyword">var</span> b = bricks[c][r]</span><br><span class="line">            <span class="keyword">if</span>(x &gt; b.x &amp;&amp; x &lt; b.x+brickWidth &amp;&amp; y &gt; b.y &amp;&amp; y &lt; b.y+brickHeight) &#123;</span><br><span class="line">                dy = -dy</span><br><span class="line">                b.status = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後在draw()中調用函式，切記要在drawBall及drawBrick之後。</p>
<h1 id="第八步：計算分數及獲勝"><a href="#第八步：計算分數及獲勝" class="headerlink" title="第八步：計算分數及獲勝"></a>第八步：計算分數及獲勝</h1><p>邏輯：存一個變數計算分數，然後在磚塊碰撞檢測函數增加，分數增加，然後設定一個獲勝判斷函式，當分數達到多少分時贏得勝利。<br>優化：在畫面上顯示分數。</p>
<p>目前畫面，先來設定記分板的位置</p>
<img src="/2021/09/16/Javascript-brick-break-game/2.png" class="">

<p>完成畫面</p>
<img src="/2021/09/16/Javascript-brick-break-game/3.png" class="">


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collisionDetection</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; brickColumnCount; c++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; brickRowCount; r++) &#123;</span><br><span class="line">      <span class="keyword">let</span> b = bricks[c][r]</span><br><span class="line">      <span class="keyword">if</span> (b.status == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; b.x &amp;&amp; x &lt; b.x + brickWidth &amp;&amp; y &gt; b.y &amp;&amp; y &lt; b.y + brickHeight) &#123;</span><br><span class="line">          dy = -dy;</span><br><span class="line">          b.status = <span class="number">0</span>;</span><br><span class="line">          score += <span class="number">10</span>; <span class="comment">// 加上這個，每個磚塊10分</span></span><br><span class="line">          showScore.innerText = score <span class="comment">// 跟加上這個 要先設定HTML及在一開始宣告常數抓取位置</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>設定好獲勝時的勝利畫面<br>然後在Css設定 display:none 來隱藏</p>
<p>JS加入獲勝判斷函式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectionWin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 當分數達到所有磚塊數量 * 每個磚塊的分數，也不等於0的時候</span></span><br><span class="line">  <span class="keyword">if</span> (score === bricks.length * bricks[<span class="number">0</span>].length * <span class="number">10</span> &amp;&amp; score !== <span class="number">0</span>) &#123;</span><br><span class="line">    winText.style.display = <span class="string">&quot;block&quot;</span>; <span class="comment">// 把獲勝的區塊樣式設定display設定成block顯示</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2021/09/16/Javascript-brick-break-game/4.png" class="">


<h1 id="第九步：滑鼠監測"><a href="#第九步：滑鼠監測" class="headerlink" title="第九步：滑鼠監測"></a>第九步：滑鼠監測</h1><p>只需要利用滑鼠移動監聽器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, mouseMoveHandler);</span><br></pre></td></tr></table></figure>

<p>然後加上mosuMoveHandler函式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseMoveHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> relativeX = e.clientX - canvas.offsetLeft</span><br><span class="line">    <span class="keyword">if</span>(relativeX &gt; <span class="number">0</span> &amp;&amp; relativeX &lt; canvas.width) &#123;</span><br><span class="line">        paddleX = relativeX - paddleWidth/<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在這個函數中，我們首先計算 relativeX 的值，它等於鼠標在視窗中的水平位置 (e.clientX) 減去 canvas 元素左邊框到視窗左邊框的距離 (canvas.offsetLeft) —— 這就得到了 canvas 元素左邊框到鼠標的距離。若這個值大於零，且小於 canvas 的寬度，說明鼠標指針落在 canvas 邊界內，這時就把 paddleX （等於球板左邊緣的坐標）設為 relativeX 減去球板寬度的一半。這樣就確保位移是相對於球板中心進行的。</p>
<img src="/2021/09/16/Javascript-brick-break-game/5.png" class="">

<h1 id="第十步：部分優化"><a href="#第十步：部分優化" class="headerlink" title="第十步：部分優化"></a>第十步：部分優化</h1><ol>
<li>隨機開始發球的方向</li>
<li>增加勝利畫面</li>
<li>增加輸畫面</li>
<li>增加生命次數</li>
<li>增加出界線</li>
</ol>
<p>完成畫面</p>
<img src="/2021/09/16/Javascript-brick-break-game/6.png" class="">

<h3 id="setInterval改為requestAnimationFrame進行優化渲染"><a href="#setInterval改為requestAnimationFrame進行優化渲染" class="headerlink" title="setInterval改為requestAnimationFrame進行優化渲染"></a>setInterval改為requestAnimationFrame進行優化渲染</h3><ol start="6">
<li>將原本的setInterval改為新版的requestAnimationFrame進行優化渲染<br>用requestAnimationFrame是因為瀏覽器會自動每秒60偵進行畫面渲染，當不在瀏覽視窗的時候，會自動停止渲染，不占用CPU。</li>
</ol>
<p>首先先在頁頭宣告一個變數 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> render = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>再來將原本任何關於Interval的部分全部刪除，包含停止渲染clearInterval都要刪除，這時候不管輸贏都不會停止了</p>
<p>再來說說requestAnimationFrame的使用方式<br>它是一個callback函式，所以必須要把它放在draw函式最後並調用它，並且將draw作為參數帶入，最後將他賦予給一開始定義為null的 <strong>render</strong> 變數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  detectionWin()</span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y + dy &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y + dy &gt; canvas.height - ballRadius * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; paddleX &amp;&amp; x &lt; paddleX + paddleWidth) &#123;</span><br><span class="line">      dy = -dy</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!lives) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval) <span class="comment">// 輸了之後停止，這段刪除</span></span><br><span class="line">        loseText.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        lives--</span><br><span class="line">        x = canvas.width / <span class="number">2</span>;</span><br><span class="line">        y = canvas.height - <span class="number">30</span>;</span><br><span class="line">        dx = <span class="number">5</span> * (<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()) * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        dy = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * -<span class="number">3</span>) - <span class="number">2</span></span><br><span class="line">        paddleX = (canvas.width - paddleWidth) / <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render = requestAnimationFrame(draw) <span class="comment">// 最後加入這段</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>接著來修改監聽Enter的函式keyDownHandler()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyDownHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.key === <span class="string">&quot;Enter&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!render) &#123; <span class="comment">// 由原本的interval 改為 render</span></span><br><span class="line">      draw() <span class="comment">// 如果render是空的話，就執行畫圖渲染計算</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      initial()</span><br><span class="line">      draw() <span class="comment">// 原本拿掉了interval，這邊要放回draw()</span></span><br><span class="line">      loseText.style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      winText.style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (e.keyCode == <span class="number">39</span>) &#123;</span><br><span class="line">    rightPressed = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == <span class="number">37</span>) &#123;</span><br><span class="line">    leftPressed = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以目前遊戲的邏輯是</p>
<ol>
<li>遊戲初始畫畫面(停止)</li>
<li>render = null</li>
<li>按下Enter後呼叫draw()，並且draw() 會 render = requestAnimationFrame(draw)</li>
<li>等待輸贏</li>
</ol>
<p>接著就是要等待輸贏，不管贏或輸都要停止渲染，這邊接著說明 requestAnimationFrame() 停止的使用方式</p>
<h3 id="requestAnimationFrame-的停止方式為-cancelAnimationFrame"><a href="#requestAnimationFrame-的停止方式為-cancelAnimationFrame" class="headerlink" title="requestAnimationFrame()的停止方式為 cancelAnimationFrame()"></a>requestAnimationFrame()的停止方式為 cancelAnimationFrame()</h3><p>但要使用用cancelAnimationFrame()這個函式來停止requestAnimationFrame()有一個條件，<br><strong>就是 requestAnimationFrame() 當初有給他一個變數名稱</strong><br>所以本案案例就是render，這邊我將render帶入，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cancelAnimationFrame(render)</span><br></pre></td></tr></table></figure>
<p>並將他放判斷輸贏的部分，一旦取消後，要再次將 render = null</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 贏的部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectionWin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (score === bricks.length * bricks[<span class="number">0</span>].length * <span class="number">10</span> &amp;&amp; score !== <span class="number">0</span>) &#123;</span><br><span class="line">    cancelAnimationFrame(render) <span class="comment">// 原本的clearInterval刪除，並且加入這端</span></span><br><span class="line">    render = <span class="literal">null</span> <span class="comment">// 別忘了把render 轉回 null</span></span><br><span class="line">    winText.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸的部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  detectionWin()</span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y + dy &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y + dy &gt; canvas.height - ballRadius * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; paddleX &amp;&amp; x &lt; paddleX + paddleWidth) &#123;</span><br><span class="line">      dy = -dy</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!lives) &#123;</span><br><span class="line">        cancelAnimationFrame(render) <span class="comment">// 原本的clearInterval刪除，並且加入這端</span></span><br><span class="line">        render = <span class="literal">null</span> <span class="comment">// 別忘了把render 轉回 null</span></span><br><span class="line">        loseText.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        lives--</span><br><span class="line">        x = canvas.width / <span class="number">2</span>;</span><br><span class="line">        y = canvas.height - <span class="number">30</span>;</span><br><span class="line">        dx = <span class="number">5</span> * (<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()) * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        dy = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * -<span class="number">3</span>) - <span class="number">2</span></span><br><span class="line">        paddleX = (canvas.width - paddleWidth) / <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (rightPressed &amp;&amp; paddleX &lt; canvas.width - paddleWidth) &#123;</span><br><span class="line">    paddleX += <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    paddleX -= <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">  drawBoundary()</span><br><span class="line">  drawLives()</span><br><span class="line">  drawBricks()</span><br><span class="line">  drawBall()</span><br><span class="line">  drawPaddle()</span><br><span class="line">  collisionDetection()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>都設定完畢了，但是發現為什麼畫面還是沒有停止渲染!?!?!?<br>這個地方我搞了老半天，以為是函示使用錯誤，最後發現問題在這</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectionWin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (score === bricks.length * bricks[<span class="number">0</span>].length * <span class="number">10</span> &amp;&amp; score !== <span class="number">0</span>) &#123;</span><br><span class="line">    cancelAnimationFrame(render) </span><br><span class="line">    render = <span class="literal">null</span> </span><br><span class="line">    winText.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  detectionWin() <span class="comment">// !!!!!!!!!!!!!!!!!!!你就是兇手!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y + dy &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y + dy &gt; canvas.height - ballRadius * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; paddleX &amp;&amp; x &lt; paddleX + paddleWidth) &#123;</span><br><span class="line">      dy = -dy</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!lives) &#123;</span><br><span class="line">        cancelAnimationFrame(render) </span><br><span class="line">        render = <span class="literal">null</span> </span><br><span class="line">        loseText.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        lives--</span><br><span class="line">        x = canvas.width / <span class="number">2</span>;</span><br><span class="line">        y = canvas.height - <span class="number">30</span>;</span><br><span class="line">        dx = <span class="number">5</span> * (<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()) * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        dy = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * -<span class="number">3</span>) - <span class="number">2</span></span><br><span class="line">        paddleX = (canvas.width - paddleWidth) / <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (rightPressed &amp;&amp; paddleX &lt; canvas.width - paddleWidth) &#123;</span><br><span class="line">    paddleX += <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    paddleX -= <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">  drawBoundary()</span><br><span class="line">  drawLives()</span><br><span class="line">  drawBricks()</span><br><span class="line">  drawBall()</span><br><span class="line">  drawPaddle()</span><br><span class="line">  collisionDetection()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因出在，當我draw()調用detectionWin()後並沒有return，所以程式又繼續執行下去了!!<br>所以這時候我們要改改函式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectionWin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (score === bricks.length * bricks[<span class="number">0</span>].length * <span class="number">10</span> &amp;&amp; score !== <span class="number">0</span>) &#123;</span><br><span class="line">    winText.style.display = <span class="string">&quot;block&quot;</span>; <span class="comment">//前面拿掉cancelAnimationFrame(render)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 回傳 true</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="comment">// 設一個判斷在此，並將將detectionWin()的回傳值傳入，這時候如果是true，就會停止渲染，並把render = null，並return，如果沒有贏，就繼續下去。</span></span><br><span class="line">  <span class="keyword">if</span> (detectionWin()) &#123;</span><br><span class="line">    cancelAnimationFrame(render) </span><br><span class="line">    render = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x + dx &gt; canvas.width - ballRadius || x + dx &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dx = -dx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y + dy &lt; <span class="number">0</span> + ballRadius) &#123;</span><br><span class="line">    dy = -dy;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y + dy &gt; canvas.height - ballRadius * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; paddleX &amp;&amp; x &lt; paddleX + paddleWidth) &#123;</span><br><span class="line">      dy = -dy</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!lives) &#123;</span><br><span class="line">        cancelAnimationFrame(render) </span><br><span class="line">        render = <span class="literal">null</span> </span><br><span class="line">        loseText.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        lives--</span><br><span class="line">        x = canvas.width / <span class="number">2</span>;</span><br><span class="line">        y = canvas.height - <span class="number">30</span>;</span><br><span class="line">        dx = <span class="number">5</span> * (<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()) * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">        dy = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * -<span class="number">3</span>) - <span class="number">2</span></span><br><span class="line">        paddleX = (canvas.width - paddleWidth) / <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (rightPressed &amp;&amp; paddleX &lt; canvas.width - paddleWidth) &#123;</span><br><span class="line">    paddleX += <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (leftPressed &amp;&amp; paddleX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    paddleX -= <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">  drawBoundary()</span><br><span class="line">  drawLives()</span><br><span class="line">  drawBricks()</span><br><span class="line">  drawBall()</span><br><span class="line">  drawPaddle()</span><br><span class="line">  collisionDetection()</span><br><span class="line">  x += dx</span><br><span class="line">  y += dy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>大功告成!!</strong></p>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>專案實作 - 個人記帳簿</title>
    <url>/2021/09/19/project-exercise-expenses/</url>
    <content><![CDATA[<p><strong><a href="https://thawing-cove-52548.herokuapp.com/">完成作品</a></strong></p>
<p>此網頁以<strong>記帳簿來</strong>作為主題</p>
<ol>
<li><p>此篇將記錄使用Express框架、handlebars網頁模板、Mongoose操控MongoDB來建構一個透過route來達到CRUD網頁的過程</p>
</li>
<li><p>以 RESTful (Representational State Transfer) 來作為撰寫程式碼風格</p>
</li>
<li><p>會直接將該建立的資料夾直接建立，不會最後再來改寫路由。</p>
<span id="more"></span>
<h1 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h1><h2 id="初始化設定"><a href="#初始化設定" class="headerlink" title="初始化設定"></a>初始化設定</h2></li>
<li><p>開新專案資料夾</p>
</li>
<li><p>初始化git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="3">
<li>資料夾底下初始化npm檔案<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="4">
<li>安裝express工具包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install express</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="5">
<li><p>安裝express使用的handlebars工具包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install express-handlebars</span><br></pre></td></tr></table></figure></li>
<li><p>未來安裝mongoose來控制MongoDB文件資料庫伺服器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure></li>
<li><p>安裝method-override，來改寫路由的POST可以修改成PUT(修改、更新)，DELETE(刪除)，來達到GET(取得、讀取)，POST(新增)，PUT(修改、更新)，DELETE(刪除)，CRUD路由語意化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install method-override</span><br></pre></td></tr></table></figure></li>
<li><p>開一個js檔案來撰寫伺服器，命名為app.js</p>
</li>
</ol>
<ol start="7">
<li>在目錄底下npm初始化的package.json檔案設定腳本，方便之後使用<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;nodemon app.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
如果尚未安裝nodemon 請先安裝nodemon，未來在設計伺服器的時候，nodemon會自動抓取檔案是否有變更，有變更會自動重啟伺服器，就不需要一直手動重啟伺服器。</li>
</ol>
<hr>
<h2 id="載入-packages-及設定"><a href="#載入-packages-及設定" class="headerlink" title="載入 packages 及設定"></a>載入 packages 及設定</h2><ol start="8">
<li><p>js載入express工具包，並設定好各項變數參數，並啟動伺服器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span> (<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伺服器在收到跟目錄位置時，要回應什麼東西，目前先設定一段純文字</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;This is Express server.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on https://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>這時可以先測試伺服器有無啟動</p>
</li>
<li><p>js載入handlebars工具包，並設定好各項變數參數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span> (<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> exphbs = <span class="built_in">require</span>(<span class="string">&#x27;express-handlebars&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 app.engine(extname, callback) 的方法，來建立要使用的樣板引擎</span></span><br><span class="line"><span class="comment">// extname 是你要給這個引擎的名稱同時也要跟附檔名設定一樣，可以自己設定，第二個參數是要使用什麼引擎，並設定這個引擎的相關參數</span></span><br><span class="line"><span class="comment">// 這邊第二個參數就將載入好的handlebars作為參數，並設定handlebars內的defaultLayout: 以及extname: </span></span><br><span class="line"><span class="comment">// defaultLayout是用來設定我們要以哪個檔案名做為主要樣板</span></span><br><span class="line"><span class="comment">// extname是用來設定我們要識別的副檔名，預設為handlebars，太長了我們把它簡化改為.hbs，同時第一個參數名稱命名也得是hbs</span></span><br><span class="line">app.engine(<span class="string">&#x27;hbs&#x27;</span>, exphbs(&#123; <span class="attr">defaultLayout</span>: <span class="string">&#x27;main&#x27;</span>, <span class="attr">extname</span>: <span class="string">&#x27;.hbs&#x27;</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊是設定express將要使用的顯示引擎設為hbs，這個名稱是根據上面設定的名稱而訂。</span></span><br><span class="line"><span class="comment">// engine的命名，副檔名的命名，以及使用的view engine，三者要一樣</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;hbs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;This is Express server.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on https://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>根據Express和handlebars的規範建立正確的資料夾<br>在跟目錄底下開一個 views 資料夾(Express)，views內再加一個子資料夾layouts(handlebars)。</p>
</li>
<li><p>在layouts內建立一個 main.hbs 的檔案</p>
</li>
<li><p>在main.hbs 就可以寫入html的相關布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Keep Accounts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 這邊要寫入&#123;&#123;&#123;body&#125;&#125;&#125;是因為，樣板引擎會識別這個位置，並把其他部分的樣版內容放進來此處 --&gt;</span></span><br><span class="line">  &#123;&#123;&#123; body &#125;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外<code>&#123;&#123;&#123; &#125;&#125;&#125;</code>三個花括號代表帶入的內容要分辨html標籤，如果不要分辨html內容則是帶入<code>&#123;&#123; &#125;&#125;</code>兩個花括號，也是作為其他if each之類的語法辨識使用</p>
</li>
<li><p>在views裡建立首頁要顯示的內容，index.hbs，這些頁面就會被引入 main.hbs 的 <code>&#123;&#123;&#123; body &#125;&#125;&#125;</code> 部分，</p>
</li>
<li><p>先在index內隨便寫些東西，等等要確定伺服器的啟動沒有問題。</p>
</li>
<li><p>目前設定好了 Express, Handlebars, 接著設定首頁的route</p>
</li>
</ol>
<hr>
<h2 id="route建立及設定"><a href="#route建立及設定" class="headerlink" title="route建立及設定"></a>route建立及設定</h2><ol start="16">
<li><p>先建立routes資料夾<br>根目錄下先開routes資料夾以及index.js，資料夾下建立子資料夾modules及home.js</p>
</li>
<li><p>先設定<strong>index.js</strong><br>載入此之路由home.js，並設定首頁<code>&#39;/&#39;</code><strong>route到home.js</strong>，最後匯出router</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本設定</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊使用 router.use 導向home資料夾</span></span><br><span class="line">router.use(<span class="string">&#x27;/&#x27;</span>,home)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = router</span><br></pre></td></tr></table></figure></li>
<li><p>設定<strong>home.js</strong>的路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本設定，一樣需要express及express的Router</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當router取得 &#x27;/&#x27; 請求，請回應 index 頁面給客戶端</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//同樣需要export</span></span><br><span class="line"><span class="built_in">module</span>.export = router</span><br></pre></td></tr></table></figure></li>
<li><p>回到主程式<strong>app.js</strong>掛載此路由工具，先刪除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>再來設定Express要使用routes</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只需要設定routes目錄位置就可以了，會自己去尋找index.js檔案</span></span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./routes&#x27;</span>)</span><br><span class="line">app.use(routes)</span><br></pre></td></tr></table></figure>

<p>重新拜訪 <a href="http://localhost:3000/">http://localhost:3000</a> 看看有沒有成功。</p>
<ol start="20">
<li>大致都設定完成後，終端機輸入npm run dev先來啟動伺服器看看成不成功</li>
</ol>
<p>目前的資料夾以及成功畫面，並且git commit一下初始化吧! 記得.gitignore要忽略node_modules，不然會一大堆檔案。</p>
<img src="/2021/09/19/project-exercise-expenses/1.png" class="">

<hr>
<h2 id="連線-MongoDB-並建立種子資料"><a href="#連線-MongoDB-並建立種子資料" class="headerlink" title="連線 MongoDB 並建立種子資料"></a>連線 MongoDB 並建立種子資料</h2><ol start="21">
<li><p>先在MongoDB開設專用database，命名為expenses</p>
</li>
<li><p>接著在根目錄開設config資料夾，要將設定相關的檔案都放在這</p>
</li>
<li><p>在資料夾內建立mongoose.js<br>先載入 mongoose，並用mongoose連線mongoDB</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/expenses&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>連線mongoose連線mongodb後會取得一個連線狀態的資訊，我們需要設定一個參數，把連線狀態暫存下來，才能繼續使用。接著設定正常連線顯示時連線成功以及錯誤時顯示連線錯誤，最後將它匯出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = mongoose.connection</span><br><span class="line"><span class="comment">// 連線異常</span></span><br><span class="line">db.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;mongodb error!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 連線成功</span></span><br><span class="line"><span class="comment">// 連線成功只會發生一次，所以這裡特地使用 once，由 once 設定的監聽器是一次性的，一旦連線成功，在執行 callback 以後就會解除監聽器。</span></span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;mongodb connected!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = db</span><br></pre></td></tr></table></figure></li>
<li><p>回到根目錄建立models資料夾，來完成MVC(models views control)軟體設計模式，並建立expenses.js<br>先載入mongoose，再來設定Schema(資料型態結構)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> expenseSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">category_1</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">category_2</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">itemName</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">cost</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">method</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">time</span>: &#123;</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">month</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hour</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minute</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;Expenses&#x27;</span>, expenseSchema)</span><br></pre></td></tr></table></figure></li>
<li><p>接著在models目錄下創建seeds資料夾，並建立expensesSeeder.js，之後可以用來創建基本的種子資料來做測試。<br>先引入剛剛設定好的expenses.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../expenses&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../../config/mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>,<span class="function">() =&gt;</span>&#123;</span><br><span class="line">  Expenses.create(&#123;</span><br><span class="line">    <span class="attr">category_1</span>: <span class="string">&#x27;分類1&#x27;</span>,</span><br><span class="line">      <span class="attr">category_2</span>: <span class="string">&#x27;分類2&#x27;</span>,</span><br><span class="line">      <span class="attr">itemName</span>: <span class="string">`itemName-`</span> + i,</span><br><span class="line">      <span class="attr">cost</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;現金&#x27;</span>,</span><br><span class="line">      <span class="attr">time</span>: &#123;</span><br><span class="line">        <span class="attr">year</span>: <span class="number">2021</span>,</span><br><span class="line">        <span class="attr">month</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">date</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">hour</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">minute</span>: <span class="number">9</span>,</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Created seeds done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>之後再package.json裡設定腳本，方便以後執行創建種子測試</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;seeds&quot;</span>: <span class="string">&quot;node models/seeds/expensesSeeder.js&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<p>現在可以使用專端機測試執行種子腳本看有沒有成功，並在資料庫檢查是否有成功生成種子資料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm run seeds</span><br><span class="line"></span><br><span class="line">&gt; accounts@1.0.0 seeds D:\0.Personal\test\expenses</span><br><span class="line">&gt; node models/seeds/expensesSeeder.js</span><br><span class="line"></span><br><span class="line">mongodb connected</span><br><span class="line">Created seeds done.</span><br></pre></td></tr></table></figure>

<ol start="27">
<li><p>回到<strong>app.js</strong> 引入mongoose.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./config/mongoose&#x27;</span>) <span class="comment">// 直接加入</span></span><br></pre></td></tr></table></figure></li>
<li><p>接著嘗試將資料引入畫面中，這時我們需要回到路由<strong>home.js</strong>設定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../../models/expenses&#x27;</span>) <span class="comment">// 增加這段</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  Expenses.find() <span class="comment">// 搜尋資料，若不加入條件，則返回全部資料</span></span><br><span class="line">  .lean() <span class="comment">// 撈完資料要用lean，因為不允許直接使用原型物件，要將原型物件先做處理將它變成單純的物件</span></span><br><span class="line">  <span class="comment">// sort為排序指令，可以帶入要以什麼作為排序，這邊使用mongodb創建時會產生的_id來作為排序資料</span></span><br><span class="line">  <span class="comment">// 這個id是會按照&quot;正常的時間&quot;先後順序排列的，asc(ascending)正序 desc(descending)反序。</span></span><br><span class="line">  .sort( &#123;<span class="attr">_id</span>: <span class="string">&#x27;asc&#x27;</span>&#125; ) </span><br><span class="line">  .then(<span class="function"><span class="params">items</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 將資料全部送到index內來使用</span></span><br><span class="line">    res.render(<span class="string">&#x27;index&#x27;</span>, &#123; items &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></li>
<li><p>將資料帶進index.hbs<br>先建立些草稿HTML結構後，回到routes &gt; modules &gt; home.js，重新設定路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="comment">// 新增</span></span><br><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../../models/expense&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由需引入Expenses資料庫資料</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 這邊使用find來取得資料，後面沒有加入條件則是取得全部資料</span></span><br><span class="line">  Expenses.find()</span><br><span class="line">  .lean() <span class="comment">// handlebars不能直接使用原型物件，所以要先使用mongoose的lean()將資料轉為純物件</span></span><br><span class="line">  <span class="comment">// 將取得的資料帶入index</span></span><br><span class="line">  .then(<span class="function"><span class="params">expenseItems</span> =&gt;</span> res.render(<span class="string">&#x27;index&#x27;</span>, &#123;expenseItems&#125;))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>此階段的完成狀態</p>
<img src="/2021/09/19/project-exercise-expenses/2.png" class=""></li>
</ol>
<p><strong>Day 1 結束</strong></p>
<hr>
<h1 id="day-2"><a href="#day-2" class="headerlink" title="day 2"></a>day 2</h1><p>這幾天工作忙碌，沒辦法全心全力投入製作，但做多少算多少吧! 慢慢刻!</p>
<p>從上次將資料從文件資料庫引入後，打算先來刻一些簡單的版面。</p>
<h2 id="設定靜態檔案資料夾"><a href="#設定靜態檔案資料夾" class="headerlink" title="設定靜態檔案資料夾"></a>設定靜態檔案資料夾</h2><ol>
<li>先根目錄開設Public資料夾來放置要使用的JavaScript及styleSheet檔案，然後接著在app.js內設定靜態檔案的資料夾名稱<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="初始化CSS"><a href="#初始化CSS" class="headerlink" title="初始化CSS"></a>初始化CSS</h2><ol start="2">
<li>開style.css開始初始化設定CSS，<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* http://meyerweb.com/eric/tools/css/reset/ </span></span><br><span class="line"><span class="comment">   v2.0 | 20110126</span></span><br><span class="line"><span class="comment">   License: none (public domain)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, embed, </span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, output, ruby, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">font</span>: inherit;</span><br><span class="line">	<span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, </span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">	<span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">	content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">	<span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="載入字體"><a href="#載入字體" class="headerlink" title="載入字體"></a>載入字體</h2><ol start="3">
<li><p>將字體載入CSS<br>將字體檔案放置到stylesheet檔案夾下，另開一個font資料夾，將中文字體檔案丟入，<br>設定中文字體，依不同副檔名會輸入不同format。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;NotoSansTC&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;./fonts/Noto_Sans_TC/NotoSansTC-Regular.otf&quot;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後記得在main樣板head內載入CSS。</p>
</li>
<li><p>開始切版，先製作導覽列以後希望增加功能的按鈕，未來可以用來切換頁面，我們將內容寫在main.hbs內<br>切版記得要以mobile first，行動優先。<br>header下方使用javascript帶入當日日期，不管查詢或創建資料任何頁面，都將日期顯示在此處。<br>main.hbs，body後載入js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> year = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.year&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> monthDate = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.month-date&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">year.innerText = date.getFullYear()</span><br><span class="line">monthDate.innerText = <span class="string">`<span class="subst">$&#123;date.getMonth() + <span class="number">1</span>&#125;</span> 月 <span class="subst">$&#123;date.getDate()&#125;</span> 日`</span></span><br></pre></td></tr></table></figure>
<p>當創建一個日期後，會得到一個毫秒，是從1970年1月1日起經過的毫秒數，<br>對創建的新日期使用：</p>
</li>
</ol>
<ul>
<li>getFullYear，會得到年</li>
<li>getMonth，會返還0~11數字</li>
<li>getdate, 會返還1~31數字</li>
</ul>
<p>階段完成圖<img src="/2021/09/19/project-exercise-expenses/3.png" class=""></p>
<p><strong>第二日記錄：</strong><br>最近工作好忙，沒多少時間可以專心刻網頁，加上還有alpha camp的課程進度，進度稍微緩慢，反正沒人催，慢慢一步一步把網頁刻出來就對了</p>
<p><strong>新學習項目：</strong></p>
<ul>
<li>如何載入文字檔案 @font-face {}</li>
<li>日期操作 new date()</li>
</ul>
<p><strong>day 2 結束</strong></p>
<hr>
<h1 id="day-3"><a href="#day-3" class="headerlink" title="day 3"></a>day 3</h1><h2 id="初步切版"><a href="#初步切版" class="headerlink" title="初步切版"></a>初步切版</h2><ol>
<li><p>上次增加完當日日期後，先將上次傳送進來的資料做整理排版</p>
</li>
<li><p>新增一個增加的按鈕連結，路由位置可以送到/expense/new，經由此路由可以到創建資料的頁面，<br>完成畫面</p>
<img src="/2021/09/19/project-exercise-expenses/4.png" class=""></li>
<li><p>在資料上新增按鈕，可以檢視詳細內容，編輯，以及刪除。</p>
<img src="/2021/09/19/project-exercise-expenses/5.png" class=""></li>
</ol>
<h2 id="添加新增功能"><a href="#添加新增功能" class="headerlink" title="添加新增功能"></a>添加新增功能</h2><ol start="4">
<li><p>開始製作新增功能頁面，在views下新開一個add.hbs，一樣先隨便添加一些html內容</p>
</li>
<li><p>再來設定路由，目標是當按下新增按鈕的時候，能夠將畫面銜接到新增的頁面<br>在routes &gt;　modules 下開一個expenses.js ， 並設定好路由。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../../models/expense&#x27;</span>) <span class="comment">// 未來編輯或查看詳細資料都會使用到資料庫</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></li>
<li><p>設定按鈕連結至路由 /expenses/add</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/expenses/add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-create btn-common&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>成功連結畫面</p>
<img src="/2021/09/19/project-exercise-expenses/7.png" class=""></li>
</ol>
<h2 id="隱藏滾動條"><a href="#隱藏滾動條" class="headerlink" title="隱藏滾動條"></a>隱藏滾動條</h2><ol start="8">
<li><p>這時候發現切換頁面時，版面會移動，因為滾動條出現的關係。</p>
<img src="/2021/09/19/project-exercise-expenses/6.png" class=""></li>
<li><p>上網查了一下怎麼隱藏滾動條：</p>
</li>
</ol>
<p><strong>不能在CSS上設定 overflow-y: hidden，</strong><br>雖然滾動條會隱藏，但是連滾動也都會失效，<br>所以又查了其他辦法，看到要依不同瀏覽器設定不同的CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Chrome瀏覽器 */</span></span><br><span class="line"><span class="selector-tag">body</span>::-webkit-scrollbar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE/Edge瀏覽器 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    -ms-<span class="attribute">overflow</span>-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Firefox</span></span><br><span class="line"><span class="comment">firefox 是三者之中最麻煩的： */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: -moz-hidden-unscrollable; <span class="comment">/*注意！若只打 hidden，chrome 的其它 hidden 會出問題*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> + <span class="number">18px</span>); <span class="comment">/*瀏覽器滾動條的長度大約是 18px*/</span></span><br><span class="line">	<span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功畫面</p>
<img src="/2021/09/19/project-exercise-expenses/8.png" class="">


<h2 id="除錯"><a href="#除錯" class="headerlink" title="除錯"></a>除錯</h2><ol start="10">
<li>在切換到新增頁面的時候發現一個小錯誤，header內的當天日期沒有顯示，使用Devtool發現原來是在切換頁面的時候main.js內一開始設定抓取元素的常數，無法重複宣告，所以要將置入時間設定成為一個function，可以重複呼叫使用，這些常數變數的作用域就不會重覆到。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerTitleDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> year = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.year&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> monthDate = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.month-date&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">year.innerText = date.getFullYear()</span><br><span class="line">monthDate.innerText = <span class="string">`<span class="subst">$&#123;date.getMonth() + <span class="number">1</span>&#125;</span> 月 <span class="subst">$&#123;date.getDate()&#125;</span> 日`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">innerTitleDate()</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="設定add-page的HTML-form"><a href="#設定add-page的HTML-form" class="headerlink" title="設定add page的HTML form"></a>設定add page的HTML form</h2><ol start="11">
<li>設計新增頁面的表單，表單action要送到 /expenses/add , method 要設定為 POST<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/expenses/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加 input      --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
完成後的html及完成照<img src="/2021/09/19/project-exercise-expenses/9.png" class="">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/expenses/add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input-date&quot;</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-date&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;input-date&#x27;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input-method&quot;</span>&gt;</span>資產<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;input-method&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-method&quot;</span> <span class="attr">name</span>=<span class="string">&quot;method&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>現金<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>信用卡<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>帳戶轉帳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input-category&quot;</span>&gt;</span>類別<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input-category&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-category&quot;</span> <span class="attr">list</span>=<span class="string">&quot;options-category&quot;</span> <span class="attr">name</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;options-category&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>選擇一項類別，或自行輸入<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>食物<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>社交<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>個人發展<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>交通<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>文化<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>服飾<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>美容<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>健康<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>禮物<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input-item-name&quot;</span>&gt;</span>內容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-item-name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-item-name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;itemName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;input-cost&quot;</span>&gt;</span>花費<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-cost&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-cost&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cost&quot;</span> <span class="attr">inputmode</span>=<span class="string">&quot;numeric&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;remark-textarea&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-remark&quot;</span>&gt;</span>備註<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input-remark-area&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn-common&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>儲存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/javascripts/add.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="創建自動帶入當日日期"><a href="#創建自動帶入當日日期" class="headerlink" title="創建自動帶入當日日期"></a>創建自動帶入當日日期</h2><ol start="12">
<li>可以設置一個add專用的js，目的是當新建時，會自動置入當天日期，優化UI體驗<br>input date的值為 xxxx-xx-xx，例如2021-01-01，當位數少於兩位數時，請先補上0，不然無法正常顯示。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputDate = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.input-date&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertToday</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> year = today.getFullYear()</span><br><span class="line">  <span class="keyword">let</span> month = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> date = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((today.getMonth() + <span class="number">1</span>) &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    month += today.getMonth() + <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    month += <span class="string">&#x27;0&#x27;</span> + (today.getMonth() + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (today.getDate() &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    date += today.getDate()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    date += <span class="string">&#x27;0&#x27;</span> + (today.getDate())</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  inputDate.value = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;date&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertToday()</span><br></pre></td></tr></table></figure>

<p>完成後接著就要來設定路由啦! 將取得的資料存入資料庫當中。</p>
<h2 id="將資料存入資料庫"><a href="#將資料存入資料庫" class="headerlink" title="將資料存入資料庫"></a>將資料存入資料庫</h2><ol start="13">
<li>在設定路由之前，express要先設定使用 body-parser ，新版的express已經有將body-parser納入模組中，舊版的就得另外安裝npm install body-parser，我們直接使用模組的body-parser不另外安裝<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;))</span><br></pre></td></tr></table></figure>
這樣才有辦法取得瀏覽器送出POST行為時的的表單資料(req.body的資料)，在路由端收到資料後可以直接轉化成JS的物件型態，再將其轉存進資料庫。</li>
</ol>
<hr>
<p><strong>複習</strong>：當使用GET送出的話，資料會顯示在瀏覽器網址列上，有一種作法是將連結設定到某個路由位置，伺服器端路由器設定當取得某一個動態路由:params，就可以將這網址的動態路由部分，作為參數使用，範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/movies/:movie_id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;req.params.movie_id&#x27;</span>, req.params.movie_id)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  res.render(<span class="string">&#x27;show&#x27;</span>, &#123; <span class="attr">movie</span>: movieOne &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<img src="/2021/09/19/project-exercise-expenses/10.png" class="">
<center>圖片來源:Alpha Camp</center>

<p>可以看到，當客戶端送出不同的網址時，req.params.movie_id部分會跟著網址變動</p>
<p>另一種是當表單，例如在撰寫html的input時input會綁一個name屬性，當送出表單的action發送到某個路由位置，可以看到瀏覽器上最後會有個?後面帶著input設定的name=value(input的value)，此使可以在路由中可以透過req.query來取得name和value，範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;req.query&#x27;</span>, req.query)</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">movies</span>: movieList.results &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<img src="/2021/09/19/project-exercise-expenses/11.png" class="">
<center>圖片來源:Alpha Camp</center>

<p>可以看到網址最後有一個?keyword=Ant-Man，search為路由器，keyword為input設定的name，Ant-Man為input的值</p>
<hr>
<ol start="14">
<li>到routes &gt; modules &gt; expenses.js 設定路由<br>可以先加入，意思是當form送出時，會發出到 method為POST，到/expenses/add這個位置，伺服器收到請求後，做出console.log(req.body)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<img src="/2021/09/19/project-exercise-expenses/12.png" class=""></li>
</ol>
<p>此時可以看到表單的內容已經轉化成Javascript的物件，接著就可以將物件裡的屬性存成各個變數再帶入資料庫，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> time = &#123;</span><br><span class="line">    <span class="attr">year</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">    <span class="attr">month</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">    <span class="attr">date</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">2</span>],</span><br><span class="line">    <span class="attr">hour</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getHours(),</span><br><span class="line">    <span class="attr">minute</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解構賦值 (destructuring assignment) 語法</span></span><br><span class="line">  <span class="keyword">const</span> &#123; method, category, itemName, cost, remark &#125;= req.body</span><br><span class="line">  <span class="keyword">return</span> Expenses.create(&#123;category, itemName, cost, method, remark, time&#125;)</span><br><span class="line">  .then(res.redirect(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>先說明解構賦值 (destructuring assignment)語法，<strong>主要就是想要把物件裡的屬性一項項拿出來存成變數時</strong>，可以使用的一種縮寫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; method, category, itemName, cost, remark &#125;= req.body</span><br></pre></td></tr></table></figure>

<p>而time因為是一個字串，格式為 xxxx-xx-xx，所以要先使用split轉為陣列，再將每段字串，個別放入不同的變數當中。<br>最後使用mongoose的 .create({}) ，創建一筆資料，依序存入變數原本寫法為 { category: category, itemName:itemName,}，<br>上面也是簡化寫法。第一個為資料庫的key值，第二個為value，相同時可以簡寫。<br>最後使用res.redirect(‘/‘)返回首頁。</p>
<ol start="15">
<li>發現最後建立的資料跑到最後一筆，希望最後寫的資料可以呈現在最上面，所以到routes &gt; modules &gt; home.js 改寫路由取得資料後的排序方式<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  Expenses.find()</span><br><span class="line">    .lean()</span><br><span class="line">    .sort(&#123; <span class="attr">_id</span>: <span class="string">&#x27;desc&#x27;</span> &#125;) <span class="comment">// 這邊改為desc反序</span></span><br><span class="line">    .then(<span class="function"><span class="params">expenseItems</span> =&gt;</span> res.render(<span class="string">&#x27;index&#x27;</span>, &#123; expenseItems &#125;))</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>最後畫面</strong></p>
<img src="/2021/09/19/project-exercise-expenses/13.png" class="">


<p><strong>第三日記錄：</strong><br>今天週六，最近工作在趕案子，這幾天都趕圖做滿晚的，其實原本想休息，結果還是閒不下來，最後還是開了檔案繼續完成，結果一坐下來，又陸陸續續複習了很多東西，還完成了初步的建立資料，也是值得開心的一個小進度，計畫明天把剩下的幾個初步功能完成，我想應該沒問題。</p>
<p><strong>新學習項目：</strong></p>
<ul>
<li>隱藏滾動條</li>
</ul>
<p><strong>day 3 結束</strong></p>
<hr>
<h1 id="day-4"><a href="#day-4" class="headerlink" title="day 4"></a>day 4</h1><p>今天開始來實作其他的功能，先從編輯開始下手</p>
<h2 id="添加編輯功能"><a href="#添加編輯功能" class="headerlink" title="添加編輯功能"></a>添加編輯功能</h2><ol>
<li>因為已經做好了新增畫面，可以使用同樣畫面表單來做編輯使用，可以先將add.hbs內容複製倒edit.hbs，複製完記得將最後的script刪除<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最後原本從add.hbs複製過來導入的add.js，記得刪除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/javascripts/add.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 以上刪除 --&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>接著我們順先一下邏輯，我要從index的列表上，點擊編輯後，有辦法從資料庫找到正確的資料，然後把資料顯示在edit的畫面上，然後再透過儲存，將原本的資料修改掉，所以：</p>
<ol>
<li>index的列表編輯按鈕連結上，要綁上各個資料的ID</li>
<li>藉由網址ID，找到正確的路由，並且透過動態路由，來取得req.params.id，並透過ID從資料庫取得資料，並帶入edit 頁面</li>
<li>最後要更新的內容表單送出後經過正確路由，將新的資料存回資料庫。</li>
</ol>
<ol start="2">
<li><p>首先改寫 index 列表編輯按鈕上的連結，連結要綁上ID到edit的路由位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-btn-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-detail btn-common&quot;</span>&gt;</span>詳細<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 這邊連結綁上id --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/expenses/&#123;&#123;this._id&#125;&#125;/edit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-edit btn-common&quot;</span>&gt;</span>編輯<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-delete btn-common&quot;</span>&gt;</span>刪除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>回到 routes &gt; modules &gt; expenses.js 新增路由：<br>透過網址的動態參數，取得資料庫資料ID，並帶入資料庫搜尋，搜尋後要使用lean()將物件轉為單純物件，在使用then將資料帶入edit頁面的各個input的value</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/:id/edit&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  <span class="keyword">return</span> Expenses.findById(id)</span><br><span class="line">  .lean()</span><br><span class="line">  .then(<span class="function"><span class="params">expense</span> =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="string">&#x27;edit&#x27;</span>, &#123;expense&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>這時候應該可以從資料庫取得正確資料，並在edit頁面上顯示在各個input裡面。</p>
<h2 id="除錯-1"><a href="#除錯-1" class="headerlink" title="除錯"></a>除錯</h2><ol start="4">
<li>在點到種子資料的時候發現，時間資料無法正確帶入，由於input的時間value格式必須是 yyyy-mm-dd，但得到的資料mm跟dd卻是個位數，那是因為在設定資料結構及種子資料時，將時間的型式設定成Number，而且種子資料也只輸入了個位數字而已，所以我們先處理這個問題，修正資料結構，及種子資料<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> expenseSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="attr">remark</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">time</span>: &#123;</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">month</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hour</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minute</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>接著修正種子資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    Expense.create(&#123;</span><br><span class="line">      <span class="attr">category</span>: <span class="string">&#x27;分類1&#x27;</span>,</span><br><span class="line">      <span class="attr">itemName</span>: <span class="string">`itemName-`</span> + i,</span><br><span class="line">      <span class="attr">cost</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;現金&#x27;</span>,</span><br><span class="line">      <span class="attr">remark</span>:<span class="string">&#x27;備註內容&#x27;</span>,</span><br><span class="line">      <span class="attr">time</span>: &#123;</span><br><span class="line">        <span class="attr">year</span>: <span class="string">&#x27;2021&#x27;</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">        <span class="attr">month</span>: <span class="string">&#x27;09&#x27;</span>, <span class="comment">// 修正為字串，如果為個位數，前方要帶入0</span></span><br><span class="line">        <span class="attr">date</span>: <span class="string">&#x27;09&#x27;</span>, <span class="comment">// 修正為字串，如果為個位數，前方要帶入0</span></span><br><span class="line">        <span class="attr">hour</span>: <span class="string">&#x27;21&#x27;</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">        <span class="attr">minute</span>: <span class="string">&#x27;9&#x27;</span>, <span class="comment">// 修正為字串</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>刪除資料，並重新生成一次種子資料，做測試，應該會正常，由於新增的日期資料本來就是以<strong>正確的格式字串</strong>存入資料庫，所以這邊沒有問題。</p>
<h2 id="修改資料並儲存"><a href="#修改資料並儲存" class="headerlink" title="修改資料並儲存"></a>修改資料並儲存</h2><ol start="6">
<li>最後再新增一個路由，就是edit頁面的表單送出，要透過router.put的方式，把更新後的資料存回資料庫，所以：</li>
</ol>
<p>我們先改寫edit頁面，將元素form的action，目的地最後補上 ?_method=PUT ，目的是透過路由器尋找是PUT的方式，但原則上他還是屬於POST，只是為了達到CRUD語意化。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/expenses/&#123;&#123;expense._id&#125;&#125;?_method=PUT&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span> <span class="comment">&lt;!-- 這邊要修改 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-wrapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>app.js載入 method-override<br>接著載入一開始初始化資料夾我們就已經下載好的method-override工具包，不然透過參數方式添加的method=PUT，路由器會無法辨識，請在app.js補上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> methodOverride = <span class="built_in">require</span>(<span class="string">&#x27;method-override&#x27;</span>)</span><br><span class="line">app.use(methodOverride(<span class="string">&#x27;_method&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>最後回到routes &gt; modules &gt; expenses.js，新增路由</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.put(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  <span class="keyword">const</span> time = &#123;</span><br><span class="line">    <span class="attr">year</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">    <span class="attr">month</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">    <span class="attr">date</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">2</span>],</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; method, category, itemName, cost, remark &#125; = req.body</span><br><span class="line">  <span class="keyword">return</span> Expenses.findById(id)</span><br><span class="line">  <span class="comment">// 修改資料不需要將得到的資料做lean()處理，那是因為handlebars為了資安問題做的限制，跟資料庫或是express無關</span></span><br><span class="line">  <span class="comment">// 若是使用了lean()，反而會導致無法儲存資料，因為資料被單純物件化了。</span></span><br><span class="line">    .then(<span class="function"><span class="params">expense</span> =&gt;</span> &#123;</span><br><span class="line">      expense.time.year = time.year</span><br><span class="line">      expense.time.month = time.month</span><br><span class="line">      expense.time.date = time.date</span><br><span class="line">      expense.method = method</span><br><span class="line">      expense.category = category</span><br><span class="line">      expense.itemName = itemName</span><br><span class="line">      expense.cost = cost</span><br><span class="line">      expense.remark = remark</span><br><span class="line">      <span class="keyword">return</span> expense.save()</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> res.redirect(<span class="string">`/`</span>))</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>成功修改資料並呈現於畫面上</p>
<img src="/2021/09/19/project-exercise-expenses/14.png" class="">

<h2 id="製作詳細資料畫面"><a href="#製作詳細資料畫面" class="headerlink" title="製作詳細資料畫面"></a>製作詳細資料畫面</h2><ol start="10">
<li><p>接著一樣可以使用編輯或是新增的這個頁面去做修改，來製作成詳細訊息頁面，所以一樣先開一個detail.hbs的資料夾，然後將HTML複製進去，在來改寫input，將它變成單純的div元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;date-text&quot;</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expense-date&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;expense-date&#x27;</span>&gt;</span>&#123;&#123;expense.time.year&#125;&#125;-&#123;&#123;expense.time.month&#125;&#125;-&#123;&#123;expense.time.date&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;method-text&quot;</span>&gt;</span>資產<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expense-method&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;expense-method&#x27;</span>&gt;</span>&#123;&#123;expense.method&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-text&quot;</span>&gt;</span>類別<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expense-category&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;expense-category&#x27;</span>&gt;</span>&#123;&#123;expense.category&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-name-text&quot;</span>&gt;</span>類別<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expense-item-name&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;expense-item-name&#x27;</span>&gt;</span>&#123;&#123;expense.itemName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cost-text&quot;</span>&gt;</span>花費<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expense-cost&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;expense-cost&#x27;</span>&gt;</span>&#123;&#123;expense.cost&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;remark-text&quot;</span>&gt;</span>備註<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expense-remark&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;expense-remark&#x27;</span>&gt;</span>&#123;&#123;expense.remark&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail-btn-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/expenses/&#123;&#123;expense._id&#125;&#125;/edit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-edit btn-common&quot;</span>&gt;</span>編輯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-delete btn-common&quot;</span>&gt;</span>刪除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>開始切版</p>
</li>
<li><p>index 的詳細按鈕連結綁上物件ID</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-btn-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 綁上資料ID到網址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/expenses/&#123;&#123;this._id&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-detail btn-common&quot;</span>&gt;</span>詳細<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/expenses/&#123;&#123;this._id&#125;&#125;/edit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-edit btn-common&quot;</span>&gt;</span>編輯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>路由新增</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  <span class="keyword">return</span> Expenses.findById(id)</span><br><span class="line">    .lean()</span><br><span class="line">    .then(<span class="function"><span class="params">expense</span> =&gt;</span> &#123;</span><br><span class="line">      res.render(<span class="string">&#x27;detail&#x27;</span>, &#123; expense &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>完成畫面</p>
<img src="/2021/09/19/project-exercise-expenses/15.png" class="">

<ol start="14">
<li>優化，增加 “收入或支出” 資料格，並添加到各個頁面</li>
</ol>
<h2 id="添加刪除功能"><a href="#添加刪除功能" class="headerlink" title="添加刪除功能"></a>添加刪除功能</h2><p>改寫各個頁面的刪除按鈕元素，這按鈕要用一個form去綁住，才能設定以DELETE的路由方式送出，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/expenses/&#123;&#123;expense._id&#125;&#125;?_method=DELETE&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">id</span>=<span class="string">&quot;delete-form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn-delete btn-common&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>刪除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加路由控制，由資料庫藉由找ID找到資料後，使用.remove()刪除資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.delete(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  <span class="keyword">return</span> Expenses.findById(id)</span><br><span class="line">  .then( <span class="function"><span class="params">expense</span> =&gt;</span> expense.remove())</span><br><span class="line">  .then ( <span class="function">() =&gt;</span> res.redirect(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>目前，新增、讀取、更新、刪除四個基本功能齊全了，後續還可以在慢慢添加更多功能，接著想來試著製作一個簡單的註冊及登入系統，會依照使用者取出不同的資料。</p>
<p><strong>此作業暫時到這邊結束</strong></p>
<p>接下來會自己嘗試非課程內的功能</p>
<p><strong>第四日記錄：</strong><br>今天花了半天時間，差不多就完成了剩下的功能，大致上沒有什麼問題，反而是感覺一開始初建階段比較困難，但整個大架構一出現，邏輯就變得很清晰，比較知道從何下手改動，但一開始若不清楚路由要怎麼定義，handlebars樣板名稱未確定，資料結構也不知道的狀態下，很多變數不清楚要一步一步建立起來比較困難，目前這個專案暫時到這邊，但接著會嘗試增加一些自己沒上過課也沒嘗試過的功能，然後繼續記錄下去。</p>
<p><strong>day 4 結束</strong></p>
<hr>
<h1 id="額外練習及嘗試-day-1"><a href="#額外練習及嘗試-day-1" class="headerlink" title="額外練習及嘗試 day 1"></a>額外練習及嘗試 day 1</h1><h2 id="製做登入畫面"><a href="#製做登入畫面" class="headerlink" title="製做登入畫面"></a>製做登入畫面</h2><ol>
<li><p>複製一份index畫面，並將原本的index畫面改為製作草稿登入畫面</p>
<img src="/2021/09/19/project-exercise-expenses/16.png" class=""></li>
<li><p>先順一下登入系統的邏輯</p>
</li>
<li><p>先要有使用者的資料結構及資料庫</p>
</li>
<li><p>當輸入好帳號密碼後，透過js綁定登入按鈕監聽，可以進行撈資料庫資料的使用者資料做比對</p>
</li>
<li><p>有相符合的資料才透過路由進入到使用者的資料畫面</p>
</li>
<li><p>先建立資料結構及資料庫，一樣在跟目錄下的 models 開一個account.js，設定帳戶結構</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> accountSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">registerTime</span>: &#123;</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">month</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;Account&#x27;</span>, accountSchema)</span><br></pre></td></tr></table></figure></li>
<li><p>創建種子資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Account = <span class="built_in">require</span>(<span class="string">&#x27;../account&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../../config/mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    Account.create(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Peter&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;1234567&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;123@example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">registerTime</span>: &#123;</span><br><span class="line">        <span class="attr">year</span>: <span class="string">&#x27;2021&#x27;</span>,</span><br><span class="line">        <span class="attr">month</span>: <span class="string">&#x27;09&#x27;</span>,</span><br><span class="line">        <span class="attr">date</span>: <span class="string">&#x27;19&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Created seeds done.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>設定腳本，執行種子資料創建種子資訊</p>
</li>
<li><p><del>製作登入畫面用js檔案，於public &gt; javascripts 下建立login.js，並載入index頁面</del></p>
</li>
<li><p>後來發現靜態檔案是無法取得資料庫連線的，所以還是得透過路由來取得資料庫</p>
</li>
<li><p>所以改變作法，由路由下手，先在routes &gt; index.js 增加一個login路由路徑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="built_in">require</span>(<span class="string">&#x27;./modules/login&#x27;</span>)</span><br><span class="line">router.use(<span class="string">&#x27;/login&#x27;</span>, login)</span><br></pre></td></tr></table></figure></li>
<li><p>然後到 routes &gt; modules &gt; 建立一個login.js，並寫入路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Account = <span class="built_in">require</span>(<span class="string">&#x27;../../models/account&#x27;</span>) <span class="comment">// 需要帳號的collection</span></span><br><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../../models/expense&#x27;</span>) <span class="comment">// 也需要花費的collection</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 當登入按鈕發送出 http://localhost:3000/login的時候</span></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 取得輸入的email</span></span><br><span class="line">  <span class="keyword">const</span> email = req.body.email</span><br><span class="line">  <span class="comment">// 取得輸入的password</span></span><br><span class="line">  <span class="keyword">const</span> password = req.body.password</span><br><span class="line">  <span class="comment">// 使用findOne到帳號資料庫裡尋找第一個符合這兩個條件的資料</span></span><br><span class="line">  Account.findOne(&#123; <span class="attr">email</span>: email, <span class="attr">password</span>: password &#125;)</span><br><span class="line">    .lean()</span><br><span class="line">    <span class="comment">// 如果有只到的話user就不會是undefine，如果是undefine，則渲染登入失敗頁面</span></span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.render(<span class="string">&#x27;loginFail&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 接著藉由帳號裡面expenses的陣列資料，這個expenses裡面存放的是它在expenses collection中屬於他的資料的index，將這些資料找出來，然後呈現在畫面上</span></span><br><span class="line">      <span class="comment">// 這邊使用了 $in ，意思是過濾所有id 只要id符合陣列內ID都調出來</span></span><br><span class="line">      Expenses.find(&#123;<span class="attr">_id</span> : &#123; <span class="attr">$in</span> : user.expenses&#125;&#125;)</span><br><span class="line">        .lean()</span><br><span class="line">        .then(<span class="function"><span class="params">expenseItems</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res.render(<span class="string">&#x27;list&#x27;</span>, &#123; expenseItems &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></li>
<li><p>到目前為止都沒問題，但後來發現多了帳號識別後，不知道要如何做新增的動作，不知道要怎麼把索引帶入帳號內，而且更重要的問題是，如何保持登入狀態?</p>
</li>
</ol>
<p><strong>額外練習嘗試第一日記錄：</strong><br>第一次嘗試製作登入系統，發現有很多隱藏的問題，例如帳戶的資料型態要怎麼設定，資料(collection)跟資料(collection)之間的關係要使用哪種方式，一對一，一對多，多對多? 哪一種方式適合要依專案需求決定以及資料內容的大小，16MG的document大小，接著又碰到了如何保持登入狀態的問題，才了解到這跟cookie有關，也是我一直不了解的部分，打算明天有空來學習這部分的新知識。</p>
<p><strong>新學習項目</strong><br>在 MongoDB 資料庫裡，最基本的概念以下四項：database、collection、document 及 field。如果有學習過 MySQL 的話，則可以從以下的對應關係來認識這四項：</p>
<table>
<thead>
<tr>
<th>MongoDB</th>
<th>MySQL</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
</tr>
<tr>
<td>collection</td>
<td>table</td>
</tr>
<tr>
<td>document</td>
<td>row</td>
</tr>
<tr>
<td>field</td>
<td>column</td>
</tr>
</tbody></table>
<p>一個 database 是由一個或多個 collections 所組成，而每個 collection 則是由一個或多個 documents 所組成。</p>
<p>db.collection: 如何用$in 將陣列作為多個過濾條件，並在指定的field中找尋符合的項目。</p>
<p><strong>額外練習及嘗試 day 1結束</strong></p>
<hr>
<h1 id="額外練習及常識-day-2"><a href="#額外練習及常識-day-2" class="headerlink" title="額外練習及常識 day 2"></a>額外練習及常識 day 2</h1><p>經過昨天的問題之後，看了 AlphaCamp的教學，學習如何使用cookies，也稍微了解了cookies的用處，，也在昨天搜尋了相關的資料跟資料間要採哪種關係，也比較有了頭緒，所以重新順一下邏輯順序：</p>
<ol>
<li>當登入的時候，從資料庫找到帳戶後，就等於驗證成功</li>
<li>登入成功後，去產生一組亂數碼，這個亂數碼可以當作token驗證碼，把它設定成為cookies的key-value，也同時把它紀錄在帳戶底下，所以帳戶必須多一個資料格為token來存放驗證碼，隨後就將帳戶的user，傳入 /expanses/user 的路由下</li>
<li>改寫expanses內的路由，所有的路由前方必須添加一個/user路徑，/expense/user 成為了登入後的首個路徑</li>
<li>進到這個頁面後，先再次檢查登入狀態，如果cookie已經有紀錄token，就代表已經登入，如果沒有則回到根目錄’/‘。</li>
<li>如果有token就可以經由這個token去核對出正確的帳戶資料出來，帳戶資料內要再多增加一個陣列集合，裡面存放expense的id，用作之後來撈expenses collection內的資料。</li>
<li>同理，隨後所有的expenses路由都必須經過此驗證，所以可以寫成一個驗證function使用</li>
<li>根目錄的路由，同時也必須添加此驗證，</li>
<li>更新所有頁面的按鈕連結</li>
<li>新增或修改時，必須將expense document的id紀錄進去帳戶中，未來才能列出正確的資料</li>
</ol>
<h2 id="重新撰寫登入"><a href="#重新撰寫登入" class="headerlink" title="重新撰寫登入"></a>重新撰寫登入</h2><ol>
<li>設定登入的路由處理</li>
</ol>
<p><strong>routes &gt; modules &gt; login.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Accounts = <span class="built_in">require</span>(<span class="string">&#x27;../../models/account&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token產生器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatedToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lowerCase = <span class="string">&#x27;abcdefghijklmnopqrstuvwkyz&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> upperCase = lowerCase.toUpperCase()</span><br><span class="line">  <span class="keyword">const</span> numbers = <span class="string">&#x27;1234567890&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> allLetter = lowerCase + upperCase + numbers</span><br><span class="line">  <span class="keyword">let</span> accountToken = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ ) &#123;</span><br><span class="line">    accountToken += allLetter[<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * allLetter.length)]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accountToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當收到 POST http://localhost:3000/login 的路由時</span></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 取得input email 及 password</span></span><br><span class="line">  <span class="keyword">const</span> email = req.body.email</span><br><span class="line">  <span class="keyword">const</span> password = req.body.password</span><br><span class="line">  <span class="comment">// 從資料庫的accounts collection裡尋找相符的資料</span></span><br><span class="line">  Accounts.findOne(&#123; <span class="string">&quot;email&quot;</span> : email, <span class="string">&quot;password&quot;</span> : password &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果沒找到，渲染登入失敗畫面</span></span><br><span class="line">      <span class="keyword">if</span> (!account) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.render(<span class="string">&#x27;loginFail&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果有資料就將token存入資料庫中及cookie中</span></span><br><span class="line">      account.token = generatedToken()</span><br><span class="line">      res.cookie(<span class="string">&#x27;userToken&#x27;</span>, account.token)</span><br><span class="line">      account.save()</span><br><span class="line">      <span class="comment">// 然後直接引導至 expenses/username 當中</span></span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">`/expenses/<span class="subst">$&#123;account.name&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>改寫expenses內的路由</li>
</ol>
<p>所有的expenses要添加:name在前面，以及所有的html鏈結，都要注意連到expenses後，都要再補上name</p>
<ol start="3">
<li><p><strong>routes &gt; modules &gt; expenses.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../../models/expense&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Accounts = <span class="built_in">require</span>(<span class="string">&#x27;../../models/account&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當被引導至 expenses/username 當中</span></span><br><span class="line">router.get(<span class="string">&#x27;/:username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 所有路由都要先取得username</span></span><br><span class="line">  <span class="keyword">const</span> name = req.params.name</span><br><span class="line">  <span class="comment">// 所有畫面都直接從cookie有無token作為登入狀態檢查</span></span><br><span class="line">  Accounts.findOne(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;)</span><br><span class="line">    .lean()</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果驗證錯誤就返回根目錄</span></span><br><span class="line">      <span class="keyword">if</span> (!account) <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="comment">// 不然就把所有expenses的資料找出屬於這個account的資料撈出來排列後顯示在畫面上</span></span><br><span class="line">      Expenses.find(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: account.expenses &#125; &#125;)</span><br><span class="line">        .lean()</span><br><span class="line">        <span class="comment">// 依時間排列</span></span><br><span class="line">        .sort(&#123;<span class="attr">time</span> : <span class="string">&#x27;desc&#x27;</span>&#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">expenseItems</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//除了帶入資料，還要帶入使用者名稱</span></span><br><span class="line">          <span class="keyword">return</span> res.render(<span class="string">&#x27;list&#x27;</span>, &#123; expenseItems, name &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>路由： GET /expenses/:name/add</strong><br>到建立新增畫面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有的路由都要補上/:username，並在一開始加入驗證</span></span><br><span class="line">router.get(<span class="string">&#x27;/:name/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = req.params.name</span><br><span class="line">  Accounts.findOne(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!account) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res.render(<span class="string">&#x27;add&#x27;</span>, &#123; name &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>路由： POST /expenses/:name/add</strong><br>這邊要特別說明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/:name/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一樣首先做驗證</span></span><br><span class="line">  Accounts.findOne(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!account) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 這邊透過指令意思是，找Expenses裡所有的物件，有_id這個項目的，按照id做倒反排序，並限制只找出一個，也就是第一個，</span></span><br><span class="line">      Expenses.findOne(&#123;&#125;, &#123; <span class="attr">_id</span>: <span class="number">1</span> &#125;).sort(&#123; <span class="attr">_id</span>: -<span class="number">1</span> &#125;).limit(<span class="number">1</span>).then(<span class="function"><span class="params">expense</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 把反序找出來的id也就會是最後的一個，再把它加上1，就是最新的一個id號碼</span></span><br><span class="line">        <span class="keyword">const</span> idNumber = <span class="built_in">Number</span>(expense._id) + <span class="number">1</span></span><br><span class="line">        <span class="comment">// 把相關的數值宣告出來</span></span><br><span class="line">        <span class="keyword">const</span> name = req.params.name</span><br><span class="line">        <span class="keyword">const</span> time = &#123;</span><br><span class="line">          <span class="attr">year</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">          <span class="attr">month</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">          <span class="attr">date</span>: req.body.time.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">2</span>],</span><br><span class="line">          <span class="attr">hour</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getHours(),</span><br><span class="line">          <span class="attr">minute</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes(),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> &#123; method, inOrOut, category, itemName, cost, remark &#125; = req.body</span><br><span class="line">        <span class="comment">// 消費創建資料，_id為新的id號碼，其他為input裡的資料</span></span><br><span class="line">        Expenses.create(&#123; <span class="attr">_id</span>: idNumber, category, itemName, inOrOut, cost, method, remark, time &#125;).then(</span><br><span class="line">          <span class="comment">// 然後找出正確的帳戶，並在帳戶上的expenses陣列中添加新id號碼</span></span><br><span class="line">          Accounts.findOneAndUpdate(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;, &#123; <span class="attr">$addToSet</span>: &#123; <span class="attr">expenses</span>: idNumber &#125; &#125;)</span><br><span class="line">          <span class="comment">// 最後返回/expenses/:name</span></span><br><span class="line">          .then(res.redirect(<span class="string">`/expenses/<span class="subst">$&#123;name&#125;</span>`</span>))</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="mongoDB-collection-裡的陣列要添加新元素"><a href="#mongoDB-collection-裡的陣列要添加新元素" class="headerlink" title="mongoDB collection 裡的陣列要添加新元素"></a>mongoDB collection 裡的陣列要添加新元素</h2><ol>
<li>正確語法： model.updateOne({key : value}, { $addToSet: { expenses: idNumber }} )</li>
</ol>
<ul>
<li>第一個參數是帶入要以什麼key和value最為條件尋找document</li>
<li>$addToSet: 只能對陣列操作，在指定的名稱陣列內新增元素，如果元素有重複則不重複增加</li>
</ul>
<ol start="2">
<li>在這個地方碰壁碰好久按照語法的使用，也沒成功，最後問題出現在資料型態設定錯誤，<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> accountSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">registerTime</span>: &#123;</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">month</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">token</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">expenses</span>: &#123; <span class="comment">// 原本這邊寫成了 expenses: []</span></span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Array</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
原本以為資料型態可以使用括號帶過，expenses: [] ，結果資料怎麼推都推不進去陣列裡面，完全無法操控，因為語法只能對陣列操作，後來發現是這邊寫錯沒有指定type: Array，所以無法對它進行增加或修改或減少…花了我好多時間才找出原因…</li>
</ol>
<p>現在新增資料後，會正確取得資料，並且顯示在畫面上了。</p>
<ol start="6">
<li>發現有問題，在主頁面清單上的按鈕的連結無法帶入user的位置</li>
</ol>
<p><strong>路由： POST /expenses/:name/</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Expenses = <span class="built_in">require</span>(<span class="string">&#x27;../../models/expense&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Accounts = <span class="built_in">require</span>(<span class="string">&#x27;../../models/account&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/:username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = req.params.name</span><br><span class="line">  Accounts.findOne(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;)</span><br><span class="line">    .lean()</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!account) <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      Expenses.find(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: account.expenses &#125; &#125;)</span><br><span class="line">        .lean()</span><br><span class="line">        .sort(&#123;<span class="attr">time</span> : <span class="string">&#x27;desc&#x27;</span>&#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">expenseItems</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res.render(<span class="string">&#x27;list&#x27;</span>, &#123; expenseItems, name &#125;) <span class="comment">// 這個name有問題，因為在html裡面，是each expenseItems，但是expenseItems裡面沒有name這個東西，所以帶不進去</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>所以要將name推進去expenseItems的物件裡面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/:name&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  </span><br><span class="line">  Accounts.findOne(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!account) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> account</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      Expenses.find(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: account.expenses &#125; &#125;)</span><br><span class="line">        .lean()</span><br><span class="line">        .sort(&#123; <span class="attr">time</span>: <span class="string">&#x27;desc&#x27;</span> &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">expenseItems</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 變成以下這樣</span></span><br><span class="line">          <span class="keyword">const</span> name = req.params.name</span><br><span class="line">          expenseItems.forEach( <span class="function"><span class="params">item</span> =&gt;</span> &#123; </span><br><span class="line">            item.name = name</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> res.render(<span class="string">&#x27;list&#x27;</span>, &#123; expenseItems &#125;)</span><br><span class="line">          <span class="comment">// 以上</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再去修改原本要帶入name的位置變成this.name</p>
<ol start="7">
<li><p>其他delete，編輯大致上都沒什麼問題</p>
</li>
<li><p>最後home.js也別忘了修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> Accounts = <span class="built_in">require</span>(<span class="string">&#x27;../../models/account&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當進到網頁根木路時</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// cookies是否存有Token驗證，無則渲染login畫面</span></span><br><span class="line">  <span class="keyword">if</span> (!req.cookies.userToken) &#123;</span><br><span class="line">    <span class="comment">// 將原本的index改為login</span></span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果有token就直接到資料庫比對token，就可以維持登入狀態，並將畫面直接引導至消費紀錄清單上</span></span><br><span class="line">  Accounts.findOne(&#123; <span class="attr">token</span>: req.cookies.userToken &#125;)</span><br><span class="line">    .lean()</span><br><span class="line">    .then(<span class="function"><span class="params">account</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">`/expenses/<span class="subst">$&#123;account.name&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></li>
<li><p>加上登出功能<br>只要加上登出按鈕，且將登出按鈕的連結綁上/logout路由，並且設定刪除cookie的userToken就可以了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.clearCookie(<span class="string">&#x27;userToken&#x27;</span>) <span class="comment">// 刪除userToken的cookie</span></span><br><span class="line">  <span class="keyword">return</span> res.redirect(<span class="string">`/`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>重新調整登入頁面，切版</p>
</li>
</ol>
<img src="/2021/09/19/project-exercise-expenses/17.png" class="">

<ol start="11">
<li>登入後header的相關資訊要顯示，寫在main.js<br>先將相關資訊CSS設定成none，等待登入後使用js檢查cookie是否有userToken，若有的話就將相關資料display轉為原本的值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkLogin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navList = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.nav-list&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> dateWrapper = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.date-wrapper&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> btnPanel = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn-panel&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> btnCreate = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn-create&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> btnLogout = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn-logout&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> hello = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.cookie.includes(<span class="string">&#x27;userToken&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    navList.style.display = <span class="string">&quot;grid&quot;</span></span><br><span class="line">    dateWrapper.style.display = <span class="string">&quot;grid&quot;</span></span><br><span class="line">    btnPanel.style.display = <span class="string">&quot;flex&quot;</span></span><br><span class="line">    btnCreate.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">    btnLogout.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">    hello.style.display = <span class="string">&quot;block&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkLogin()</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>完成註冊系統<br>設一個新路由/register 並設計register.hbs頁面，最後通過路由取得資料建立帳戶<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;register&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> registerTime = &#123;</span><br><span class="line">    <span class="attr">year</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear(),</span><br><span class="line">    <span class="attr">month</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getDate(),</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, password, email &#125; = req.body</span><br><span class="line">  Accounts.create(&#123; name, password, email, registerTime&#125;)</span><br><span class="line">    .then(res.redirect(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<img src="/2021/09/19/project-exercise-expenses/18.png" class="">

<ol start="13">
<li><p>切版登入失敗畫面</p>
<img src="/2021/09/19/project-exercise-expenses/19.png" class=""></li>
<li><p>可以再添加一個註冊成功畫面優化。</p>
<img src="/2021/09/19/project-exercise-expenses/20.png" class=""></li>
</ol>
<h2 id="上傳Heroku"><a href="#上傳Heroku" class="headerlink" title="上傳Heroku"></a>上傳Heroku</h2><ol start="15">
<li><p>接著我們來上傳到heroku吧!<br>需要有：</p>
</li>
<li><p>heroku帳號</p>
</li>
<li><p>安裝heroku cli</p>
</li>
<li><p>MongoDB Atlas</p>
</li>
<li><p>mongoDB Atlas 設定 Organization &gt; 設定Project &gt; 設定 cluster &gt; 設定connect<br>設定好cluster後按下 connect 來設定連線<br>設定允許所有IP連線，設定帳號密碼來連線這個cluster，帳號密碼可以自己複製存起來先貼到筆記本</p>
<img src="/2021/09/19/project-exercise-expenses/21.png" class=""></li>
<li><p>選擇使用後端程式來連線</p>
<img src="/2021/09/19/project-exercise-expenses/22.png" class=""></li>
</ol>
<p>接著選擇開發環境，然後要把連線的網址複製下來</p>
<img src="/2021/09/19/project-exercise-expenses/23.png" class="">

<p>再來把專案推上heroku<br>使用終端機，輸入</p>
<img src="/2021/09/19/project-exercise-expenses/24.png" class="">}

<p>建立完後，到官網登入帳號，設定config Vers 環境變數，建立一個MONGODB_URI的連線變數</p>
<img src="/2021/09/19/project-exercise-expenses/25.png" class="">

<ol start="18">
<li><p>接著回到程式的部分，要修改連線的參數及建立新的檔案<br>先建立一個Procfile，然後寫下web: node app.js，意思是這是一個網站，使用node 來啟動app.js，這樣Heroku才知道怎麼啟動網頁</p>
</li>
<li><p>修改參數第一個app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>process.env.PORT是由heroku自動把PORT的參數注入到我們Node.js執行環境中</p>
</li>
<li><p>改寫config &gt; mongoose.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> MONGODB_URI = process.env.MONGODB_URI || <span class="string">&#x27;mongodb://localhost/expenses&#x27;</span> <span class="comment">// 添加變數</span></span><br><span class="line">mongoose.connect(MONGODB_URI) <span class="comment">// 替換成變數</span></span><br><span class="line"><span class="keyword">const</span> db = mongoose.connection</span><br><span class="line"></span><br><span class="line">db.on( <span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;mongodb error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;mongodb connected&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>額外練習嘗試第二日記錄：</strong><br>今天大致攻克很多的問題，也自己實驗了很多新做法，都是以前沒嘗試過了，光是是操控伺服器，添加新的元素到陣列裡，就搞了老半天，又學會配合使用cookies做登入狀態的驗證，以及登出刪除cookies，還有使用靜態的js來檢查cookies，來切換登入或登出HTML元素的隱藏或出現，都是以前沒碰過了，也是頭昏腦脹了一天。</p>
<p><strong>新學習項目</strong></p>
<ul>
<li>使用 model.updateOne({key : value}, {$addToSet : {array: element}}) 來插入資料到document的陣列裡面</li>
<li>使用res.cookie(‘key’,’value’) 來設定cookie</li>
<li>使用res.clearCookie(‘key’)，來刪除cookie</li>
<li>靜態js可以使用document.cookie來查看全部cookie字串</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>技術筆記</category>
        <category>JavaScript</category>
        <category>Express</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>JavaScript</tag>
        <tag>Express</tag>
        <tag>Handlebars</tag>
        <tag>MongoDB</tag>
        <tag>Mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-2-ORID-回顧自己的進步</title>
    <url>/2021/10/05/S2-2-ORID/</url>
    <content><![CDATA[<h1 id="OBJECTIVE"><a href="#OBJECTIVE" class="headerlink" title="OBJECTIVE"></a>OBJECTIVE</h1><ul>
<li>用「現在的你」來比較「 1 個月前的你」，你是否感覺到自己某方面的技能進步？不限任何方向的進步，可能是寫程式速度、判斷力、或腦海中有更多可參考的見識、對自己標準提高等等，任何角度的進步皆可。<ul>
<li>因為7月的時候工作稍微忙碌，有拖延到自己2-2的預讀時間，剛好AC也在做版本更新，所以8月期間就持續完成了2-2以及2-3課程的預讀，9月開始回頭補進度後，發現對於學習2-2的課程沒有的內容難度自己有明顯的感覺到下降，甚至可以不透過課綱嘗試自己完成作業所有功能，或是對於程式碼的閱讀上，更容易理解。</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="REFLECTIVE"><a href="#REFLECTIVE" class="headerlink" title="REFLECTIVE"></a>REFLECTIVE</h1><ul>
<li>針對你說的進步點，這個進步點是怎麼累積出來的？在過去幾週你經歷了什麼樣的過程？過程中的哪些環節刻意練習到了這件事？<ul>
<li>這些進步花了很多很多時間，自己知道對一個專案不知道如何下手或是對一個新的語法不熟悉時，就是不停反覆思考以及刻意練習，這對我來說是最有效的方式，有點像運動員在訓練肌肉記憶的感覺，第一次學的時候會單純只看影片，並且一步一步跟著敲鍵盤操作，在第一次完成時真的會頭昏腦脹又一頭霧水，但對整體會稍微有一個概念，在第二次時就會以邊寫筆記邊看課綱的方式再次實作，同樣過程當中不管是寫筆記，或是實作過程當中都以自己實際敲鍵盤，不會使用複製貼上的方式，都是為了刻意練習，這樣總共加起來已經是練習了三次，這方法對我滿有效果，加上自己也會寫筆記，當萬一真的忘記的時候，可以翻閱部落格快速查找，馬上就找回當初的記憶，真的很有效。</li>
</ul>
</li>
</ul>
<h1 id="INTERPRETIVE"><a href="#INTERPRETIVE" class="headerlink" title="INTERPRETIVE"></a>INTERPRETIVE</h1><ul>
<li>根據你這次的「成長經驗」，若要「持續學習，持續進步」，是否能提煉出任何「對你來說行得通的行為/心態」？或者你有沒有發現什麼行為/心態是行不通的？<ul>
<li>對於自己來說，對一個專案或一個語法清不清楚，自己是最了解的，當自己碰到不熟悉的時候，就是多GOOGLE邊查找別人是如何做到的，以及<strong>筆記紀錄</strong>，真的同樣問題，也許時間一久會忘記，但自己會清楚自己曾經處理過類似的問題，當有意識到這個點的時候，快速地回去查找自己部落格的關鍵字，很快就可以把當初的記憶重新找回，我想這個方式對我來說是很行得通的。</li>
</ul>
</li>
</ul>
<h1 id="DECISIONAL"><a href="#DECISIONAL" class="headerlink" title="DECISIONAL"></a>DECISIONAL</h1><ul>
<li>總結。為你在下一階段學習的學習，給自己一些意見。<ul>
<li>一個階段一個階段的課程會越來越複雜，不要心急不要比較不要給自己太大壓力，跟著自己的步調，穩穩地一步一步打好，雖不聰明但要相信勤能補拙。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>ORID</tag>
      </tags>
  </entry>
  <entry>
    <title>S2-3-前端-SCSS-切版實作</title>
    <url>/2021/10/07/S2-3-layout-scss/</url>
    <content><![CDATA[<p>紀錄第一次使用SCSS預處理器來實作切版，處理Form大魔王。<br><strong>此文章圖片大部分均來自Alpha Camp課程內容</strong><br><a href="https://codepen.io/doug0849/pen/YzQggMb">完成作品</a></p>
<span id="more"></span>

<h1 id="變數-variable-與運算子-operator"><a href="#變數-variable-與運算子-operator" class="headerlink" title="變數 (variable) 與運算子 (operator)"></a>變數 (variable) 與運算子 (operator)</h1><p>使用$號來宣告變數，使用:來賦值。 也可以使用 + - * /來做值的運算</p>
<img src="/2021/10/07/S2-3-layout-scss/1.png" class="">

<h1 id="繼承與覆寫"><a href="#繼承與覆寫" class="headerlink" title="繼承與覆寫"></a>繼承與覆寫</h1><p>使用%來宣告共同屬性，在選擇的元素中使用 @extend來繼承共同屬性</p>
<img src="/2021/10/07/S2-3-layout-scss/2.png" class="">

<h1 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h1><p>在 Sass 裡，我們使用 @mixin 進行宣告，並使用 @include 使用 mixin。<br>在以下例子中，我們創建了一個名為 font-setting 的 mixin。可以發現，透過 mixin，大幅提高了程式碼的重用性 (reusability) 以及可讀性 (readability) 。</p>
<img src="/2021/10/07/S2-3-layout-scss/3.png" class="">

<h1 id="使用-each-及變數生成-basic-setting"><a href="#使用-each-及變數生成-basic-setting" class="headerlink" title="使用@each 及變數生成 basic setting"></a>使用@each 及變數生成 basic setting</h1><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sizes</span>: (</span><br><span class="line">  <span class="number">25</span>: <span class="number">25%</span>,</span><br><span class="line">  <span class="number">50</span>: <span class="number">50%</span>,</span><br><span class="line">  <span class="number">75</span>: <span class="number">75%</span>,</span><br><span class="line">  <span class="number">100</span>: <span class="number">100%</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$prop</span>, <span class="variable">$abbrev</span> in (<span class="attribute">width</span>: w, <span class="attribute">height</span>: h) &#123;</span><br><span class="line"> <span class="keyword">@each</span> <span class="variable">$num</span>, <span class="variable">$val</span> in <span class="variable">$sizes</span> &#123;</span><br><span class="line">   .#&#123;<span class="variable">$abbrev</span>&#125;-#&#123;<span class="variable">$num</span>&#125; &#123;</span><br><span class="line">     #&#123;<span class="variable">$prop</span>&#125;: <span class="variable">$val</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$prop， $abbrev , $num, $val, $sizes 都是變數，分別代表: </p>
<ul>
<li>$prop: width, height</li>
<li>$abbrev: w,h</li>
<li>$sizes: 上方定義的變數sizes</li>
<li>$num: 25, 50, 75, 100</li>
<li>$val: 25%, 50%, 75%, 100%</li>
</ul>
<p>意思會生成以下</p>
<img src="/2021/10/07/S2-3-layout-scss/4.png" class="">

<p>可以使用 Sass to CSS 的工具<a href="https://sass.js.org/">Sass.js</a>來觀察</p>
<h1 id="使用cursor改變滑鼠樣式"><a href="#使用cursor改變滑鼠樣式" class="headerlink" title="使用cursor改變滑鼠樣式"></a>使用cursor改變滑鼠樣式</h1><p>可以使用cursor來改變滑鼠樣式，可以參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/cursor">MDN</a></p>
<h1 id="使用-webkit-scrollbar-生成捲動軸"><a href="#使用-webkit-scrollbar-生成捲動軸" class="headerlink" title="使用 ::-webkit-scrollbar 生成捲動軸"></a>使用 ::-webkit-scrollbar 生成捲動軸</h1><p><strong>::-webkit-scrollbar 只支援WebKit的瀏覽器 (Chrome, Safari) 可以使用。</strong></p>
<p>可以在要加上卷軸的BLOCK上使用以下偽元素<br>::-webkit-scrollbar — 整個滾動條。<br>::-webkit-scrollbar-button — 滾動條上的按鈕（向上和向下箭頭）。<br>::-webkit-scrollbar-thumb — 滾動條上的滾動滑塊。<br>::-webkit-scrollbar-track — 滾動條軌道。<br>::-webkit-scrollbar-track-piece — 滾動條沒有滑塊的軌道部分。<br>::-webkit-scrollbar-corner — 同時有垂直滾動條和水平滾動條的部分。<br>::-webkit-resizer — 部分元素角部樣式的一部分（例如：textarea 的可拖動按鈕）。</p>
<img src="/2021/10/07/S2-3-layout-scss/5.png" class="">

<p><strong>如果是 Mozilla Firefox，我們可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scrollbars">CSS Scrollbar</a></strong></p>
<h1 id="nth-child-偽元素"><a href="#nth-child-偽元素" class="headerlink" title="nth-child 偽元素"></a>nth-child 偽元素</h1><p>我們可以用 nth-child 這個選擇器去選取每個步驟的元件，然後再透過偽元素 ::after 加上數字：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.step</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) <span class="selector-class">.circle-container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.circle-container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;2&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-class">.circle-container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;3&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但這樣做，有很多重複的內容，也可以使用 @mixin 的功能。<br>是先叫出 @mixin，再為它取個適合的名字，並將變數名稱傳進去。最後，把要重複使用的 CSS 放在 { } 裡面。像這樣：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> &lt;mixin_的名字&gt; (&lt;變數名稱&gt;) &#123;</span><br><span class="line">  <span class="comment">// 要重複使用的程式碼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個 @mixin 是用來取得 stepper 裡的數字，所以我們叫它 getStepNums。而要傳進去的變數就是 num。同時，我們使用 Sass 提供的 @for 迴圈來產生 1、2、3 這三個數字：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> getStepNums(<span class="variable">$num</span>) &#123;</span><br><span class="line">  <span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="variable">$num</span> &#123;</span><br><span class="line">    &amp;:nth:child(#&#123;<span class="variable">$i</span>&#125;) .circle-container::after &#123;</span><br><span class="line">      content: <span class="string">&#x27;#&#123;$i&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建立好這個 mixin 之後，要如何「呼叫」它呢？我們會回到需要這段 CSS 的地方，使用 @include 來呼叫它，並傳入我們的的參數，也就是我們總共需要的步驟數目 3。</p>
<p>所以在 .step 我們的 CSS 會是這樣：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.step</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="keyword">@include</span> getStepNums(<span class="number">3</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="屬性選擇器"><a href="#屬性選擇器" class="headerlink" title="屬性選擇器"></a>屬性選擇器</h1><p>可以透過 &amp;[type=”checkbox”] 來一口氣選擇所有在 HTML 中 type 等於 checkbox 的元素：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"> &amp;<span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">  ~ <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>[&lt;屬性&gt; = 字串] 是一個 CSS 選擇器，意義是透過 HTML 屬性來選擇 HTML 元素。</p>
<p>我們也使用了 ~ sibling 選擇器來選擇跟 checkbox 同一層的 label ，確保它跟 checkbox 本身會排在同一行。最後，再調整一下 margin ，這樣 checkbox label 的樣式就已經調好了。</p>
<h1 id="取消checkbox在瀏覽器中的預設樣式"><a href="#取消checkbox在瀏覽器中的預設樣式" class="headerlink" title="取消checkbox在瀏覽器中的預設樣式"></a>取消checkbox在瀏覽器中的預設樣式</h1><p>checkbox的樣式在每個瀏覽器中都會被設定好，而且無法改動，若要修改，要先取消瀏覽器的預設。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"> &amp;<span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">   -webkit-appearance: none; <span class="comment">// 補上</span></span><br><span class="line">  ~ <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<p>這時會發現checkbox樣式已經被取消了，接著才可以透過指令修改。<br>接著透過不同的狀態，去設定樣式</p>
<h1 id="使用box-shadow-inset-製作radio-button-圓點"><a href="#使用box-shadow-inset-製作radio-button-圓點" class="headerlink" title="使用box-shadow: inset 製作radio button 圓點"></a>使用box-shadow: inset 製作radio button 圓點</h1><p>複習box-shadow參數</p>
<img src="/2021/10/07/S2-3-layout-scss/6.png" class="">
<p>分別是：x-偏移量 (x-offset)、y-偏移量 (y-offset)、陰影模糊半徑 (blur radius)、陰影擴散半徑 (spread radius)、與陰影顏色 (color)。</p>
<p>在 x-偏移量與 y-偏移量的部分，是指陰影是相對於元素輪廓本身的偏移。目前要製作的是內圓，陰影其實在 x-軸與 y-軸都沒有偏移。所以都設為0。</p>
<p>陰影模糊半徑指的是希望模糊散開，還是邊緣銳利的。實心是銳利的圓形，陰影模糊半徑也設 0。</p>
<p>陰影擴散半徑指在陰影最邊緣還要往外擴散多少距離。在打造一般常見的陰影時，可以利用陰影模糊半徑跟陰影擴散半徑的配搭，讓陰影擴散得很遠。但在這邊，我們就只會利用這個擴散半徑來做出內圓，設定 5px。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span> &#123;</span><br><span class="line">  -webkit-appearance: none; </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &amp;<span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="variable">$secondary-blue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改select-標籤樣式"><a href="#修改select-標籤樣式" class="headerlink" title="修改select 標籤樣式"></a>修改select 標籤樣式</h1><p>要修改select 樣式，必須要先取消瀏覽器預設，之後把select用一個div包起來，之後在div設上after偽元素來新增下拉符號。<br>之後再設定外圍的select-wrapper寬度跟select標籤的寬度一樣就可以了</p>
<img src="/2021/10/07/S2-3-layout-scss/7.png" class="">
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;\25BE&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  select &#123;</span><br><span class="line">    <span class="keyword">@extend</span> %input-style;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="下拉箭頭border製作法"><a href="#下拉箭頭border製作法" class="headerlink" title="下拉箭頭border製作法"></a>下拉箭頭border製作法</h1><img src="/2021/10/07/S2-3-layout-scss/8.png" class="">

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;\25BE&quot;</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-style</span>: solid;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">6px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span>; <span class="comment">// 設定border寬度來製作</span></span><br><span class="line">      <span class="attribute">border-color</span>: <span class="variable">$light-gray</span> transparent transparent transparent; <span class="comment">// 之後將其他三邊透明</span></span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  select &#123;</span><br><span class="line">    <span class="keyword">@extend</span> %input-style;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="優化按鈕"><a href="#優化按鈕" class="headerlink" title="優化按鈕"></a>優化按鈕</h1><p>現在select的下拉箭頭蓋住了select，所以下拉箭頭點了會沒反應，設定z-index 將下拉箭頭放置到select後方即可</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>CSS</tag>
        <tag>切版</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>Todo List 登入系統實作</title>
    <url>/2021/10/10/todo-list-login/</url>
    <content><![CDATA[<p>狀況：本篇以Alpha Camp 2-3 的Todo-List作業的後續功能擴增實作練習，依照課綱內容實作登入、註冊功能，僅筆記自己不熟悉的重點處。</p>
<span id="more"></span>

<h1 id="建立使用者資料結構"><a href="#建立使用者資料結構" class="headerlink" title="建立使用者資料結構"></a>建立使用者資料結構</h1><p>之前的練習已經有很多建立資料結構的經驗，之前在思考建立帳號的註冊時間該怎麼帶入，結果是自己寫碼帶入各年月日，搞得很複雜很麻煩，最後才發現其實不用這麼麻煩。</p>
<p>後來查到mongoose可以直接使用type: Date 以及default: Date.now就可解決了。<br>在這個階段因為之前不知道有這樣的做法，用了很笨的方法，寫了一大堆JavaScript的new Date()物件建構子，在轉化成年月日時，最後再存入，搞了好久。</p>
<p>一開始是不知道怎麼創建時間，所以邏輯只想說上網查程式如何創建年月日時，結果查到用JavaScript的new date()物件建構子來完成，最後把這些年月日時帶入資料庫存起來，但其實還有更好的方法。</p>
<p>這邊不使用Javascript的Date.now()，因為應該是以MongoDB建立帳戶的時間點為準所以只要傳入Date.now，MongoDB收到指令就會調用Date.now函式，以自己建立的時間為準。(如果使用Date.now()變成是在Express.js伺服器建立資料的時間)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">createAt</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="comment">// 像這樣就可以了</span></span><br><span class="line">    <span class="attr">default</span>: <span class="built_in">Date</span>.now <span class="comment">// 像這樣就可以了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;Todo&#x27;</span>, userSchema)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在設定資料時，可以使用 type 來設定資料型別、使用 default 設定預設值、使用 required 設定是否為必填。</p>
<p>比對一開始的「做不出來」和最後的「成功破關」，關鍵大概是沒有下對正確的搜尋關鍵字以及不會查找官方文件，若使用工具，應先查找官方文件，雖然官方文件有時候很難懂，但他們應該是最不會錯的方式。</p>
<p>這次學習透過ODM來操作文件資料庫，有初步的了解，但後來查到資料庫還有一對一關係，一對多，多對多關係，覺得這部分更值得更深入的認識。</p>
<h1 id="註冊系統流程"><a href="#註冊系統流程" class="headerlink" title="註冊系統流程"></a>註冊系統流程</h1><ol>
<li>首先處理前端表單發送到後端的參數</li>
<li>到資料庫搜尋檢查使用者是否已經註冊</li>
<li>如果已經註冊，就退回原本畫面，並給予使用者提示</li>
<li>如果是新的使用者，就將資料寫入資料庫，完成使用者註冊，並將使用者導向首頁</li>
</ol>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>login</tag>
        <tag>register</tag>
      </tags>
  </entry>
  <entry>
    <title>AC作業-expanse-tracker</title>
    <url>/2022/06/27/AC%E4%BD%9C%E6%A5%AD-expanse-tracker/</url>
    <content><![CDATA[<p>完成老爸的私房錢作業<br><a href="https://infinite-coast-55500.herokuapp.com/">完成練習專案</a></p>
<span id="more"></span>

<h1 id="你為何會選擇這個專案？"><a href="#你為何會選擇這個專案？" class="headerlink" title="你為何會選擇這個專案？"></a>你為何會選擇這個專案？</h1><p>會選擇這個專案來做的原因有幾點</p>
<ul>
<li>整個專案涉及了相當廣的且實用的功能，例如：最常見的CRUD(新增、讀取、修改、刪除資料等功能)和廣泛使用的RESTful架構風格，都是很實用且在市場上依然必要的技術。</li>
</ul>
<h1 id="你使用了什麼技術？"><a href="#你使用了什麼技術？" class="headerlink" title="你使用了什麼技術？"></a>你使用了什麼技術？</h1><ul>
<li>這個專案對自己來說使用了過去以往都沒有碰過的技術，例如：掛載passport及express-session來完成本地登入驗證工具，達到註冊、登入、登出等驗證功能、以及掛在bcrypt來對使用者的密碼加密保存，保障使用者的個資安全。另外再配合過去已熟知bootstrap加速版面開發，使用express框架系統配合handlebars樣板引擎來製作頁面，最後經由路由控制來達成CRUD功能。雖然專案不大，但是是一個涉及非常多廣泛使用的功能的專案。</li>
</ul>
<h1 id="哪部分你相對能掌握？哪裡花了最多時間？"><a href="#哪部分你相對能掌握？哪裡花了最多時間？" class="headerlink" title="哪部分你相對能掌握？哪裡花了最多時間？"></a>哪部分你相對能掌握？哪裡花了最多時間？</h1><ul>
<li>相對能掌握的是在切版、路由控制資料庫撈資料，花最多時間的大概是在Passport登入驗證系統上，因為對於整個後端網頁資料傳遞的過程非常不熟悉，關於工具的掛載先後，資料傳遞進來後，經過哪些工具處理後又得到哪些新的資料，感覺資料的流動方向很複雜，花了許久的時間去思考內化。</li>
</ul>
<h1 id="過程中碰到什麼困難？又如何克服？"><a href="#過程中碰到什麼困難？又如何克服？" class="headerlink" title="過程中碰到什麼困難？又如何克服？"></a>過程中碰到什麼困難？又如何克服？</h1><ul>
<li>碰到最大的困難大概是在建立資料種子的部分，對於非同步處理上資料的流動性還是掌握的不太確實，Promise的寫法甚至最新的async await寫法都還不是太熟悉，不停的觀摩同學思考資料處理的方式，以及需要透過大量思考及練習，才稍微較上手。</li>
</ul>
<h1 id="過程中你有對哪個技術有特別深刻的學習？"><a href="#過程中你有對哪個技術有特別深刻的學習？" class="headerlink" title="過程中你有對哪個技術有特別深刻的學習？"></a>過程中你有對哪個技術有特別深刻的學習？</h1><ul>
<li>對於驗證系統以及非同步處理這兩大塊技術有特別多花很多時間去思考及反覆練習，驗證系統算是有史以來掛在第三方工具資料流最複雜的一次，花了滿多時間思考資料的流動向；而非同步處理也是對資料流動順序的不熟悉，在加載種子時碰到了很多資料無法建立的問題，知道問題是出在非同步處理上，但卻無法在短時間內抓到是在哪裡出錯，花了不少時間不停的試錯。</li>
</ul>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
        <tag>作業</tag>
        <tag>後端</tag>
      </tags>
  </entry>
  <entry>
    <title>socket.io如何串接express的app.js</title>
    <url>/2022/08/06/socket-io%E5%A6%82%E4%BD%95%E4%B8%B2%E6%8E%A5express-app/</url>
    <content><![CDATA[<p>Simple Twitter 挑戰功能<br><a href="https://twitter-chatroom-dhal-team.herokuapp.com/">完成練習專案</a><br><a href="https://github.com/Doug0849/twitter-fullstack-2020/tree/feature/chatroom">Github</a></p>
<span id="more"></span>
<h1 id="socket-io-伺服器檔案怎麼與express伺服器app-js拆開"><a href="#socket-io-伺服器檔案怎麼與express伺服器app-js拆開" class="headerlink" title="socket.io 伺服器檔案怎麼與express伺服器app.js拆開"></a>socket.io 伺服器檔案怎麼與express伺服器app.js拆開</h1><p>起初在本地的時候，是在app.js之中載入寫好的socket.io伺服器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> SESSION_SECRET = <span class="string">&#x27;simpleTwitter&#x27;</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./config/server-socket.io&#x27;</span>) <span class="comment">// 加在了這個地方</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>然後在 server-socket.io.js 檔案中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(<span class="number">3200</span>, &#123; <span class="comment">/* options */</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>在HTML需載入CDN引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.socket.io/4.5.0/socket.io.min.js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">&quot;sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/javascripts/chatroom-socket-io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在chatroom-socket-io.js 檔中連結io伺服器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="number">1</span></span><br><span class="line"><span class="comment">// query可以把物件帶入socket.io伺服器</span></span><br><span class="line"><span class="comment">// 後端使用socket.handshake.query.userId 可以取得</span></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&#x27;http://localhost:3200&#x27;</span>, &#123; <span class="attr">query</span>: &#123; userId &#125; &#125;) </span><br></pre></td></tr></table></figure>

<p>但當開啟頁面時卻出現了連接不到伺服器的狀況</p>
<img src="/2022/08/06/socket-io%E5%A6%82%E4%BD%95%E4%B8%B2%E6%8E%A5express-app/01.png" class="">

<p>後來發現若在本地端這樣的架構，客戶端是經由 express伺服器Port:3000，再進到<br>io Server Port:3200，所以伺服器這邊會接不到客戶端，所以需要加上cros</p>
<p>server-socket.io.js 檔案中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(<span class="number">3200</span>, &#123; </span><br><span class="line">  <span class="attr">cors</span>: &#123; <span class="attr">origin</span>: [<span class="string">&#x27;http://localhost:3000&#x27;</span>] &#125; <span class="comment">// 可以帶入多組路由</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>第一次連不上的問題就解開了，可是到了要上傳heroku的時候，這樣寫死port的方式，heroku是沒辦法使用的。</p>
<p>所以看了heroku及socket.io官方文檔後，socket.io伺服器，若要掛勾express伺服器的話，必須先建立一個http伺服器，並將express當參數載入，之後再監聽這組http伺服器，而socket.io則是連向這組http伺服器。</p>
<p>所以按步驟需要做以下改動</p>
<p>在app.js檔案下，取消require</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> SESSION_SECRET = <span class="string">&#x27;simpleTwitter&#x27;</span></span><br><span class="line"><span class="comment">// require(&#x27;./config/server-socket.io&#x27;) // 這行取消</span></span><br><span class="line"><span class="comment">// const port = process.env.PORT || 3000 // port也不需要了</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 以下伺服器監聽全刪除</span></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`Example app listening on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 以上監聽全刪</span></span><br></pre></td></tr></table></figure>

<p>在server-socket.io.js 檔案中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>) <span class="comment">// 載入app.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>) <span class="comment">// 載入http工具</span></span><br><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>) <span class="comment">// 載入socket.io</span></span><br><span class="line"><span class="keyword">const</span> httpServer = createServer(app) <span class="comment">// 創建httpServer並把app作為參數</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span> <span class="comment">// 加上 port</span></span><br><span class="line"><span class="comment">// 最後io伺服器連向httpServer， cros也不需要了</span></span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> Server(httpServer, &#123; <span class="comment">/* options */</span> &#125;)</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 最後啟動監聽伺服器</span></span><br><span class="line">httpServer.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`Example app listening on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>負責客戶端的chatroom-socket-io.js 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="built_in">Number</span>(chatroomMenu.dataset.userid)</span><br><span class="line"><span class="comment">// 把第一個原本http://localhost:3200的path參數拿掉</span></span><br><span class="line"><span class="keyword">const</span> socket = io(&#123; <span class="attr">query</span>: &#123; userId &#125; &#125;)</span><br></pre></td></tr></table></figure>

<p>最後 package.json檔案腳本別忘了改成啟動server-socket.io.js<br>heroku的Procfile也要改成啟動server-socket.io.js</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
        <category>Task</category>
        <category>socket.io</category>
      </categories>
      <tags>
        <tag>後端</tag>
        <tag>socket.io</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>Twitter開發過程反思</title>
    <url>/2022/08/22/Twitter%E9%96%8B%E7%99%BC%E9%81%8E%E7%A8%8B%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<h1 id="Twitter開發的過程反思"><a href="#Twitter開發的過程反思" class="headerlink" title="Twitter開發的過程反思"></a>Twitter開發的過程反思</h1><span id="more"></span>

<h2 id="反思部落格"><a href="#反思部落格" class="headerlink" title="反思部落格"></a>反思部落格</h2><p>這次的Twitter專案學習到了相當多的經驗，不僅僅是在技術上更為熟悉熟練，更大的收穫絕對是團隊合作的經驗，在碰到問題時如果有合作夥伴隊友，就可以彼此溝通共享資源知識一起來解決問題，那是絕對比一個人埋頭苦幹找資料想辦法來得有效率，因為每個人的思維角度切入點都不同。</p>
<h2 id="組團起源"><a href="#組團起源" class="headerlink" title="組團起源"></a>組團起源</h2><p>在這次Twitter 專案當中，自己主動當了招集人，自己開團組隊，也由於是自己開的頭，所以決定多擔待些工作，就把文件整合的工作攔下來做了。</p>
<p>一開始因為彼此都不熟悉，第一件事得把大家先拉進群組互相彼此介紹，很開心組員們都還滿開朗正向積極的，真的從頭到尾大家溝通都很流暢也都沒有吵架，覺得自己很幸運遇到了很棒的夥伴，大家彼此聽取彼此的意見，每個人提建議的時候都不會很強硬的只有一個選擇，通常都會丟出兩三種選項讓大家討論選擇，我覺得這種感覺很舒服。</p>
<h2 id="溝通交流"><a href="#溝通交流" class="headerlink" title="溝通交流"></a>溝通交流</h2><p>以前自己真的也很不善於溝通，在AC課程中也確實的學習到了溝通的重要性，也藉由這次的團隊合作嘗試改變自己，這次真的跟以往自己跟人溝通的方式是完全不一樣的。自己認為以前的自己在提出意見或想法會讓人感覺非常的有壓迫跟強迫感，讓人很不舒服(也許現在還是會不經意的用詞不當，持續改進中)，在經過這樣的學習下來跟省思後自己後來有意識到這點，所以改變了自己提出想法建議的方式，在提出意見跟想法後會一一尋求大家的認同跟更懂得換位思考去聽其他人的想法。謙遜開放的心很重要，要能謙遜的聽別人說話，也要懂得謙遜的取得別人的認同，這樣事情會更容易進行；如果三不五時就暴跳如雷難以溝通，導致正事都沒辦法進行，光處理所有人的情緒就足夠花時間跟精神了，最後一定會導致成品無法完成。</p>
<h2 id="工作分配"><a href="#工作分配" class="headerlink" title="工作分配"></a>工作分配</h2><p>很開心一開始在拉群的時候大家就各自有一些想法，經由討論後很快的大家有了共識，在攻克Twitter專案上的的工作順序有同樣的想法，所以在工作分配上更容易分配，我們是全端組，所以決定先將所有路由建立起來並且通過test檔案為優先考量，最後才進行切版的動作，並且採用敏捷開發以及看板方式來進行分工合作。</p>
<p>由我將各種功能路由分配製作成一張張的卡片，其實這工作真的花了滿多時間在思考，因為要去思考怎麼分配工作量，彼此的工作又不會互相影響，每張卡片任務功能(路由)都能獨自完成不需要去等待對方。</p>
<p>在完成路由後得需要去思考進入切版階段要如何分配工作，因為重疊性更高，更難以分配，真的花了不少時間在思考。</p>
<p>最後寫完卡片後提出給組員們一起審視，看有沒有需要調整的地方，可能有的卡片工作量太多需要拆得更細，或是有的拆得太細跟其他卡片又有關聯，所以需要合併，總之最後順利的完成所有卡片，事前的計畫非常重要，會影響到後續大家工作的流暢度，最後大家就是各自認領卡片工作，彼此不會重複工作到同樣的功能，每個人完成一個卡片功能就可以接著完成下一張卡片功能，這也是我在AC學到很重要的經驗。</p>
<h2 id="遠端工作"><a href="#遠端工作" class="headerlink" title="遠端工作"></a>遠端工作</h2><p>遠端工作最大的問題就是在於同步性，所以常常三不五時訊息就會一直跑出來，必須耐著性子去讀訊息，去理解對方想表達的東西，等待對方把問題說完，不要著急著打斷對方，也不要害怕溝通交流，相信溫柔的講話很重要，好好耐著性子說話，適度的幽默，都可以讓溝通更順暢，甚至如果感覺到緊張的時候，也可以提出暫時離開休息一下，讓整個團隊緩緩氣氛。</p>
<p>在有時間壓力下的敏捷工作，非常需要很敏捷的溝通，又由於經驗不是那麼足夠，常常commit後就馬上推上repo，結果一推上去馬上又發現錯誤，或是改動到其他沒有要變動的檔案、加了console.log沒移除….各式各樣的問題，導致很混亂。這時候也一定要馬上主動在群組發聲，說出自己錯誤，請大家不要去merge，不然會讓組員變得更混亂。</p>
<p>人人都會犯錯，發現自己有錯誤也不要擔心，但要馬上提出阻止疫情擴大，其他組員更不要對做錯事的人加以批判，更應該彼此包容，因為大家都是同一個團隊，每個人都有犯錯的可能，如果只是加以批判，只會使的團隊氣氛不好，溝通變得更不順暢更難以有效率地進行任務。</p>
<h2 id="改進"><a href="#改進" class="headerlink" title="改進"></a>改進</h2><p>在整體開發上其實經驗很不足夠，有很多的功能與當初設想的做法不同，導致浪費很多時間重作，但在重作的過程中也發現了更多問題所在，透過查找問題也學到了更多的經驗，也可以避免下一次重複發生，同時在分享問題時，組員也能夠共同成長一起學習到地雷在哪。</p>
<p>有了這些經驗，如果再重來一次，相信絕對能夠花更少的時間更精力快速來完成這個專案，這就是成長的感覺吧!(握拳)</p>
<h2 id="黑克松衝刺挑戰功能"><a href="#黑克松衝刺挑戰功能" class="headerlink" title="黑克松衝刺挑戰功能"></a>黑克松衝刺挑戰功能</h2><p>超級開心的是我的隊友們都超給力又好溝通，隊友們都很能夠及時提出超有用的資訊，所以一路上過關斬將的速度滿快的，也因為這樣我們組有提前繳交出作品並通過審核，得到更多時間來挑戰進階功能。</p>
<p>進階功能是聊天室、私訊、通知、小紅點未讀通知，我們還自己加了一個滾動讀取的進階功能，而這些所有進階功能大致上都完成了，特別開心，因為在這過程中學到了超多東西，由於自己是全職學習，所以比較有空閒可以研究socket.io跟websocket，所以大部分功能都由我完成後在分享過程給隊友，將製作過程遇到的問題，寫成文章以共享畫面的方式來分享製作過程，只有通知功能跟滾動頁面讀取功能不是由我完成，但也是透過同樣的方式從隊友身上學到他們的經驗。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>很高興自己通過重重關卡，這一路下來真的沒想到自己真的可以完成這樣的一個專案，自己都覺得很不可思議，在去年下定決心要轉職的時候，就寫下了一年後的期許，也朝著這個目標一直努力往前，也真的努力做到了自己對自己的承諾。最重要的是謝謝AC教給我的：這只是一個開始，雖然開始於JavaScript但也許這不是我的終點，因為往後一定會有更多日新月異的新技術，最重要的是我在這邊學會了如何能夠持續保持學習熱誠、能夠自己找出答案、能夠解決問題，更善於溝通合作、更願意分享知識技能、更正向的心態，衷心感謝。</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>網址的property</title>
    <url>/2022/08/08/%E7%B6%B2%E5%9D%80%E7%9A%84property/</url>
    <content><![CDATA[<p>接著來介紹幾個取得網址的property</p>
<span id="more"></span>
<p>window.location.href 取得目前造訪網頁的網址</p>
<p>window.location.protocol 取得目前造訪網頁的通訊協定(protocol)</p>
<p>window.location.host 取得目前造訪網頁的主機名稱(hostname), 包含port</p>
<p>window.location.hostname 取得目前造訪網頁的主機名稱(hostname)</p>
<p>window.location.pathname 取得目前造訪網頁的路徑(path)</p>
<p>window.location.hash 取得目前造訪網頁錨點(#)(hashtag)</p>
<p>window.location.port 取得目前造訪網頁的port</p>
<p>window.location.search 取得目前造訪網頁查詢參數(?)</p>
]]></content>
  </entry>
  <entry>
    <title>sequelize操作指令</title>
    <url>/2022/08/07/sequelize%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>使用Sequelize CLI 幫助我們產生一個 Restaurant Model </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npx sequelize model:generate --name Restaurant --attributes name:string,tel:string,address:string,openingHours:string,description:text --underscored</span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>sequelize</category>
      </categories>
      <tags>
        <tag>sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>關於從 Alpha Camp 畢業</title>
    <url>/2022/08/29/AlphaCamp%E7%95%A2%E6%A5%AD%E6%88%90%E9%95%B7/</url>
    <content><![CDATA[<h2 id="轉職的契機"><a href="#轉職的契機" class="headerlink" title="轉職的契機"></a>轉職的契機</h2><p>本身是學建築出生，在2019年的時候因為一個機會去到了越南工作，但種種原因，又因為疫情的狀況下，在去年2021年5月的時候越南開始封城，後來也嚴重影響我到越南工作的所有期望與計畫。</p>
<span id="more"></span>
<p>就在封城期間一直在思考乾脆離職回臺灣了，但臺灣的建築產業工作環境又相當的差，所以一直煩惱是否能夠轉換跑道。</p>
<p>後來想到其實一直對電腦方面滿有興趣，過去小學也曾經自己學習架設簡單的靜態網站，也有學如何使用FTP傳輸檔案…之類的，過去也曾經想去唸資工但家人阻止就讀高職，自己也無法下定決心最後就放棄了。</p>
<p>也因為原因，後來就開始查找網頁工程師相關的資訊、工作發展、轉職、以及思考要如何學習和入門，後來就偶然下搜尋到了Alpha Camp，看完了一些關於Alpha Camp的文章也看了一些學長姐所分享的經驗談，結果很快的就決定報名從這個地方開始出發。</p>
<h2 id="學習過程"><a href="#學習過程" class="headerlink" title="學習過程"></a>學習過程</h2><ol>
<li>學期1<br> 經過這麼多年的巨變，其實以前所學的知識，幾乎都已經不管用了，根本可以已經是個零基礎什麼都不懂的初心者，但很慶幸的是自己對電腦方面的事情，一直都還算熟悉不會陌生，不管在建築上學習軟體的使用或是碰到電腦的問題，都會自己上網搜尋相關資訊來解決，所以在學期一學期的過程中，並沒有碰到太大的困難，而且竟然也學出興趣了！迫不及待地在學期一讀還沒開課已經預讀完寫完作業，然後名了學期二的課程。</li>
</ol>
<ol start="2">
<li>學期2<br> 在學期2學習過程中依然充滿熱誠，雖然時常會碰到一個簡單的問題然後卡關卡半天，花上好多時間去研究去思考甚至熬夜查找資料…（還好封城的時候在家上班也沒什麼工作），也就這樣一路順順的把學期2-2給上完，但越到後面也發現難度越來越高，阻力越來越大，而越南封城也在十月底即將結束，又即將回到辦公室上班，就這樣又開始忙碌，於是沒有太多的心力能夠把這個計畫繼續下去，於是就暫時把這個計畫暫時暫停了。<br> 但當時在回到辦公室後就提出離職，而在越南也待了三年，所以很多的雜物跟返鄉的事情得處理，這一擱就到了年底返台，回臺灣又處理了很多雜事，直到2022 二、三月才有時間重拾計畫，也終於把學期2-3給完課，反倒是處理雜事無法專心上課讓我感到更為焦慮及煎熬，因為時隔一段時間，導致自己好像把所學的東西又忘的差不多，計畫一直無法如當初自己預期的去進行，但最後還是努力完成啦！</li>
</ol>
<ol start="3">
<li><p>學期3面對更大的挑戰<br> 當時在四月剛完課學期2，緊接著學期3的四月班馬上要開課，由於已經報了名，已經一再的延遲開課，因為看了課綱內容後，才驚覺學期三的課程非常繁重、看到內容一度懷疑自己到底有沒有辦法完成，由於手邊又有其他事情，覺得需要非常專注的學習，所以就又須將課程延後至6月班才開始上課。</p>
<p> 果然學期三的課程，更為艱深，內容更多更雜，一度覺得快喘不過氣，但覺得自己設定了這個目標，就一定要努力去完成，最後最後真的撐到了Twitter專案。</p>
</li>
</ol>
<h2 id="完成Twiitter專案"><a href="#完成Twiitter專案" class="headerlink" title="完成Twiitter專案"></a>完成Twiitter專案</h2><p>  剛開始Twitter專案也是一度懷疑自己，其實自己並不是一個真的很善於溝通的人，但透過AC的課程中，認真體會到溝通的重要性，但本身也不是愛話家常恨又會聊天講話的人，但為了完成這個專案，也是硬著頭皮自己開始尋找隊友，很慶幸自己找到了兩位非常可靠的同學，也因此認識了他們，從他們身上學到了很多很多，而也發現自己的溝通能力有提升，更多的細節可以看這篇<a href="https://doug0849.github.io/2022/08/22/Twitter%E9%96%8B%E7%99%BC%E9%81%8E%E7%A8%8B%E5%8F%8D%E6%80%9D/">Twitter開發過程反思</a></p>
<h2 id="完課"><a href="#完課" class="headerlink" title="完課"></a>完課</h2><p>  成功完成專案後有一種不可思議的感覺，這一年說長不長說短不短，一路好像跌跌又撞撞，但也總算是把課程修完，並且真的完成了一個簡易版的Twitter，甚至是Socket.io我都能夠靠著自己的力量研究去完成，學期三帶給我的不僅僅只是技術力，還有更多的是溝通技巧、工作上合作的態度、面對問題的心態以及如何自己去解決問題。<br>  很高興當初自己沒有做錯選擇，不管未來會走向哪，AC都已經帶給我太多太多，在未來的日子裡也會繼續待在這個大家庭，希望自己在未來持續學習，也希望有朝一日，夠有能力的時候，能夠回饋給這個這麼棒的學校，讓更多人認識Alpha Camp。</p>
]]></content>
      <categories>
        <category>AlphaCamp</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>About Block Chain</title>
    <url>/2022/09/21/About-Block-Chain/</url>
    <content><![CDATA[<p>從 Alpha Camp 畢業後，前前後後大概花了整整一年的時間，中間因為工作及家裡的事情，所以擔誤了將近半個年的時間無法持續進修，但慶幸的是把這些事情解決後，繼續堅持的將<a href="https://tw.alphacamp.co/">Alpha Camp 全端網頁開發課程</a>修完並且順利畢業，還順利申請上 <a href="https://zinstitute.net/zh">Z institute 區塊鏈線上學院</a> 的 Web3 區塊鏈前端開發課程的交換學生，也算是另一種幸運吧！</p>
<p>從區塊鏈前端開發課程開學近兩週，想在這邊稍微記錄一下開學至今近兩週的學習近況。</p>
<span id="more"></span>

<h1 id="AlphaCamp-畢業後成為的-Z-institute-交換學生"><a href="#AlphaCamp-畢業後成為的-Z-institute-交換學生" class="headerlink" title="AlphaCamp 畢業後成為的 Z institute 交換學生"></a>AlphaCamp 畢業後成為的 Z institute 交換學生</h1><p>從 Alpha Camp Web2.0 全端網頁開發課程畢業後，到順利申請到交換學生開始學區塊鍊技術，對於一個幾乎是新手小白為了轉職成為工程師的我來說，常常聽到區塊鏈、加密貨幣、NFT…，這些東西是超級陌生，完全跟 Web2.0 所學的東西，可能只掛的上一點點邊，也剛好趁這個難得的機會可以透過整個課程，有人整理完善的資訊，可以跟著學校一起學習這塊未來的趨勢，感到高興跟興奮。</p>
<h2 id="從頭學習"><a href="#從頭學習" class="headerlink" title="從頭學習"></a>從頭學習</h2><p>雖然完修 Alpha Camp 全端網頁開發課程 ，但發現自己對區塊鏈這塊的知識完全可以說是 0 ，生活在這個世代的人，很難停下腳步去學習，一旦停下感覺就會不小心被這個快速變化的世界所淘汰，所以一直以來也是保持學習分享跟求知的心態。</p>
<p>而在開課前的一週，學校開出了開課前的預習作業，作業當中有相當多的區塊鏈知識必須自行去搜尋資料，去閱讀吸收很多相關的新知識，每週光是自修閱讀的東西真的多到嚇人，每週幾乎要花上 20 個小時以上去做延伸閱讀跟自學，但也因為好奇心的驅使，雖然忙跟累可是卻非常充實且收穫滿滿，更期待課程結束後，能夠和組員一起完成一個屬於 Web3 概念的去中心化網頁應用程式專案，也是給自己的目標期許。（握拳 ✊)</p>
<h2 id="初嘗試申請錢包地址"><a href="#初嘗試申請錢包地址" class="headerlink" title="初嘗試申請錢包地址"></a>初嘗試申請錢包地址</h2><p>在 Web3 的世界裡，完全是使用加密貨幣在做交易以及執行很多相關的程序，所以加密錢包是絕對必要的，所有的 Web3 App 大部分都需要跟加密錢包做連接使用。<br>加密錢包的申請方式，需要先在手機、桌機、或網頁瀏覽器上安裝加密錢包應用(也可稱之為 Provider)，在透過錢包應用程式來申請加密錢包。</p>
<p>申請加密錢包時會提供加密的私鑰或是助記詞來幫助你找到你錢包在區塊鏈網路上的位置，所以要非常小心被駭，一旦遺失這些私鑰或助記詞或落入別人手中，你將會遺失你所有的虛擬資產，所以在資安管理上要非常小心，也要有一定的網路資安知識。</p>
<p>而我第一次申請錢包是透過 InfinityWallet 來申請錢包，先透過官方網站下載錢包應用程式來安裝。</p>
<img src="/2022/09/21/About-Block-Chain/02.png" class="">

<p>開啟 InfinityWallet 在申請時會先要求建立一個 Local 的 ID</p>
<img src="/2022/09/21/About-Block-Chain/03.png" class="">

<p>接著會要求設定一組 local 密碼，可以使用強密碼產生器來產生一組高強度密碼，<a href="https://1password.com/zh-tw/password-generator/">連結</a></p>
<img src="/2022/09/21/About-Block-Chain/04.png" class="">

<p>可以使用 google 搜尋高強度密碼產生器，這邊範例是使用 1Password 網頁應用來建立高強度密碼。</p>
<img src="/2022/09/21/About-Block-Chain/05.png" class="">

<p>接著選擇建立一個新的錢包</p>
<img src="/2022/09/21/About-Block-Chain/06.png" class="">

<p>然後設定你可愛的加密錢包名稱(未來隨時可以更改)</p>
<img src="/2022/09/21/About-Block-Chain/07.png" class="">

<p>然後在設定一組 8 位數 PIN 碼，也可以跳過。(InfinityWallet 相對做了比較多層的保險)</p>
<img src="/2022/09/21/About-Block-Chain/08.png" class="">

<p>接著使用 InfinityWallet 申請時可以自己選擇要使用 12 組或是 24 組英文單字做為助記詞</p>
<img src="/2022/09/21/About-Block-Chain/09.png" class="">

<p>然後這邊會提醒你，請你好好保管這些帳號密碼(用來使用個人電腦登入使用)及助記詞(超超超超超超重要，遺失帳號密碼還是小事，都可以透過助記詞可以來找回你的錢包，且重設密碼，可是一旦你的助記詞遺失或給了別人，等於你把你的虛擬資產直接送人，在區塊鏈的世界上可是沒有客服幫你重設密碼這件事)</p>
<img src="/2022/09/21/About-Block-Chain/10.png" class="">

<p>接著 InfinityWallet 會給你 12 或 24 組英文單字作為助記詞</p>
<img src="/2022/09/21/About-Block-Chain/11.png" class="">

<p>主要是透過對助記詞使用不可逆的哈希加密方式，就會得到一串不可逆的私鑰密碼(就是一長串不可逆的代碼，非常難記，所以有了助記詞的產生)，所以不管是助記詞或是私鑰，這兩者都不能遺失或交到別人手中，只要遺失或交到別人手中或是被駭客取得，你將會有很大的機率失去你所有的虛擬資產。</p>
<p>接著在瀏覽器上安裝相關的錢包工具，選擇恢復帳號，然後輸入助記詞或私鑰就可以重新連上你在區塊鏈上的加密錢包了！</p>
<img src="/2022/09/21/About-Block-Chain/12.png" class="">
<img src="/2022/09/21/About-Block-Chain/13.png" class="">
<img src="/2022/09/21/About-Block-Chain/14.png" class="">

<p>後來發現很多平台還是比較支援最熱門的 MataMask 錢包，所以後來幾乎都改用小狐狸作為連接錢包的工具。</p>
<img src="/2022/09/21/About-Block-Chain/16.png" class="">
<img src="/2022/09/21/About-Block-Chain/15.png" class="">

<p>第二次申請錢包是直接透過連接現在很熱門的 MetaMask 錢包來，然後使用錢包插件裡的選單直接建立一個新的錢包地址，但這個錢包地址好像會直接跟第一個錢包的助記詞綁在一起(我的狀況是這樣)，或是可以參考這邊文章直接使用 MataMask 來申請使用不同助記詞的新錢包<a href="https://myterablock.medium.com/how-to-create-or-import-a-metamask-wallet-a551fc2f5a6b">How to create a MetaMask Wallet</a>。</p>
<h2 id="助記詞與私鑰的保存"><a href="#助記詞與私鑰的保存" class="headerlink" title="助記詞與私鑰的保存"></a>助記詞與私鑰的保存</h2><p>關於私鑰或助記詞，絕對別給別人，通常也建議使用紙筆來記錄，或存在一個需要指紋辨識或是生物特徵辨識的儲存裝置，如果不擔心 USB 遺失，也可以放在 USB 裡，但是 USB 也有一天壞的可能，絕對別存放在電腦裡或是存在雲端或是以照片方式儲存或隨時連線的電腦，這些都是有可能被駭客取得的方式，也別隨意點奇怪的連結被釣魚，或安裝奇怪來路不明的外掛程式，這都很有可能使你的錢包遺失。</p>
<h2 id="EPI-與-ERC-20、ERC-721、ERC-1155"><a href="#EPI-與-ERC-20、ERC-721、ERC-1155" class="headerlink" title="EPI 與 ERC-20、ERC-721、ERC-1155"></a>EPI 與 ERC-20、ERC-721、ERC-1155</h2><p>簡單說明 EIPs 就是以太坊的改進提議，每個 EIPs 都會有編號，作為 Web3 世界開創的前幾大佬，這個 ERC-20 加密貨幣智能合約就是由乙太坊的 Frozeman 最先提出<a href="https://github.com/ethereum/EIPs/issues/20">連結在此</a></p>
<p>任何人都可以在 GitHub 上的 Ethereum 官方帳號裡找到這些<a href="https://github.com/ethereum/EIPs/issues?q=is:issue+is:closed">議題</a><br>而這些 Issues 都會有編號，而 ERC-20 代幣就是在這個 Issues 裡面編號為 20 的議題，ERC-20 加密貨幣的就是從此議題討論最後產生出來的。</p>
<img src="/2022/09/21/About-Block-Chain/01.png" class="">

<p>ERC-20 也稱為同值性代幣，所有的加密貨幣都可以彼此轉換，但因為加密貨幣又跟現實金錢有匯率關係，所以也不見得是 1:1 兌換，只是他們是同性質所以不同虛擬貨幣幣都可以互相轉換，但轉換的過程都須透過交易所來交換，同時匯率也會不停更新，交換貨幣也都會有手續費(Gas fee)，而在以太坊目前最大的交易所就數 <a href="https://uniswap.org/">Uniswarp</a> 了。</p>
<p>但諸多數位產物，例如數位藝術作品、數位音樂、數位遊戲道具、數位認證證明…諸多數位產物，它們並不具有同樣的價值性，底層的結構也不同，因此產生了 ERC-721 非同值性代幣的智能合約(也就是 NFT，Non-Fungible Token，不可取代的 Token)，這些 ERC-721 數位產物在區塊鏈上都擁有獨一無二的 Token 代碼，查詢這個 Token 代碼也就能查詢到這個數位產物的所以資訊，產生的日期，以及自身編號、總數量、交易紀錄，並且所有的 NFT 是無法直接互相兌換，必須透過 ERC-20 虛擬貨幣來做交易，但也並非所有 ERC-721 產物都可以轉移，這就要看當初在鑄造此數位產物時的設定了，一旦設定好性質且上傳至區塊鏈上便無法再做修改，舉例來說，像是認證證書、畢業證書、護照…類似的身分證名，其實就不該可以轉移，必須綁定在個人身上，亦或是由某些非去中心化組織來管理。</p>
<p>而後來因為 ERC-721 的交易每次只能單筆交易使用，但遊戲道具或數位收藏品或其他數位產物有可能有成千上百萬種，有時候交易可能不只一個項目，因而衍伸出了 ERC-1155 智能合約，ERC-1155 協議就能夠透過單筆交易來交易多項 NFT，此後也更加便利於虛擬世界上的交易。</p>
<h2 id="初嘗試購買加密貨幣"><a href="#初嘗試購買加密貨幣" class="headerlink" title="初嘗試購買加密貨幣"></a>初嘗試購買加密貨幣</h2><p>想買加密貨幣可以透過各式各樣的加密錢包插件或應用程式，選擇購買，並投過相關的中間平台商，能夠使用信用卡付費來購買這些虛擬的加密貨幣，而虛擬貨幣的匯率是浮動，所以在購買時也有很多相關需要注意的事情。(以後有機會再補充)</p>
<img src="/2022/09/21/About-Block-Chain/17.png" class="">

<h2 id="初購買-NFT"><a href="#初購買-NFT" class="headerlink" title="初購買 NFT"></a>初購買 NFT</h2><p>有了加密貨幣後，最近就在嘗試在 <a href="https://opensea.io/?ref=0xc5a0d238075734bf1758a5d6fe6edd6fb2f2e675">Opeansea</a> 跟 <a href="https://x2y2.io/">X2Y2</a> 上購買 NFT，Opensea 為一個 NFT 交易平台，也可以透過此網站來打造 NFT 產品，而最近就在這上面購買了此數位藝術作品作為大頭照</p>
<img src="/2022/09/21/About-Block-Chain/18.png" class="">

<p>所以目前就可以透過查看錢包地址來知道此圖片的過往來源，來確認此圖片的所有權是我的 🤣，而在未來可能相關的社交軟體都可以將所有的個人照片或是圖片上傳至區塊鍊中，給予這些圖片獨一無二無法複製的 Token，就可以追查這些圖片產權屬於誰，同時也代表了更難去冒充假冒別人，因為太容易查詢到圖片跟帳號的歸屬是誰了。</p>
<img src="/2022/09/21/About-Block-Chain/19.png" class="">

<h2 id="熱門公鏈與-Web3-網頁應用"><a href="#熱門公鏈與-Web3-網頁應用" class="headerlink" title="熱門公鏈與 Web3 網頁應用"></a>熱門公鏈與 Web3 網頁應用</h2><p>透過學校的介紹，得知這個叫 <a href="https://www.dapp.com/">Dapp</a> 從這網站可以取得所有公鏈平台上的 Dapp（去中心化網頁應用程式），相當好用，可以依照不同的鏈或是 Dapp 性質來過濾及熱門度來排序，可以對有興趣的類別去熱門程度去點點看玩玩看。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>目前區塊鍊應用技術正在快速的蓬勃發展，用途上其實也還存在非常多的可能性，不僅僅只是加密貨幣而已，雖然暫時還不普及，但這就像是一個大混亂時代的過渡期，就像從以前我們只能閱讀網站無法跟網站互動，只能讀取網站給我們的資料。（Web1.0，只能讀）</p>
<p>到現在能夠在網站上，下單購買商品，留言貼照片影片，或是使用網頁應用程式開發產品，使用網頁來互動，在這過渡期中也產生了很多新的協議規範，才造就了現在的Ｗ eb2.0 時代。（Web2.0 已經成為可以讀跟寫和網頁應用程式做互動了，但是很多個人資料或智慧財產物都被儲存在某些巨頭公司手上，個人用戶並不具有完全的資料所有權及控制權）</p>
<p>這也就造就了 Web3 的開發，未來所有的資料歸屬有可能將會會發展到都轉移至個人加密錢包上，加密錢包可以儲存各式各樣的資料並且加密，也就成了去中心化，檔案只有所有擁有者能夠讀寫、變更或開放權限給人觀看…之類的其他可能性，但也有一種方式還是將這些 NFT 或相關的數位產物交由中心化的世界組織來保存管理(有時還是有中心化的必要性)，但透過將這些數位產物上傳至區塊鏈，就可以來達到不可仿冒作用，也就更難假冒身份、學歷、技能證明書…，但這邊還是要再次強調，要非常小心地妥善保管加密錢包，也要有相當的網路資安知識，這樣別人就很難去竊取錢包裡的資產了。<br>（Web3，起初的理念是希望個人資料及相關數位智慧產物不在是存放於某些大公司們的伺服器中(中心化)，而改為分散儲存在世界各地的節點（電腦）上(去中心化)，只有擁有者有權利去讀取、刪除或修改，但未來會怎麼演化其實也還很難講，有時候平衡點還是需要再拿捏，並透過大部分人的共識，來產生新的規範協議。）</p>
<p>總之覺得網頁的演化是個非常有趣的過程，也很期待未來的網路世界會變得更豐富且有趣跟多樣化。未來上網時也許不僅僅只是上網，也許在上網的時候同時也可能在賺錢與消費或者更多的可能性，而不是受到一堆巨頭公司，任由這些巨頭公司控制你的個人資料、數位產物、或使用你的個人資訊來取得公司利益、或是餵給你的亂七八糟的廣告資訊、社交平台上的文字獄、亂刪除、亂封鎖，但這當中還是有很多的是情需要評估跟重新立下新世界的新遊戲規則，當然這些都需要些時間去建立跟改進，所以還會是一段長遠的路程，不然網路世界也可能會變得更加混亂跟充斥著危險。</p>
<p>另外分享我的<a href="https://etherscan.io/address/0x08c5e50244fc58bc15bf07bdabb67453e624cb17">錢包地址</a><br>反正目前沒什麼價值，也不怕人看就是。</p>
<h3 id="（以上是目前所學的初淺個人觀念知識，不一定完全正確，僅供大家參考討論）"><a href="#（以上是目前所學的初淺個人觀念知識，不一定完全正確，僅供大家參考討論）" class="headerlink" title="（以上是目前所學的初淺個人觀念知識，不一定完全正確，僅供大家參考討論）"></a>（以上是目前所學的初淺個人觀念知識，不一定完全正確，僅供大家參考討論）</h3><p>另外課程上也還介紹過相當多的 web3 應用及知識概念，例如：智能合約的撰寫、如何使用 infura 來在公鏈上做分岔來測試自己開發的 Dapp、簡易介紹如何使用 Remix 來撰寫 Solidify 智能合約並上傳到測試鏈上在透過 VS Code 使用 React 框架撰寫 Dapp 來連結錢包以及跟智能合約互動，還有透過 Dapp 來跟智能合約互動來取得鍊上資料並顯示在自己的 Dapp 網頁中，或是跟智能合約互動來修改智能合約裡的變數…，在未來課程還會有更詳細的介紹說明，到時候再作跟深入的技術筆記來跟大家分享。</p>
]]></content>
      <categories>
        <category>Web3</category>
        <category>BlockChain</category>
        <category>轉職</category>
      </categories>
      <tags>
        <tag>技術筆記</tag>
        <tag>blockChain</tag>
        <tag>web3</tag>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title>About DOM</title>
    <url>/2021/09/22/About-DOM/</url>
    <content><![CDATA[<h2 id="到底什麼是-DOM？"><a href="#到底什麼是-DOM？" class="headerlink" title="到底什麼是 DOM？"></a>到底什麼是 DOM？</h2><span id="more"></span>

<p>DOM 的全寫 Document Object Model,</p>
<p>DOM 就是由瀏覽器分析文件所產生出來 JavaScript 環境中的樹狀資料結構介面，一個網頁就是一個文件檔案，透過瀏覽器將這些文件轉化產生成樹狀的 DOM(節點、物件)，集結所有的 DOM 所呈現出來的就是整個網頁頁面，而這些文件透過瀏覽器解析後產出的 DOM(節點、物件)用來描述瀏覽器畫面中的節點，每個節點實際上是一個 JS 物件，這個物件除了包含了該元素的一些屬性，還提供了一些介面（方法），以便調用於插入和操作 DOM，就能實現透過程式語言編程對其更改結構(HTML 標籤結構)、樣式(CSS)和內容(content)，來達到和網頁頁面互動。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
</search>
